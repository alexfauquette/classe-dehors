{"ast":null,"code":"var _objectWithoutProperties = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _objectSpread = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2019 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nvar canonize = require('rdf-canonize');\n\nvar util = require('./util');\n\nvar ContextResolver = require('./ContextResolver');\n\nvar IdentifierIssuer = util.IdentifierIssuer;\n\nvar JsonLdError = require('./JsonLdError');\n\nvar LRU = require('lru-cache');\n\nvar NQuads = require('./NQuads');\n\nvar Rdfa = require('./Rdfa');\n\nvar _require = require('./expand'),\n    _expand = _require.expand;\n\nvar _require2 = require('./flatten'),\n    _flatten = _require2.flatten;\n\nvar _require3 = require('./fromRdf'),\n    _fromRDF = _require3.fromRDF;\n\nvar _require4 = require('./toRdf'),\n    _toRDF = _require4.toRDF;\n\nvar _require5 = require('./frame'),\n    _frameMergedOrDefault = _require5.frameMergedOrDefault,\n    _cleanupNull = _require5.cleanupNull;\n\nvar _require6 = require('./types'),\n    _isArray = _require6.isArray,\n    _isObject = _require6.isObject,\n    _isString = _require6.isString;\n\nvar _require7 = require('./graphTypes'),\n    _isSubjectReference = _require7.isSubjectReference;\n\nvar _require8 = require('./context'),\n    _expandIri = _require8.expandIri,\n    _getInitialContext = _require8.getInitialContext,\n    _processContext = _require8.process,\n    _processingMode = _require8.processingMode;\n\nvar _require9 = require('./compact'),\n    _compact = _require9.compact,\n    _compactIri = _require9.compactIri;\n\nvar _require10 = require('./nodeMap'),\n    _createNodeMap = _require10.createNodeMap,\n    _createMergedNodeMap = _require10.createMergedNodeMap,\n    _mergeNodeMaps = _require10.mergeNodeMaps; // determine if in-browser or using Node.js\n\n\nvar _nodejs = typeof process !== 'undefined' && process.versions && process.versions.node;\n\nvar _browser = !_nodejs && (typeof window !== 'undefined' || typeof self !== 'undefined');\n/* eslint-disable indent */\n// attaches jsonld API to the given object\n\n\nvar wrapper = function wrapper(jsonld) {\n  /** Registered RDF dataset parsers hashed by content-type. */\n  var _rdfParsers = {}; // resolved context cache\n  // TODO: consider basing max on context size rather than number\n\n  var RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\n\n  var _resolvedContextCache = new LRU({\n    max: RESOLVED_CONTEXT_CACHE_MAX_SIZE\n  });\n  /* Core API */\n\n  /**\n   * Performs JSON-LD compaction.\n   *\n   * @param input the JSON-LD input to compact.\n   * @param ctx the context to compact with.\n   * @param [options] options to use:\n   *          [base] the base IRI to use.\n   *          [compactArrays] true to compact arrays to single values when\n   *            appropriate, false not to (default: true).\n   *          [compactToRelative] true to compact IRIs to be relative to document\n   *            base, false to keep absolute (default: true)\n   *          [graph] true to always output a top-level graph (default: false).\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [framing] true if compaction is occuring during a framing operation.\n   *          [compactionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the compacted output.\n   */\n\n\n  jsonld.compact = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, ctx, options) {\n      var expanded,\n          activeCtx,\n          compacted,\n          tmp,\n          i,\n          hasContext,\n          graphAlias,\n          graph,\n          _graph,\n          key,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_args.length < 2)) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not compact, too few arguments.');\n\n            case 2:\n              if (!(ctx === null)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new JsonLdError('The compaction context must not be null.', 'jsonld.CompactError', {\n                code: 'invalid local context'\n              });\n\n            case 4:\n              if (!(input === null)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 6:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                compactArrays: true,\n                compactToRelative: true,\n                graph: false,\n                skipExpansion: false,\n                link: false,\n                issuer: new IdentifierIssuer('_:b'),\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              });\n\n              if (options.link) {\n                // force skip expansion when linking, \"link\" is not part of the public\n                // API, it should only be called from framing\n                options.skipExpansion = true;\n              }\n\n              if (!options.compactToRelative) {\n                delete options.base;\n              } // expand input\n\n\n              if (!options.skipExpansion) {\n                _context.next = 13;\n                break;\n              }\n\n              expanded = input;\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return jsonld.expand(input, options);\n\n            case 15:\n              expanded = _context.sent;\n\n            case 16:\n              _context.next = 18;\n              return jsonld.processContext(_getInitialContext(options), ctx, options);\n\n            case 18:\n              activeCtx = _context.sent;\n              _context.next = 21;\n              return _compact({\n                activeCtx: activeCtx,\n                element: expanded,\n                options: options,\n                compactionMap: options.compactionMap\n              });\n\n            case 21:\n              compacted = _context.sent;\n\n              // perform clean up\n              if (options.compactArrays && !options.graph && _isArray(compacted)) {\n                if (compacted.length === 1) {\n                  // simplify to a single item\n                  compacted = compacted[0];\n                } else if (compacted.length === 0) {\n                  // simplify to an empty object\n                  compacted = {};\n                }\n              } else if (options.graph && _isObject(compacted)) {\n                // always use array if graph option is on\n                compacted = [compacted];\n              } // follow @context key\n\n\n              if (_isObject(ctx) && '@context' in ctx) {\n                ctx = ctx['@context'];\n              } // build output context\n\n\n              ctx = util.clone(ctx);\n\n              if (!_isArray(ctx)) {\n                ctx = [ctx];\n              } // remove empty contexts\n\n\n              tmp = ctx;\n              ctx = [];\n\n              for (i = 0; i < tmp.length; ++i) {\n                if (!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n                  ctx.push(tmp[i]);\n                }\n              } // remove array if only one context\n\n\n              hasContext = ctx.length > 0;\n\n              if (ctx.length === 1) {\n                ctx = ctx[0];\n              } // add context and/or @graph\n\n\n              if (_isArray(compacted)) {\n                // use '@graph' keyword\n                graphAlias = _compactIri({\n                  activeCtx: activeCtx,\n                  iri: '@graph',\n                  relativeTo: {\n                    vocab: true\n                  }\n                });\n                graph = compacted;\n                compacted = {};\n\n                if (hasContext) {\n                  compacted['@context'] = ctx;\n                }\n\n                compacted[graphAlias] = graph;\n              } else if (_isObject(compacted) && hasContext) {\n                // reorder keys so @context is first\n                _graph = compacted;\n                compacted = {\n                  '@context': ctx\n                };\n\n                for (key in _graph) {\n                  compacted[key] = _graph[key];\n                }\n              }\n\n              return _context.abrupt(\"return\", compacted);\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Performs JSON-LD expansion.\n   *\n   * @param input the JSON-LD input to expand.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n   *            false not to, defaults to false.\n   *          [documentLoader(url, options)] the document loader.\n   *          [expansionMap(info)] a function that can be used to custom map\n   *            unmappable values (or to throw an error when they are detected);\n   *            if this function returns `undefined` then the default behavior\n   *            will be used.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the expanded output.\n   */\n\n\n  jsonld.expand = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, options) {\n      var toResolve,\n          contextsToProcess,\n          expandContext,\n          defaultBase,\n          remoteDoc,\n          activeCtx,\n          _i,\n          _contextsToProcess,\n          localCtx,\n          expanded,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(_args2.length < 1)) {\n                _context2.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not expand, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                keepFreeFloatingNodes: false,\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              });\n\n              if (options.expansionMap === false) {\n                options.expansionMap = undefined;\n              } // build set of objects that may have @contexts to resolve\n\n\n              toResolve = {}; // build set of contexts to process prior to expansion\n\n              contextsToProcess = []; // if an `expandContext` has been given ensure it gets resolved\n\n              if ('expandContext' in options) {\n                expandContext = util.clone(options.expandContext);\n\n                if (_isObject(expandContext) && '@context' in expandContext) {\n                  toResolve.expandContext = expandContext;\n                } else {\n                  toResolve.expandContext = {\n                    '@context': expandContext\n                  };\n                }\n\n                contextsToProcess.push(toResolve.expandContext);\n              } // if input is a string, attempt to dereference remote document\n\n\n              if (_isString(input)) {\n                _context2.next = 11;\n                break;\n              }\n\n              // input is not a URL, do not need to retrieve it first\n              toResolve.input = util.clone(input);\n              _context2.next = 17;\n              break;\n\n            case 11:\n              _context2.next = 13;\n              return jsonld.get(input, options);\n\n            case 13:\n              remoteDoc = _context2.sent;\n              defaultBase = remoteDoc.documentUrl;\n              toResolve.input = remoteDoc.document;\n\n              if (remoteDoc.contextUrl) {\n                // context included in HTTP link header and must be resolved\n                toResolve.remoteContext = {\n                  '@context': remoteDoc.contextUrl\n                };\n                contextsToProcess.push(toResolve.remoteContext);\n              }\n\n            case 17:\n              // set default base\n              if (!('base' in options)) {\n                options.base = defaultBase || '';\n              } // process any additional contexts\n\n\n              activeCtx = _getInitialContext(options);\n              _i = 0, _contextsToProcess = contextsToProcess;\n\n            case 20:\n              if (!(_i < _contextsToProcess.length)) {\n                _context2.next = 28;\n                break;\n              }\n\n              localCtx = _contextsToProcess[_i];\n              _context2.next = 24;\n              return _processContext({\n                activeCtx: activeCtx,\n                localCtx: localCtx,\n                options: options\n              });\n\n            case 24:\n              activeCtx = _context2.sent;\n\n            case 25:\n              _i++;\n              _context2.next = 20;\n              break;\n\n            case 28:\n              _context2.next = 30;\n              return _expand({\n                activeCtx: activeCtx,\n                element: toResolve.input,\n                options: options,\n                expansionMap: options.expansionMap\n              });\n\n            case 30:\n              expanded = _context2.sent;\n\n              // optimize away @graph with no other properties\n              if (_isObject(expanded) && '@graph' in expanded && Object.keys(expanded).length === 1) {\n                expanded = expanded['@graph'];\n              } else if (expanded === null) {\n                expanded = [];\n              } // normalize to an array\n\n\n              if (!_isArray(expanded)) {\n                expanded = [expanded];\n              }\n\n              return _context2.abrupt(\"return\", expanded);\n\n            case 34:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Performs JSON-LD flattening.\n   *\n   * @param input the JSON-LD to flatten.\n   * @param ctx the context to use to compact the flattened output, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the flattened output.\n   */\n\n\n  jsonld.flatten = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(input, ctx, options) {\n      var expanded,\n          flattened,\n          compacted,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(_args3.length < 1)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", new TypeError('Could not flatten, too few arguments.'));\n\n            case 2:\n              if (typeof ctx === 'function') {\n                ctx = null;\n              } else {\n                ctx = ctx || null;\n              } // set default options\n\n\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // expand input\n\n              _context3.next = 6;\n              return jsonld.expand(input, options);\n\n            case 6:\n              expanded = _context3.sent;\n              // do flattening\n              flattened = _flatten(expanded);\n\n              if (!(ctx === null)) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", flattened);\n\n            case 10:\n              // compact result (force @graph option to true, skip expansion)\n              options.graph = true;\n              options.skipExpansion = true;\n              _context3.next = 14;\n              return jsonld.compact(flattened, ctx, options);\n\n            case 14:\n              compacted = _context3.sent;\n              return _context3.abrupt(\"return\", compacted);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x6, _x7, _x8) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /**\n   * Performs JSON-LD framing.\n   *\n   * @param input the JSON-LD input to frame.\n   * @param frame the JSON-LD frame to use.\n   * @param [options] the framing options.\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n   *            (default: '@last').\n   *          [explicit] default @explicit flag (default: false).\n   *          [requireAll] default @requireAll flag (default: true).\n   *          [omitDefault] default @omitDefault flag (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the framed output.\n   */\n\n\n  jsonld.frame = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(input, frame, options) {\n      var remoteDoc,\n          ctx,\n          frameContext,\n          activeCtx,\n          expanded,\n          opts,\n          expandedFrame,\n          frameKeys,\n          framed,\n          compacted,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(_args4.length < 2)) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not frame, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                embed: '@once',\n                explicit: false,\n                requireAll: false,\n                omitDefault: false,\n                bnodesToClear: [],\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // if frame is a string, attempt to dereference remote document\n\n              if (!_isString(frame)) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 6;\n              return jsonld.get(frame, options);\n\n            case 6:\n              remoteDoc = _context4.sent;\n              frame = remoteDoc.document;\n\n              if (remoteDoc.contextUrl) {\n                // inject link header @context into frame\n                ctx = frame['@context'];\n\n                if (!ctx) {\n                  ctx = remoteDoc.contextUrl;\n                } else if (_isArray(ctx)) {\n                  ctx.push(remoteDoc.contextUrl);\n                } else {\n                  ctx = [ctx, remoteDoc.contextUrl];\n                }\n\n                frame['@context'] = ctx;\n              }\n\n            case 9:\n              frameContext = frame ? frame['@context'] || {} : {}; // process context\n\n              _context4.next = 12;\n              return jsonld.processContext(_getInitialContext(options), frameContext, options);\n\n            case 12:\n              activeCtx = _context4.sent;\n\n              // mode specific defaults\n              if (!options.hasOwnProperty('omitGraph')) {\n                options.omitGraph = _processingMode(activeCtx, 1.1);\n              }\n\n              if (!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n                options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n              } // expand input\n\n\n              _context4.next = 17;\n              return jsonld.expand(input, options);\n\n            case 17:\n              expanded = _context4.sent;\n              // expand frame\n              opts = _objectSpread({}, options);\n              opts.isFrame = true;\n              opts.keepFreeFloatingNodes = true;\n              _context4.next = 23;\n              return jsonld.expand(frame, opts);\n\n            case 23:\n              expandedFrame = _context4.sent;\n              // if the unexpanded frame includes a key expanding to @graph, frame the\n              // default graph, otherwise, the merged graph\n              frameKeys = Object.keys(frame).map(function (key) {\n                return _expandIri(activeCtx, key, {\n                  vocab: true\n                });\n              });\n              opts.merged = !frameKeys.includes('@graph');\n              opts.is11 = _processingMode(activeCtx, 1.1); // do framing\n\n              framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n              opts.graph = !options.omitGraph;\n              opts.skipExpansion = true;\n              opts.link = {};\n              opts.framing = true;\n              _context4.next = 34;\n              return jsonld.compact(framed, frameContext, opts);\n\n            case 34:\n              compacted = _context4.sent;\n              // replace @null with null, compacting arrays\n              opts.link = {};\n              compacted = _cleanupNull(compacted, opts);\n              return _context4.abrupt(\"return\", compacted);\n\n            case 38:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x9, _x10, _x11) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  /**\n   * **Experimental**\n   *\n   * Links a JSON-LD document's nodes in memory.\n   *\n   * @param input the JSON-LD document to link.\n   * @param [ctx] the JSON-LD context to apply.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the linked output.\n   */\n\n\n  jsonld.link = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(input, ctx, options) {\n      var frame;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // API matches running frame with a wildcard frame and embed: '@link'\n              // get arguments\n              frame = {};\n\n              if (ctx) {\n                frame['@context'] = ctx;\n              }\n\n              frame['@embed'] = '@link';\n              return _context5.abrupt(\"return\", jsonld.frame(input, frame, options));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x12, _x13, _x14) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  /**\n   * Performs RDF dataset normalization on the given input. The input is JSON-LD\n   * unless the 'inputFormat' option is used. The output is an RDF dataset\n   * unless the 'format' option is used.\n   *\n   * @param input the input to normalize as JSON-LD or as a format specified by\n   *          the 'inputFormat' option.\n   * @param [options] the options to use:\n   *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n   *            `URGNA2012` (default: `URDNA2015`).\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [inputFormat] the format if input is not JSON-LD:\n   *            'application/n-quads' for N-Quads.\n   *          [format] the format if output is a string:\n   *            'application/n-quads' for N-Quads.\n   *          [documentLoader(url, options)] the document loader.\n   *          [useNative] true to use a native canonize algorithm\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the normalized output.\n   */\n\n\n  jsonld.normalize = jsonld.canonize = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(input, options) {\n      var parsedInput,\n          opts,\n          dataset,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(_args6.length < 1)) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not canonize, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                algorithm: 'URDNA2015',\n                skipExpansion: false,\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              });\n\n              if (!('inputFormat' in options)) {\n                _context6.next = 8;\n                break;\n              }\n\n              if (!(options.inputFormat !== 'application/n-quads' && options.inputFormat !== 'application/nquads')) {\n                _context6.next = 6;\n                break;\n              }\n\n              throw new JsonLdError('Unknown canonicalization input format.', 'jsonld.CanonizeError');\n\n            case 6:\n              // TODO: `await` for async parsers\n              parsedInput = NQuads.parse(input); // do canonicalization\n\n              return _context6.abrupt(\"return\", canonize.canonize(parsedInput, options));\n\n            case 8:\n              // convert to RDF dataset then do normalization\n              opts = _objectSpread({}, options);\n              delete opts.format;\n              opts.produceGeneralizedRdf = false;\n              _context6.next = 13;\n              return jsonld.toRDF(input, opts);\n\n            case 13:\n              dataset = _context6.sent;\n              return _context6.abrupt(\"return\", canonize.canonize(dataset, options));\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x15, _x16) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  /**\n   * Converts an RDF dataset to JSON-LD.\n   *\n   * @param dataset a serialized string of RDF in a format specified by the\n   *          format option or an RDF dataset to convert.\n   * @param [options] the options to use:\n   *          [format] the format if dataset param must first be parsed:\n   *            'application/n-quads' for N-Quads (default).\n   *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n   *          [useRdfType] true to use rdf:type, false to use @type\n   *            (default: false).\n   *          [useNativeTypes] true to convert XSD types into native types\n   *            (boolean, integer, double), false not to (default: false).\n   *\n   * @return a Promise that resolves to the JSON-LD document.\n   */\n\n\n  jsonld.fromRDF = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dataset, options) {\n      var _options,\n          format,\n          _options2,\n          rdfParser,\n          parsedDataset,\n          _args7 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(_args7.length < 1)) {\n                _context7.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not convert from RDF, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                format: _isString(dataset) ? 'application/n-quads' : undefined\n              });\n              _options = options, format = _options.format;\n              _options2 = options, rdfParser = _options2.rdfParser; // handle special format\n\n              if (!format) {\n                _context7.next = 11;\n                break;\n              }\n\n              // check supported formats\n              rdfParser = rdfParser || _rdfParsers[format];\n\n              if (rdfParser) {\n                _context7.next = 9;\n                break;\n              }\n\n              throw new JsonLdError('Unknown input format.', 'jsonld.UnknownFormat', {\n                format: format\n              });\n\n            case 9:\n              _context7.next = 12;\n              break;\n\n            case 11:\n              // no-op parser, assume dataset already parsed\n              rdfParser = function rdfParser() {\n                return dataset;\n              };\n\n            case 12:\n              _context7.next = 14;\n              return rdfParser(dataset);\n\n            case 14:\n              parsedDataset = _context7.sent;\n              return _context7.abrupt(\"return\", _fromRDF(parsedDataset, options));\n\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x17, _x18) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  /**\n   * Outputs the RDF dataset found in the given JSON-LD object.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [skipExpansion] true to assume the input is expanded and skip\n   *            expansion, false not to, defaults to false.\n   *          [format] the format to use to output a string:\n   *            'application/n-quads' for N-Quads.\n   *          [produceGeneralizedRdf] true to output generalized RDF, false\n   *            to produce only standard RDF (default: false).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the RDF dataset.\n   */\n\n\n  jsonld.toRDF = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(input, options) {\n      var expanded,\n          dataset,\n          _args8 = arguments;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(_args8.length < 1)) {\n                _context8.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not convert to RDF, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                skipExpansion: false,\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // TODO: support toRDF custom map?\n\n              if (!options.skipExpansion) {\n                _context8.next = 7;\n                break;\n              }\n\n              expanded = input;\n              _context8.next = 10;\n              break;\n\n            case 7:\n              _context8.next = 9;\n              return jsonld.expand(input, options);\n\n            case 9:\n              expanded = _context8.sent;\n\n            case 10:\n              // output RDF dataset\n              dataset = _toRDF(expanded, options);\n\n              if (!options.format) {\n                _context8.next = 17;\n                break;\n              }\n\n              if (!(options.format === 'application/n-quads' || options.format === 'application/nquads')) {\n                _context8.next = 16;\n                break;\n              }\n\n              _context8.next = 15;\n              return NQuads.serialize(dataset);\n\n            case 15:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 16:\n              throw new JsonLdError('Unknown output format.', 'jsonld.UnknownFormat', {\n                format: options.format\n              });\n\n            case 17:\n              return _context8.abrupt(\"return\", dataset);\n\n            case 18:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x19, _x20) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  /**\n   * **Experimental**\n   *\n   * Recursively flattens the nodes in the given JSON-LD input into a merged\n   * map of node ID => node. All graphs will be merged into the default graph.\n   *\n   * @param input the JSON-LD input.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged node map.\n   */\n\n\n  jsonld.createNodeMap = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(input, options) {\n      var expanded,\n          _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(_args9.length < 1)) {\n                _context9.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not create node map, too few arguments.');\n\n            case 2:\n              // set default options\n              options = _setDefaults(options, {\n                base: _isString(input) ? input : '',\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // expand input\n\n              _context9.next = 5;\n              return jsonld.expand(input, options);\n\n            case 5:\n              expanded = _context9.sent;\n              return _context9.abrupt(\"return\", _createMergedNodeMap(expanded, options));\n\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function (_x21, _x22) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  /**\n   * **Experimental**\n   *\n   * Merges two or more JSON-LD documents into a single flattened document.\n   *\n   * @param docs the JSON-LD documents to merge together.\n   * @param ctx the context to use to compact the merged result, or null.\n   * @param [options] the options to use:\n   *          [base] the base IRI to use.\n   *          [expandContext] a context to expand with.\n   *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n   *          [mergeNodes] true to merge properties for nodes with the same ID,\n   *            false to ignore new properties for nodes with the same ID once\n   *            the ID has been defined; note that this may not prevent merging\n   *            new properties where a node is in the `object` position\n   *            (default: true).\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the merged output.\n   */\n\n\n  jsonld.merge = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(docs, ctx, options) {\n      var expanded,\n          mergeNodes,\n          issuer,\n          graphs,\n          i,\n          doc,\n          _graphs,\n          graphName,\n          _nodeMap,\n          nodeMap,\n          key,\n          defaultGraph,\n          flattened,\n          keys,\n          ki,\n          node,\n          compacted,\n          _args10 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!(_args10.length < 1)) {\n                _context10.next = 2;\n                break;\n              }\n\n              throw new TypeError('Could not merge, too few arguments.');\n\n            case 2:\n              if (_isArray(docs)) {\n                _context10.next = 4;\n                break;\n              }\n\n              throw new TypeError('Could not merge, \"docs\" must be an array.');\n\n            case 4:\n              if (typeof ctx === 'function') {\n                ctx = null;\n              } else {\n                ctx = ctx || null;\n              } // set default options\n\n\n              options = _setDefaults(options, {\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // expand all documents\n\n              _context10.next = 8;\n              return Promise.all(docs.map(function (doc) {\n                var opts = _objectSpread({}, options);\n\n                return jsonld.expand(doc, opts);\n              }));\n\n            case 8:\n              expanded = _context10.sent;\n              mergeNodes = true;\n\n              if ('mergeNodes' in options) {\n                mergeNodes = options.mergeNodes;\n              }\n\n              issuer = options.issuer || new IdentifierIssuer('_:b');\n              graphs = {\n                '@default': {}\n              };\n              i = 0;\n\n            case 14:\n              if (!(i < expanded.length)) {\n                _context10.next = 33;\n                break;\n              }\n\n              // uniquely relabel blank nodes\n              doc = util.relabelBlankNodes(expanded[i], {\n                issuer: new IdentifierIssuer('_:b' + i + '-')\n              }); // add nodes to the shared node map graphs if merging nodes, to a\n              // separate graph set if not\n\n              _graphs = mergeNodes || i === 0 ? graphs : {\n                '@default': {}\n              };\n\n              _createNodeMap(doc, _graphs, '@default', issuer);\n\n              if (!(_graphs !== graphs)) {\n                _context10.next = 30;\n                break;\n              }\n\n              _context10.t0 = _regeneratorRuntime.keys(_graphs);\n\n            case 20:\n              if ((_context10.t1 = _context10.t0()).done) {\n                _context10.next = 30;\n                break;\n              }\n\n              graphName = _context10.t1.value;\n              _nodeMap = _graphs[graphName];\n\n              if (graphName in graphs) {\n                _context10.next = 26;\n                break;\n              }\n\n              graphs[graphName] = _nodeMap;\n              return _context10.abrupt(\"continue\", 20);\n\n            case 26:\n              nodeMap = graphs[graphName];\n\n              for (key in _nodeMap) {\n                if (!(key in nodeMap)) {\n                  nodeMap[key] = _nodeMap[key];\n                }\n              }\n\n              _context10.next = 20;\n              break;\n\n            case 30:\n              ++i;\n              _context10.next = 14;\n              break;\n\n            case 33:\n              // add all non-default graphs to default graph\n              defaultGraph = _mergeNodeMaps(graphs); // produce flattened output\n\n              flattened = [];\n              keys = Object.keys(defaultGraph).sort();\n\n              for (ki = 0; ki < keys.length; ++ki) {\n                node = defaultGraph[keys[ki]]; // only add full subjects to top-level\n\n                if (!_isSubjectReference(node)) {\n                  flattened.push(node);\n                }\n              }\n\n              if (!(ctx === null)) {\n                _context10.next = 39;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", flattened);\n\n            case 39:\n              // compact result (force @graph option to true, skip expansion)\n              options.graph = true;\n              options.skipExpansion = true;\n              _context10.next = 43;\n              return jsonld.compact(flattened, ctx, options);\n\n            case 43:\n              compacted = _context10.sent;\n              return _context10.abrupt(\"return\", compacted);\n\n            case 45:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function (_x23, _x24, _x25) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  /**\n   * The default document loader for external documents.\n   *\n   * @param url the URL to load.\n   *\n   * @return a promise that resolves to the remote document.\n   */\n\n\n  Object.defineProperty(jsonld, 'documentLoader', {\n    get: function get() {\n      return jsonld._documentLoader;\n    },\n    set: function set(v) {\n      return jsonld._documentLoader = v;\n    }\n  }); // default document loader not implemented\n\n  jsonld.documentLoader = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(url) {\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL. URL ' + 'dereferencing not implemented.', 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                url: url\n              });\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function (_x26) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  /**\n   * Gets a remote JSON-LD document using the default document loader or\n   * one given in the passed options.\n   *\n   * @param url the URL to fetch.\n   * @param [options] the options to use:\n   *          [documentLoader] the document loader to use.\n   *\n   * @return a Promise that resolves to the retrieved remote document.\n   */\n\n\n  jsonld.get = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(url, options) {\n      var load, remoteDoc;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (typeof options.documentLoader === 'function') {\n                load = options.documentLoader;\n              } else {\n                load = jsonld.documentLoader;\n              }\n\n              _context12.next = 3;\n              return load(url);\n\n            case 3:\n              remoteDoc = _context12.sent;\n              _context12.prev = 4;\n\n              if (remoteDoc.document) {\n                _context12.next = 7;\n                break;\n              }\n\n              throw new JsonLdError('No remote document found at the given URL.', 'jsonld.NullRemoteDocument');\n\n            case 7:\n              if (_isString(remoteDoc.document)) {\n                remoteDoc.document = JSON.parse(remoteDoc.document);\n              }\n\n              _context12.next = 13;\n              break;\n\n            case 10:\n              _context12.prev = 10;\n              _context12.t0 = _context12[\"catch\"](4);\n              throw new JsonLdError('Could not retrieve a JSON-LD document from the URL.', 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                cause: _context12.t0,\n                remoteDoc: remoteDoc\n              });\n\n            case 13:\n              return _context12.abrupt(\"return\", remoteDoc);\n\n            case 14:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[4, 10]]);\n    }));\n\n    return function (_x27, _x28) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n  /**\n   * Processes a local context, resolving any URLs as necessary, and returns a\n   * new active context.\n   *\n   * @param activeCtx the current active context.\n   * @param localCtx the local context to process.\n   * @param [options] the options to use:\n   *          [documentLoader(url, options)] the document loader.\n   *          [contextResolver] internal use only.\n   *\n   * @return a Promise that resolves to the new active context.\n   */\n\n\n  jsonld.processContext = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(activeCtx, localCtx, options) {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              // set default options\n              options = _setDefaults(options, {\n                base: '',\n                contextResolver: new ContextResolver({\n                  sharedCache: _resolvedContextCache\n                })\n              }); // return initial context early for null context\n\n              if (!(localCtx === null)) {\n                _context13.next = 3;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", _getInitialContext(options));\n\n            case 3:\n              // get URLs in localCtx\n              localCtx = util.clone(localCtx);\n\n              if (!(_isObject(localCtx) && '@context' in localCtx)) {\n                localCtx = {\n                  '@context': localCtx\n                };\n              }\n\n              return _context13.abrupt(\"return\", _processContext({\n                activeCtx: activeCtx,\n                localCtx: localCtx,\n                options: options\n              }));\n\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function (_x29, _x30, _x31) {\n      return _ref13.apply(this, arguments);\n    };\n  }(); // backwards compatibility\n\n\n  jsonld.getContextValue = require('./context').getContextValue;\n  /**\n   * Document loaders.\n   */\n\n  jsonld.documentLoaders = {};\n  jsonld.documentLoaders.node = require('./documentLoaders/node');\n  jsonld.documentLoaders.xhr = require('./documentLoaders/xhr');\n  /**\n   * Assigns the default document loader for external document URLs to a built-in\n   * default. Supported types currently include: 'xhr' and 'node'.\n   *\n   * @param type the type to set.\n   * @param [params] the parameters required to use the document loader.\n   */\n\n  jsonld.useDocumentLoader = function (type) {\n    if (!(type in jsonld.documentLoaders)) {\n      throw new JsonLdError('Unknown document loader type: \"' + type + '\"', 'jsonld.UnknownDocumentLoader', {\n        type: type\n      });\n    } // set document loader\n\n\n    jsonld.documentLoader = jsonld.documentLoaders[type].apply(jsonld, Array.prototype.slice.call(arguments, 1));\n  };\n  /**\n   * Registers an RDF dataset parser by content-type, for use with\n   * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n   * a string of input. An RDF dataset parser can be synchronous or\n   * asynchronous (by returning a promise).\n   *\n   * @param contentType the content-type for the parser.\n   * @param parser(input) the parser function (takes a string as a parameter\n   *          and either returns an RDF dataset or a Promise that resolves to one.\n   */\n\n\n  jsonld.registerRDFParser = function (contentType, parser) {\n    _rdfParsers[contentType] = parser;\n  };\n  /**\n   * Unregisters an RDF dataset parser by content-type.\n   *\n   * @param contentType the content-type for the parser.\n   */\n\n\n  jsonld.unregisterRDFParser = function (contentType) {\n    delete _rdfParsers[contentType];\n  }; // register the N-Quads RDF parser\n\n\n  jsonld.registerRDFParser('application/n-quads', NQuads.parse);\n  jsonld.registerRDFParser('application/nquads', NQuads.parse); // register the RDFa API RDF parser\n\n  jsonld.registerRDFParser('rdfa-api', Rdfa.parse);\n  /* URL API */\n\n  jsonld.url = require('./url');\n  /* Utility API */\n\n  jsonld.util = util; // backwards compatibility\n\n  Object.assign(jsonld, util); // reexpose API as jsonld.promises for backwards compatability\n\n  jsonld.promises = jsonld; // backwards compatibility\n\n  jsonld.RequestQueue = require('./RequestQueue');\n  /* WebIDL API */\n\n  jsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld); // setup browser global JsonLdProcessor\n\n  if (_browser && typeof global.JsonLdProcessor === 'undefined') {\n    Object.defineProperty(global, 'JsonLdProcessor', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: jsonld.JsonLdProcessor\n    });\n  } // set platform-specific defaults/APIs\n\n\n  if (_nodejs) {\n    // use node document loader by default\n    jsonld.useDocumentLoader('node');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // use xhr document loader by default\n    jsonld.useDocumentLoader('xhr');\n  }\n\n  function _setDefaults(options, _ref14) {\n    var _ref14$documentLoader = _ref14.documentLoader,\n        documentLoader = _ref14$documentLoader === void 0 ? jsonld.documentLoader : _ref14$documentLoader,\n        defaults = _objectWithoutProperties(_ref14, [\"documentLoader\"]);\n\n    return Object.assign({}, {\n      documentLoader: documentLoader\n    }, defaults, options);\n  } // end of jsonld API `wrapper` factory\n\n\n  return jsonld;\n}; // external APIs:\n// used to generate a new jsonld API instance\n\n\nvar factory = function factory() {\n  return wrapper(function () {\n    return factory();\n  });\n}; // wrap the main jsonld API instance\n\n\nwrapper(factory); // export API\n\nmodule.exports = factory;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/jsonld/lib/jsonld.js"],"names":["canonize","require","util","ContextResolver","IdentifierIssuer","JsonLdError","LRU","NQuads","Rdfa","_expand","expand","_flatten","flatten","_fromRDF","fromRDF","_toRDF","toRDF","_frameMergedOrDefault","frameMergedOrDefault","_cleanupNull","cleanupNull","_isArray","isArray","_isObject","isObject","_isString","isString","_isSubjectReference","isSubjectReference","_expandIri","expandIri","_getInitialContext","getInitialContext","_processContext","process","_processingMode","processingMode","_compact","compact","_compactIri","compactIri","_createNodeMap","createNodeMap","_createMergedNodeMap","createMergedNodeMap","_mergeNodeMaps","mergeNodeMaps","_nodejs","versions","node","_browser","window","self","wrapper","jsonld","_rdfParsers","RESOLVED_CONTEXT_CACHE_MAX_SIZE","_resolvedContextCache","max","input","ctx","options","length","TypeError","code","_setDefaults","base","compactArrays","compactToRelative","graph","skipExpansion","link","issuer","contextResolver","sharedCache","expanded","processContext","activeCtx","element","compactionMap","compacted","clone","tmp","i","Object","keys","push","hasContext","graphAlias","iri","relativeTo","vocab","key","keepFreeFloatingNodes","expansionMap","undefined","toResolve","contextsToProcess","expandContext","get","remoteDoc","defaultBase","documentUrl","document","contextUrl","remoteContext","localCtx","flattened","frame","embed","explicit","requireAll","omitDefault","bnodesToClear","frameContext","hasOwnProperty","omitGraph","pruneBlankNodeIdentifiers","opts","isFrame","expandedFrame","frameKeys","map","merged","includes","is11","framed","framing","normalize","algorithm","inputFormat","parsedInput","parse","format","produceGeneralizedRdf","dataset","rdfParser","parsedDataset","serialize","merge","docs","Promise","all","doc","mergeNodes","graphs","relabelBlankNodes","_graphs","graphName","_nodeMap","nodeMap","defaultGraph","sort","ki","defineProperty","_documentLoader","set","v","documentLoader","url","load","JSON","cause","getContextValue","documentLoaders","xhr","useDocumentLoader","type","apply","Array","prototype","slice","call","arguments","registerRDFParser","contentType","parser","unregisterRDFParser","assign","promises","RequestQueue","JsonLdProcessor","global","writable","enumerable","configurable","value","XMLHttpRequest","defaults","factory","module","exports"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAME,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAMG,gBAAgB,GAAGF,IAAI,CAACE,gBAA9B;;AACA,IAAMC,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMK,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMO,IAAI,GAAGP,OAAO,CAAC,QAAD,CAApB;;eAE0BA,OAAO,CAAC,UAAD,C;IAAlBQ,O,YAARC,M;;gBACqBT,OAAO,CAAC,WAAD,C;IAAnBU,Q,aAATC,O;;gBACqBX,OAAO,CAAC,WAAD,C;IAAnBY,Q,aAATC,O;;gBACiBb,OAAO,CAAC,SAAD,C;IAAjBc,M,aAAPC,K;;gBAKHf,OAAO,CAAC,SAAD,C;IAFagB,qB,aAAtBC,oB;IACaC,Y,aAAbC,W;;gBAOEnB,OAAO,CAAC,SAAD,C;IAHAoB,Q,aAATC,O;IACUC,S,aAAVC,Q;IACUC,S,aAAVC,Q;;gBAKEzB,OAAO,CAAC,cAAD,C;IADW0B,mB,aAApBC,kB;;gBAQE3B,OAAO,CAAC,WAAD,C;IAJE4B,U,aAAXC,S;IACmBC,kB,aAAnBC,iB;IACSC,e,aAATC,O;IACgBC,e,aAAhBC,c;;gBAMEnC,OAAO,CAAC,WAAD,C;IAFAoC,Q,aAATC,O;IACYC,W,aAAZC,U;;iBAOEvC,OAAO,CAAC,WAAD,C;IAHMwC,c,cAAfC,a;IACqBC,oB,cAArBC,mB;IACeC,c,cAAfC,a,EAGF;;;AACA,IAAMC,OAAO,GACX,OAAOb,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACc,QAA1C,IAAsDd,OAAO,CAACc,QAAR,CAAiBC,IADzE;;AAEA,IAAMC,QAAQ,GAAG,CAACH,OAAD,KACd,OAAOI,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,IAAP,KAAgB,WADnC,CAAjB;AAGA;AACA;;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAASC,MAAT,EAAiB;AAEjC;AACA,MAAMC,WAAW,GAAG,EAApB,CAHiC,CAKjC;AACA;;AACA,MAAMC,+BAA+B,GAAG,GAAxC;;AACA,MAAMC,qBAAqB,GAAG,IAAInD,GAAJ,CAAQ;AAACoD,IAAAA,GAAG,EAAEF;AAAN,GAAR,CAA9B;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,EAAAA,MAAM,CAAChB,OAAP;AAAA,wEAAiB,iBAAeqB,KAAf,EAAsBC,GAAtB,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACZ,MAAUC,MAAV,GAAmB,CADP;AAAA;AAAA;AAAA;;AAAA,oBAEP,IAAIC,SAAJ,CAAc,uCAAd,CAFO;;AAAA;AAAA,oBAKZH,GAAG,KAAK,IALI;AAAA;AAAA;AAAA;;AAAA,oBAMP,IAAIvD,WAAJ,CACJ,0CADI,EAEJ,qBAFI,EAEmB;AAAC2D,gBAAAA,IAAI,EAAE;AAAP,eAFnB,CANO;;AAAA;AAAA,oBAYZL,KAAK,KAAK,IAZE;AAAA;AAAA;AAAA;;AAAA,+CAaN,IAbM;;AAAA;AAgBf;AACAE,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9BQ,gBAAAA,aAAa,EAAE,IAFe;AAG9BC,gBAAAA,iBAAiB,EAAE,IAHW;AAI9BC,gBAAAA,KAAK,EAAE,KAJuB;AAK9BC,gBAAAA,aAAa,EAAE,KALe;AAM9BC,gBAAAA,IAAI,EAAE,KANwB;AAO9BC,gBAAAA,MAAM,EAAE,IAAIpE,gBAAJ,CAAqB,KAArB,CAPsB;AAQ9BqE,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AARa,eAAV,CAAtB;;AAWA,kBAAGI,OAAO,CAACU,IAAX,EAAiB;AACf;AACA;AACAV,gBAAAA,OAAO,CAACS,aAAR,GAAwB,IAAxB;AACD;;AACD,kBAAG,CAACT,OAAO,CAACO,iBAAZ,EAA+B;AAC7B,uBAAOP,OAAO,CAACK,IAAf;AACD,eAnCc,CAqCf;;;AArCe,mBAuCZL,OAAO,CAACS,aAvCI;AAAA;AAAA;AAAA;;AAwCbK,cAAAA,QAAQ,GAAGhB,KAAX;AAxCa;AAAA;;AAAA;AAAA;AAAA,qBA0CIL,MAAM,CAAC5C,MAAP,CAAciD,KAAd,EAAqBE,OAArB,CA1CJ;;AAAA;AA0Cbc,cAAAA,QA1Ca;;AAAA;AAAA;AAAA,qBA8CSrB,MAAM,CAACsB,cAAP,CACtB7C,kBAAkB,CAAC8B,OAAD,CADI,EACOD,GADP,EACYC,OADZ,CA9CT;;AAAA;AA8CTgB,cAAAA,SA9CS;AAAA;AAAA,qBAkDOxC,QAAQ,CAAC;AAC7BwC,gBAAAA,SAAS,EAATA,SAD6B;AAE7BC,gBAAAA,OAAO,EAAEH,QAFoB;AAG7Bd,gBAAAA,OAAO,EAAPA,OAH6B;AAI7BkB,gBAAAA,aAAa,EAAElB,OAAO,CAACkB;AAJM,eAAD,CAlDf;;AAAA;AAkDXC,cAAAA,SAlDW;;AAyDf;AACA,kBAAGnB,OAAO,CAACM,aAAR,IAAyB,CAACN,OAAO,CAACQ,KAAlC,IAA2ChD,QAAQ,CAAC2D,SAAD,CAAtD,EAAmE;AACjE,oBAAGA,SAAS,CAAClB,MAAV,KAAqB,CAAxB,EAA2B;AACzB;AACAkB,kBAAAA,SAAS,GAAGA,SAAS,CAAC,CAAD,CAArB;AACD,iBAHD,MAGO,IAAGA,SAAS,CAAClB,MAAV,KAAqB,CAAxB,EAA2B;AAChC;AACAkB,kBAAAA,SAAS,GAAG,EAAZ;AACD;AACF,eARD,MAQO,IAAGnB,OAAO,CAACQ,KAAR,IAAiB9C,SAAS,CAACyD,SAAD,CAA7B,EAA0C;AAC/C;AACAA,gBAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;AACD,eArEc,CAuEf;;;AACA,kBAAGzD,SAAS,CAACqC,GAAD,CAAT,IAAkB,cAAcA,GAAnC,EAAwC;AACtCA,gBAAAA,GAAG,GAAGA,GAAG,CAAC,UAAD,CAAT;AACD,eA1Ec,CA4Ef;;;AACAA,cAAAA,GAAG,GAAG1D,IAAI,CAAC+E,KAAL,CAAWrB,GAAX,CAAN;;AACA,kBAAG,CAACvC,QAAQ,CAACuC,GAAD,CAAZ,EAAmB;AACjBA,gBAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD,eAhFc,CAiFf;;;AACMsB,cAAAA,GAlFS,GAkFHtB,GAlFG;AAmFfA,cAAAA,GAAG,GAAG,EAAN;;AACA,mBAAQuB,CAAR,GAAY,CAAZ,EAAeA,CAAC,GAAGD,GAAG,CAACpB,MAAvB,EAA+B,EAAEqB,CAAjC,EAAoC;AAClC,oBAAG,CAAC5D,SAAS,CAAC2D,GAAG,CAACC,CAAD,CAAJ,CAAV,IAAsBC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACC,CAAD,CAAf,EAAoBrB,MAApB,GAA6B,CAAtD,EAAyD;AACvDF,kBAAAA,GAAG,CAAC0B,IAAJ,CAASJ,GAAG,CAACC,CAAD,CAAZ;AACD;AACF,eAxFc,CA0Ff;;;AACMI,cAAAA,UA3FS,GA2FK3B,GAAG,CAACE,MAAJ,GAAa,CA3FlB;;AA4Ff,kBAAGF,GAAG,CAACE,MAAJ,KAAe,CAAlB,EAAqB;AACnBF,gBAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD,eA9Fc,CAgGf;;;AACA,kBAAGvC,QAAQ,CAAC2D,SAAD,CAAX,EAAwB;AACtB;AACMQ,gBAAAA,UAFgB,GAEHjD,WAAW,CAAC;AAC7BsC,kBAAAA,SAAS,EAATA,SAD6B;AAClBY,kBAAAA,GAAG,EAAE,QADa;AACHC,kBAAAA,UAAU,EAAE;AAACC,oBAAAA,KAAK,EAAE;AAAR;AADT,iBAAD,CAFR;AAKhBtB,gBAAAA,KALgB,GAKRW,SALQ;AAMtBA,gBAAAA,SAAS,GAAG,EAAZ;;AACA,oBAAGO,UAAH,EAAe;AACbP,kBAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBpB,GAAxB;AACD;;AACDoB,gBAAAA,SAAS,CAACQ,UAAD,CAAT,GAAwBnB,KAAxB;AACD,eAXD,MAWO,IAAG9C,SAAS,CAACyD,SAAD,CAAT,IAAwBO,UAA3B,EAAuC;AAC5C;AACMlB,gBAAAA,MAFsC,GAE9BW,SAF8B;AAG5CA,gBAAAA,SAAS,GAAG;AAAC,8BAAYpB;AAAb,iBAAZ;;AACA,qBAAUgC,GAAV,IAAiBvB,MAAjB,EAAwB;AACtBW,kBAAAA,SAAS,CAACY,GAAD,CAAT,GAAiBvB,MAAK,CAACuB,GAAD,CAAtB;AACD;AACF;;AAnHc,+CAqHRZ,SArHQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,EAAAA,MAAM,CAAC5C,MAAP;AAAA,yEAAgB,kBAAeiD,KAAf,EAAsBE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACX,OAAUC,MAAV,GAAmB,CADR;AAAA;AAAA;AAAA;;AAAA,oBAEN,IAAIC,SAAJ,CAAc,sCAAd,CAFM;;AAAA;AAKd;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BgC,gBAAAA,qBAAqB,EAAE,KADO;AAE9BpB,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAFa,eAAV,CAAtB;;AAKA,kBAAGI,OAAO,CAACiC,YAAR,KAAyB,KAA5B,EAAmC;AACjCjC,gBAAAA,OAAO,CAACiC,YAAR,GAAuBC,SAAvB;AACD,eAba,CAed;;;AACMC,cAAAA,SAhBQ,GAgBI,EAhBJ,EAkBd;;AACMC,cAAAA,iBAnBQ,GAmBY,EAnBZ,EAqBd;;AACA,kBAAG,mBAAmBpC,OAAtB,EAA+B;AACvBqC,gBAAAA,aADuB,GACPhG,IAAI,CAAC+E,KAAL,CAAWpB,OAAO,CAACqC,aAAnB,CADO;;AAE7B,oBAAG3E,SAAS,CAAC2E,aAAD,CAAT,IAA4B,cAAcA,aAA7C,EAA4D;AAC1DF,kBAAAA,SAAS,CAACE,aAAV,GAA0BA,aAA1B;AACD,iBAFD,MAEO;AACLF,kBAAAA,SAAS,CAACE,aAAV,GAA0B;AAAC,gCAAYA;AAAb,mBAA1B;AACD;;AACDD,gBAAAA,iBAAiB,CAACX,IAAlB,CAAuBU,SAAS,CAACE,aAAjC;AACD,eA9Ba,CAgCd;;;AAhCc,kBAkCVzE,SAAS,CAACkC,KAAD,CAlCC;AAAA;AAAA;AAAA;;AAmCZ;AACAqC,cAAAA,SAAS,CAACrC,KAAV,GAAkBzD,IAAI,CAAC+E,KAAL,CAAWtB,KAAX,CAAlB;AApCY;AAAA;;AAAA;AAAA;AAAA,qBAuCYL,MAAM,CAAC6C,GAAP,CAAWxC,KAAX,EAAkBE,OAAlB,CAvCZ;;AAAA;AAuCNuC,cAAAA,SAvCM;AAwCZC,cAAAA,WAAW,GAAGD,SAAS,CAACE,WAAxB;AACAN,cAAAA,SAAS,CAACrC,KAAV,GAAkByC,SAAS,CAACG,QAA5B;;AACA,kBAAGH,SAAS,CAACI,UAAb,EAAyB;AACvB;AACAR,gBAAAA,SAAS,CAACS,aAAV,GAA0B;AAAC,8BAAYL,SAAS,CAACI;AAAvB,iBAA1B;AACAP,gBAAAA,iBAAiB,CAACX,IAAlB,CAAuBU,SAAS,CAACS,aAAjC;AACD;;AA9CW;AAiDd;AACA,kBAAG,EAAE,UAAU5C,OAAZ,CAAH,EAAyB;AACvBA,gBAAAA,OAAO,CAACK,IAAR,GAAemC,WAAW,IAAI,EAA9B;AACD,eApDa,CAsDd;;;AACIxB,cAAAA,SAvDU,GAuDE9C,kBAAkB,CAAC8B,OAAD,CAvDpB;AAAA,2CAwDQoC,iBAxDR;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwDJS,cAAAA,QAxDI;AAAA;AAAA,qBAyDMzE,eAAe,CAAC;AAAC4C,gBAAAA,SAAS,EAATA,SAAD;AAAY6B,gBAAAA,QAAQ,EAARA,QAAZ;AAAsB7C,gBAAAA,OAAO,EAAPA;AAAtB,eAAD,CAzDrB;;AAAA;AAyDZgB,cAAAA,SAzDY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA6DOpE,OAAO,CAAC;AAC3BoE,gBAAAA,SAAS,EAATA,SAD2B;AAE3BC,gBAAAA,OAAO,EAAEkB,SAAS,CAACrC,KAFQ;AAG3BE,gBAAAA,OAAO,EAAPA,OAH2B;AAI3BiC,gBAAAA,YAAY,EAAEjC,OAAO,CAACiC;AAJK,eAAD,CA7Dd;;AAAA;AA6DVnB,cAAAA,QA7DU;;AAoEd;AACA,kBAAGpD,SAAS,CAACoD,QAAD,CAAT,IAAwB,YAAYA,QAApC,IACDS,MAAM,CAACC,IAAP,CAAYV,QAAZ,EAAsBb,MAAtB,KAAiC,CADnC,EACsC;AACpCa,gBAAAA,QAAQ,GAAGA,QAAQ,CAAC,QAAD,CAAnB;AACD,eAHD,MAGO,IAAGA,QAAQ,KAAK,IAAhB,EAAsB;AAC3BA,gBAAAA,QAAQ,GAAG,EAAX;AACD,eA1Ea,CA4Ed;;;AACA,kBAAG,CAACtD,QAAQ,CAACsD,QAAD,CAAZ,EAAwB;AACtBA,gBAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD;;AA/Ea,gDAiFPA,QAjFO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,EAAAA,MAAM,CAAC1C,OAAP;AAAA,yEAAiB,kBAAe+C,KAAf,EAAsBC,GAAtB,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACZ,OAAUC,MAAV,GAAmB,CADP;AAAA;AAAA;AAAA;;AAAA,gDAEN,IAAIC,SAAJ,CAAc,uCAAd,CAFM;;AAAA;AAKf,kBAAG,OAAOH,GAAP,KAAe,UAAlB,EAA8B;AAC5BA,gBAAAA,GAAG,GAAG,IAAN;AACD,eAFD,MAEO;AACLA,gBAAAA,GAAG,GAAGA,GAAG,IAAI,IAAb;AACD,eATc,CAWf;;;AACAC,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9Bc,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAFa,eAAV,CAAtB,CAZe,CAkBf;;AAlBe;AAAA,qBAmBQH,MAAM,CAAC5C,MAAP,CAAciD,KAAd,EAAqBE,OAArB,CAnBR;;AAAA;AAmBTc,cAAAA,QAnBS;AAqBf;AACMgC,cAAAA,SAtBS,GAsBGhG,QAAQ,CAACgE,QAAD,CAtBX;;AAAA,oBAwBZf,GAAG,KAAK,IAxBI;AAAA;AAAA;AAAA;;AAAA,gDA0BN+C,SA1BM;;AAAA;AA6Bf;AACA9C,cAAAA,OAAO,CAACQ,KAAR,GAAgB,IAAhB;AACAR,cAAAA,OAAO,CAACS,aAAR,GAAwB,IAAxB;AA/Be;AAAA,qBAgCShB,MAAM,CAAChB,OAAP,CAAeqE,SAAf,EAA0B/C,GAA1B,EAA+BC,OAA/B,CAhCT;;AAAA;AAgCTmB,cAAAA,SAhCS;AAAA,gDAkCRA,SAlCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,EAAAA,MAAM,CAACsD,KAAP;AAAA,yEAAe,kBAAejD,KAAf,EAAsBiD,KAAtB,EAA6B/C,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACV,OAAUC,MAAV,GAAmB,CADT;AAAA;AAAA;AAAA;;AAAA,oBAEL,IAAIC,SAAJ,CAAc,qCAAd,CAFK;;AAAA;AAKb;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9BkD,gBAAAA,KAAK,EAAE,OAFuB;AAG9BC,gBAAAA,QAAQ,EAAE,KAHoB;AAI9BC,gBAAAA,UAAU,EAAE,KAJkB;AAK9BC,gBAAAA,WAAW,EAAE,KALiB;AAM9BC,gBAAAA,aAAa,EAAE,EANe;AAO9BxC,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAPa,eAAV,CAAtB,CANa,CAiBb;;AAjBa,mBAkBVhC,SAAS,CAACmF,KAAD,CAlBC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAoBatD,MAAM,CAAC6C,GAAP,CAAWS,KAAX,EAAkB/C,OAAlB,CApBb;;AAAA;AAoBLuC,cAAAA,SApBK;AAqBXQ,cAAAA,KAAK,GAAGR,SAAS,CAACG,QAAlB;;AAEA,kBAAGH,SAAS,CAACI,UAAb,EAAyB;AACvB;AACI5C,gBAAAA,GAFmB,GAEbgD,KAAK,CAAC,UAAD,CAFQ;;AAGvB,oBAAG,CAAChD,GAAJ,EAAS;AACPA,kBAAAA,GAAG,GAAGwC,SAAS,CAACI,UAAhB;AACD,iBAFD,MAEO,IAAGnF,QAAQ,CAACuC,GAAD,CAAX,EAAkB;AACvBA,kBAAAA,GAAG,CAAC0B,IAAJ,CAASc,SAAS,CAACI,UAAnB;AACD,iBAFM,MAEA;AACL5C,kBAAAA,GAAG,GAAG,CAACA,GAAD,EAAMwC,SAAS,CAACI,UAAhB,CAAN;AACD;;AACDI,gBAAAA,KAAK,CAAC,UAAD,CAAL,GAAoBhD,GAApB;AACD;;AAlCU;AAqCPsD,cAAAA,YArCO,GAqCQN,KAAK,GAAGA,KAAK,CAAC,UAAD,CAAL,IAAqB,EAAxB,GAA6B,EArC1C,EAuCb;;AAvCa;AAAA,qBAwCWtD,MAAM,CAACsB,cAAP,CACtB7C,kBAAkB,CAAC8B,OAAD,CADI,EACOqD,YADP,EACqBrD,OADrB,CAxCX;;AAAA;AAwCPgB,cAAAA,SAxCO;;AA2Cb;AACA,kBAAG,CAAChB,OAAO,CAACsD,cAAR,CAAuB,WAAvB,CAAJ,EAAyC;AACvCtD,gBAAAA,OAAO,CAACuD,SAAR,GAAoBjF,eAAe,CAAC0C,SAAD,EAAY,GAAZ,CAAnC;AACD;;AACD,kBAAG,CAAChB,OAAO,CAACsD,cAAR,CAAuB,2BAAvB,CAAJ,EAAyD;AACvDtD,gBAAAA,OAAO,CAACwD,yBAAR,GAAoClF,eAAe,CAAC0C,SAAD,EAAY,GAAZ,CAAnD;AACD,eAjDY,CAmDb;;;AAnDa;AAAA,qBAoDUvB,MAAM,CAAC5C,MAAP,CAAciD,KAAd,EAAqBE,OAArB,CApDV;;AAAA;AAoDPc,cAAAA,QApDO;AAsDb;AACM2C,cAAAA,IAvDO,qBAuDIzD,OAvDJ;AAwDbyD,cAAAA,IAAI,CAACC,OAAL,GAAe,IAAf;AACAD,cAAAA,IAAI,CAACzB,qBAAL,GAA6B,IAA7B;AAzDa;AAAA,qBA0DevC,MAAM,CAAC5C,MAAP,CAAckG,KAAd,EAAqBU,IAArB,CA1Df;;AAAA;AA0DPE,cAAAA,aA1DO;AA4Db;AACA;AACMC,cAAAA,SA9DO,GA8DKrC,MAAM,CAACC,IAAP,CAAYuB,KAAZ,EACfc,GADe,CACX,UAAA9B,GAAG;AAAA,uBAAI/D,UAAU,CAACgD,SAAD,EAAYe,GAAZ,EAAiB;AAACD,kBAAAA,KAAK,EAAE;AAAR,iBAAjB,CAAd;AAAA,eADQ,CA9DL;AAgEb2B,cAAAA,IAAI,CAACK,MAAL,GAAc,CAACF,SAAS,CAACG,QAAV,CAAmB,QAAnB,CAAf;AACAN,cAAAA,IAAI,CAACO,IAAL,GAAY1F,eAAe,CAAC0C,SAAD,EAAY,GAAZ,CAA3B,CAjEa,CAmEb;;AACMiD,cAAAA,MApEO,GAoEE7G,qBAAqB,CAAC0D,QAAD,EAAW6C,aAAX,EAA0BF,IAA1B,CApEvB;AAsEbA,cAAAA,IAAI,CAACjD,KAAL,GAAa,CAACR,OAAO,CAACuD,SAAtB;AACAE,cAAAA,IAAI,CAAChD,aAAL,GAAqB,IAArB;AACAgD,cAAAA,IAAI,CAAC/C,IAAL,GAAY,EAAZ;AACA+C,cAAAA,IAAI,CAACS,OAAL,GAAe,IAAf;AAzEa;AAAA,qBA0ESzE,MAAM,CAAChB,OAAP,CAAewF,MAAf,EAAuBZ,YAAvB,EAAqCI,IAArC,CA1ET;;AAAA;AA0ETtC,cAAAA,SA1ES;AA4Eb;AACAsC,cAAAA,IAAI,CAAC/C,IAAL,GAAY,EAAZ;AACAS,cAAAA,SAAS,GAAG7D,YAAY,CAAC6D,SAAD,EAAYsC,IAAZ,CAAxB;AA9Ea,gDAgFNtC,SAhFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,EAAAA,MAAM,CAACiB,IAAP;AAAA,yEAAc,kBAAeZ,KAAf,EAAsBC,GAAtB,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ;AACA;AACM+C,cAAAA,KAHM,GAGE,EAHF;;AAIZ,kBAAGhD,GAAH,EAAQ;AACNgD,gBAAAA,KAAK,CAAC,UAAD,CAAL,GAAoBhD,GAApB;AACD;;AACDgD,cAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,OAAlB;AAPY,gDAQLtD,MAAM,CAACsD,KAAP,CAAajD,KAAb,EAAoBiD,KAApB,EAA2B/C,OAA3B,CARK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,MAAM,CAAC0E,SAAP,GAAmB1E,MAAM,CAACtD,QAAP;AAAA,yEAAkB,kBAAe2D,KAAf,EAAsBE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAChC,OAAUC,MAAV,GAAmB,CADa;AAAA;AAAA;AAAA;;AAAA,oBAE3B,IAAIC,SAAJ,CAAc,wCAAd,CAF2B;;AAAA;AAKnC;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9BsE,gBAAAA,SAAS,EAAE,WAFmB;AAG9B3D,gBAAAA,aAAa,EAAE,KAHe;AAI9BG,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAJa,eAAV,CAAtB;;AANmC,oBAahC,iBAAiBI,OAbe;AAAA;AAAA;AAAA;;AAAA,oBAc9BA,OAAO,CAACqE,WAAR,KAAwB,qBAAxB,IACDrE,OAAO,CAACqE,WAAR,KAAwB,oBAfO;AAAA;AAAA;AAAA;;AAAA,oBAgBzB,IAAI7H,WAAJ,CACJ,wCADI,EAEJ,sBAFI,CAhByB;;AAAA;AAoBjC;AACM8H,cAAAA,WArB2B,GAqBb5H,MAAM,CAAC6H,KAAP,CAAazE,KAAb,CArBa,EAuBjC;;AAvBiC,gDAwB1B3D,QAAQ,CAACA,QAAT,CAAkBmI,WAAlB,EAA+BtE,OAA/B,CAxB0B;;AAAA;AA2BnC;AACMyD,cAAAA,IA5B6B,qBA4BlBzD,OA5BkB;AA6BnC,qBAAOyD,IAAI,CAACe,MAAZ;AACAf,cAAAA,IAAI,CAACgB,qBAAL,GAA6B,KAA7B;AA9BmC;AAAA,qBA+BbhF,MAAM,CAACtC,KAAP,CAAa2C,KAAb,EAAoB2D,IAApB,CA/Ba;;AAAA;AA+B7BiB,cAAAA,OA/B6B;AAAA,gDAkC5BvI,QAAQ,CAACA,QAAT,CAAkBuI,OAAlB,EAA2B1E,OAA3B,CAlC4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,KAAnB;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,MAAM,CAACxC,OAAP;AAAA,yEAAiB,kBAAeyH,OAAf,EAAwB1E,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACZ,OAAUC,MAAV,GAAmB,CADP;AAAA;AAAA;AAAA;;AAAA,oBAEP,IAAIC,SAAJ,CAAc,gDAAd,CAFO;;AAAA;AAKf;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BwE,gBAAAA,MAAM,EAAE5G,SAAS,CAAC8G,OAAD,CAAT,GAAqB,qBAArB,GAA6CxC;AADvB,eAAV,CAAtB;AANe,yBAUElC,OAVF,EAURwE,MAVQ,YAURA,MAVQ;AAAA,0BAWGxE,OAXH,EAWV2E,SAXU,aAWVA,SAXU,EAaf;;AAbe,mBAcZH,MAdY;AAAA;AAAA;AAAA;;AAeb;AACAG,cAAAA,SAAS,GAAGA,SAAS,IAAIjF,WAAW,CAAC8E,MAAD,CAApC;;AAhBa,kBAiBTG,SAjBS;AAAA;AAAA;AAAA;;AAAA,oBAkBL,IAAInI,WAAJ,CACJ,uBADI,EAEJ,sBAFI,EAEoB;AAACgI,gBAAAA,MAAM,EAANA;AAAD,eAFpB,CAlBK;;AAAA;AAAA;AAAA;;AAAA;AAuBb;AACAG,cAAAA,SAAS,GAAG;AAAA,uBAAMD,OAAN;AAAA,eAAZ;;AAxBa;AAAA;AAAA,qBA4BaC,SAAS,CAACD,OAAD,CA5BtB;;AAAA;AA4BTE,cAAAA,aA5BS;AAAA,gDA6BR5H,QAAQ,CAAC4H,aAAD,EAAgB5E,OAAhB,CA7BA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,MAAM,CAACtC,KAAP;AAAA,yEAAe,kBAAe2C,KAAf,EAAsBE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACV,OAAUC,MAAV,GAAmB,CADT;AAAA;AAAA;AAAA;;AAAA,oBAEL,IAAIC,SAAJ,CAAc,8CAAd,CAFK;;AAAA;AAKb;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9BW,gBAAAA,aAAa,EAAE,KAFe;AAG9BG,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAHa,eAAV,CAAtB,CANa,CAab;;AAba,mBAeVI,OAAO,CAACS,aAfE;AAAA;AAAA;AAAA;;AAgBXK,cAAAA,QAAQ,GAAGhB,KAAX;AAhBW;AAAA;;AAAA;AAAA;AAAA,qBAmBML,MAAM,CAAC5C,MAAP,CAAciD,KAAd,EAAqBE,OAArB,CAnBN;;AAAA;AAmBXc,cAAAA,QAnBW;;AAAA;AAsBb;AACM4D,cAAAA,OAvBO,GAuBGxH,MAAM,CAAC4D,QAAD,EAAWd,OAAX,CAvBT;;AAAA,mBAwBVA,OAAO,CAACwE,MAxBE;AAAA;AAAA;AAAA;;AAAA,oBAyBRxE,OAAO,CAACwE,MAAR,KAAmB,qBAAnB,IACDxE,OAAO,CAACwE,MAAR,KAAmB,oBA1BV;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2BI9H,MAAM,CAACmI,SAAP,CAAiBH,OAAjB,CA3BJ;;AAAA;AAAA;;AAAA;AAAA,oBA6BL,IAAIlI,WAAJ,CACJ,wBADI,EAEJ,sBAFI,EAEoB;AAACgI,gBAAAA,MAAM,EAAExE,OAAO,CAACwE;AAAjB,eAFpB,CA7BK;;AAAA;AAAA,gDAkCNE,OAlCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjF,EAAAA,MAAM,CAACZ,aAAP;AAAA,yEAAuB,kBAAeiB,KAAf,EAAsBE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAClB,OAAUC,MAAV,GAAmB,CADD;AAAA;AAAA;AAAA;;AAAA,oBAEb,IAAIC,SAAJ,CAAc,+CAAd,CAFa;;AAAA;AAKrB;AACAF,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAEzC,SAAS,CAACkC,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,EADH;AAE9Bc,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAFa,eAAV,CAAtB,CANqB,CAYrB;;AAZqB;AAAA,qBAaEH,MAAM,CAAC5C,MAAP,CAAciD,KAAd,EAAqBE,OAArB,CAbF;;AAAA;AAafc,cAAAA,QAbe;AAAA,gDAedhC,oBAAoB,CAACgC,QAAD,EAAWd,OAAX,CAfN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,MAAM,CAACqF,KAAP;AAAA,0EAAe,mBAAeC,IAAf,EAAqBhF,GAArB,EAA0BC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACV,QAAUC,MAAV,GAAmB,CADT;AAAA;AAAA;AAAA;;AAAA,oBAEL,IAAIC,SAAJ,CAAc,qCAAd,CAFK;;AAAA;AAAA,kBAIT1C,QAAQ,CAACuH,IAAD,CAJC;AAAA;AAAA;AAAA;;AAAA,oBAKL,IAAI7E,SAAJ,CAAc,2CAAd,CALK;;AAAA;AAQb,kBAAG,OAAOH,GAAP,KAAe,UAAlB,EAA8B;AAC5BA,gBAAAA,GAAG,GAAG,IAAN;AACD,eAFD,MAEO;AACLA,gBAAAA,GAAG,GAAGA,GAAG,IAAI,IAAb;AACD,eAZY,CAcb;;;AACAC,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BY,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AADa,eAAV,CAAtB,CAfa,CAoBb;;AApBa;AAAA,qBAqBUoF,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAClB,GAAL,CAAS,UAAAqB,GAAG,EAAI;AACjD,oBAAMzB,IAAI,qBAAOzD,OAAP,CAAV;;AACA,uBAAOP,MAAM,CAAC5C,MAAP,CAAcqI,GAAd,EAAmBzB,IAAnB,CAAP;AACD,eAHkC,CAAZ,CArBV;;AAAA;AAqBP3C,cAAAA,QArBO;AA0BTqE,cAAAA,UA1BS,GA0BI,IA1BJ;;AA2Bb,kBAAG,gBAAgBnF,OAAnB,EAA4B;AAC1BmF,gBAAAA,UAAU,GAAGnF,OAAO,CAACmF,UAArB;AACD;;AAEKxE,cAAAA,MA/BO,GA+BEX,OAAO,CAACW,MAAR,IAAkB,IAAIpE,gBAAJ,CAAqB,KAArB,CA/BpB;AAgCP6I,cAAAA,MAhCO,GAgCE;AAAC,4BAAY;AAAb,eAhCF;AAkCL9D,cAAAA,CAlCK,GAkCD,CAlCC;;AAAA;AAAA,oBAkCEA,CAAC,GAAGR,QAAQ,CAACb,MAlCf;AAAA;AAAA;AAAA;;AAmCX;AACMiF,cAAAA,GApCK,GAoCC7I,IAAI,CAACgJ,iBAAL,CAAuBvE,QAAQ,CAACQ,CAAD,CAA/B,EAAoC;AAC9CX,gBAAAA,MAAM,EAAE,IAAIpE,gBAAJ,CAAqB,QAAQ+E,CAAR,GAAY,GAAjC;AADsC,eAApC,CApCD,EAwCX;AACA;;AACMgE,cAAAA,OA1CK,GA0CMH,UAAU,IAAI7D,CAAC,KAAK,CAArB,GAA0B8D,MAA1B,GAAmC;AAAC,4BAAY;AAAb,eA1CxC;;AA2CXxG,cAAAA,cAAc,CAACsG,GAAD,EAAMI,OAAN,EAAe,UAAf,EAA2B3E,MAA3B,CAAd;;AA3CW,oBA6CR2E,OAAO,KAAKF,MA7CJ;AAAA;AAAA;AAAA;;AAAA,uDA+CcE,OA/Cd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+CCC,cAAAA,SA/CD;AAgDDC,cAAAA,QAhDC,GAgDUF,OAAO,CAACC,SAAD,CAhDjB;;AAAA,kBAiDFA,SAAS,IAAIH,MAjDX;AAAA;AAAA;AAAA;;AAkDLA,cAAAA,MAAM,CAACG,SAAD,CAAN,GAAoBC,QAApB;AAlDK;;AAAA;AAqDDC,cAAAA,OArDC,GAqDSL,MAAM,CAACG,SAAD,CArDf;;AAsDP,mBAAUxD,GAAV,IAAiByD,QAAjB,EAA2B;AACzB,oBAAG,EAAEzD,GAAG,IAAI0D,OAAT,CAAH,EAAsB;AACpBA,kBAAAA,OAAO,CAAC1D,GAAD,CAAP,GAAeyD,QAAQ,CAACzD,GAAD,CAAvB;AACD;AACF;;AA1DM;AAAA;;AAAA;AAkCuB,gBAAET,CAlCzB;AAAA;AAAA;;AAAA;AA+Db;AACMoE,cAAAA,YAhEO,GAgEQ1G,cAAc,CAACoG,MAAD,CAhEtB,EAkEb;;AACMtC,cAAAA,SAnEO,GAmEK,EAnEL;AAoEPtB,cAAAA,IApEO,GAoEAD,MAAM,CAACC,IAAP,CAAYkE,YAAZ,EAA0BC,IAA1B,EApEA;;AAqEb,mBAAQC,EAAR,GAAa,CAAb,EAAgBA,EAAE,GAAGpE,IAAI,CAACvB,MAA1B,EAAkC,EAAE2F,EAApC,EAAwC;AAChCxG,gBAAAA,IADgC,GACzBsG,YAAY,CAAClE,IAAI,CAACoE,EAAD,CAAL,CADa,EAEtC;;AACA,oBAAG,CAAC9H,mBAAmB,CAACsB,IAAD,CAAvB,EAA+B;AAC7B0D,kBAAAA,SAAS,CAACrB,IAAV,CAAerC,IAAf;AACD;AACF;;AA3EY,oBA6EVW,GAAG,KAAK,IA7EE;AAAA;AAAA;AAAA;;AAAA,iDA8EJ+C,SA9EI;;AAAA;AAiFb;AACA9C,cAAAA,OAAO,CAACQ,KAAR,GAAgB,IAAhB;AACAR,cAAAA,OAAO,CAACS,aAAR,GAAwB,IAAxB;AAnFa;AAAA,qBAoFWhB,MAAM,CAAChB,OAAP,CAAeqE,SAAf,EAA0B/C,GAA1B,EAA+BC,OAA/B,CApFX;;AAAA;AAoFPmB,cAAAA,SApFO;AAAA,iDAsFNA,SAtFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,EAAAA,MAAM,CAACsE,cAAP,CAAsBpG,MAAtB,EAA8B,gBAA9B,EAAgD;AAC9C6C,IAAAA,GAAG,EAAE;AAAA,aAAM7C,MAAM,CAACqG,eAAb;AAAA,KADyC;AAE9CC,IAAAA,GAAG,EAAE,aAAAC,CAAC;AAAA,aAAIvG,MAAM,CAACqG,eAAP,GAAyBE,CAA7B;AAAA;AAFwC,GAAhD,EAnvBiC,CAuvBjC;;AACAvG,EAAAA,MAAM,CAACwG,cAAP;AAAA,0EAAwB,mBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oBAChB,IAAI1J,WAAJ,CACJ,6DACA,gCAFI,EAE8B,0BAF9B,EAGJ;AAAC2D,gBAAAA,IAAI,EAAE,yBAAP;AAAkC+F,gBAAAA,GAAG,EAAHA;AAAlC,eAHI,CADgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzG,EAAAA,MAAM,CAAC6C,GAAP;AAAA,0EAAa,mBAAe4D,GAAf,EAAoBlG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX,kBAAG,OAAOA,OAAO,CAACiG,cAAf,KAAkC,UAArC,EAAiD;AAC/CE,gBAAAA,IAAI,GAAGnG,OAAO,CAACiG,cAAf;AACD,eAFD,MAEO;AACLE,gBAAAA,IAAI,GAAG1G,MAAM,CAACwG,cAAd;AACD;;AANU;AAAA,qBAQaE,IAAI,CAACD,GAAD,CARjB;;AAAA;AAQL3D,cAAAA,SARK;AAAA;;AAAA,kBAWLA,SAAS,CAACG,QAXL;AAAA;AAAA;AAAA;;AAAA,oBAYD,IAAIlG,WAAJ,CACJ,4CADI,EAEJ,2BAFI,CAZC;;AAAA;AAgBT,kBAAGoB,SAAS,CAAC2E,SAAS,CAACG,QAAX,CAAZ,EAAkC;AAChCH,gBAAAA,SAAS,CAACG,QAAV,GAAqB0D,IAAI,CAAC7B,KAAL,CAAWhC,SAAS,CAACG,QAArB,CAArB;AACD;;AAlBQ;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAoBH,IAAIlG,WAAJ,CACJ,qDADI,EAEJ,0BAFI,EAEwB;AAC1B2D,gBAAAA,IAAI,EAAE,yBADoB;AAE1BkG,gBAAAA,KAAK,eAFqB;AAG1B9D,gBAAAA,SAAS,EAATA;AAH0B,eAFxB,CApBG;;AAAA;AAAA,iDA6BJA,SA7BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9C,EAAAA,MAAM,CAACsB,cAAP;AAAA,0EAAwB,mBACtBC,SADsB,EACX6B,QADW,EACD7C,OADC;AAAA;AAAA;AAAA;AAAA;AAEtB;AACAA,cAAAA,OAAO,GAAGI,YAAY,CAACJ,OAAD,EAAU;AAC9BK,gBAAAA,IAAI,EAAE,EADwB;AAE9BO,gBAAAA,eAAe,EAAE,IAAItE,eAAJ,CACf;AAACuE,kBAAAA,WAAW,EAAEjB;AAAd,iBADe;AAFa,eAAV,CAAtB,CAHsB,CAStB;;AATsB,oBAUnBiD,QAAQ,KAAK,IAVM;AAAA;AAAA;AAAA;;AAAA,iDAWb3E,kBAAkB,CAAC8B,OAAD,CAXL;;AAAA;AActB;AACA6C,cAAAA,QAAQ,GAAGxG,IAAI,CAAC+E,KAAL,CAAWyB,QAAX,CAAX;;AACA,kBAAG,EAAEnF,SAAS,CAACmF,QAAD,CAAT,IAAuB,cAAcA,QAAvC,CAAH,EAAqD;AACnDA,gBAAAA,QAAQ,GAAG;AAAC,8BAAYA;AAAb,iBAAX;AACD;;AAlBqB,iDAoBfzE,eAAe,CAAC;AAAC4C,gBAAAA,SAAS,EAATA,SAAD;AAAY6B,gBAAAA,QAAQ,EAARA,QAAZ;AAAsB7C,gBAAAA,OAAO,EAAPA;AAAtB,eAAD,CApBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA,MArzBiC,CA40BjC;;;AACAP,EAAAA,MAAM,CAAC6G,eAAP,GAAyBlK,OAAO,CAAC,WAAD,CAAP,CAAqBkK,eAA9C;AAEA;AACA;AACA;;AACA7G,EAAAA,MAAM,CAAC8G,eAAP,GAAyB,EAAzB;AACA9G,EAAAA,MAAM,CAAC8G,eAAP,CAAuBnH,IAAvB,GAA8BhD,OAAO,CAAC,wBAAD,CAArC;AACAqD,EAAAA,MAAM,CAAC8G,eAAP,CAAuBC,GAAvB,GAA6BpK,OAAO,CAAC,uBAAD,CAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAqD,EAAAA,MAAM,CAACgH,iBAAP,GAA2B,UAASC,IAAT,EAAe;AACxC,QAAG,EAAEA,IAAI,IAAIjH,MAAM,CAAC8G,eAAjB,CAAH,EAAsC;AACpC,YAAM,IAAI/J,WAAJ,CACJ,oCAAoCkK,IAApC,GAA2C,GADvC,EAEJ,8BAFI,EAGJ;AAACA,QAAAA,IAAI,EAAJA;AAAD,OAHI,CAAN;AAID,KANuC,CAQxC;;;AACAjH,IAAAA,MAAM,CAACwG,cAAP,GAAwBxG,MAAM,CAAC8G,eAAP,CAAuBG,IAAvB,EAA6BC,KAA7B,CACtBlH,MADsB,EACdmH,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CADc,CAAxB;AAED,GAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvH,EAAAA,MAAM,CAACwH,iBAAP,GAA2B,UAASC,WAAT,EAAsBC,MAAtB,EAA8B;AACvDzH,IAAAA,WAAW,CAACwH,WAAD,CAAX,GAA2BC,MAA3B;AACD,GAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA1H,EAAAA,MAAM,CAAC2H,mBAAP,GAA6B,UAASF,WAAT,EAAsB;AACjD,WAAOxH,WAAW,CAACwH,WAAD,CAAlB;AACD,GAFD,CA73BiC,CAi4BjC;;;AACAzH,EAAAA,MAAM,CAACwH,iBAAP,CAAyB,qBAAzB,EAAgDvK,MAAM,CAAC6H,KAAvD;AACA9E,EAAAA,MAAM,CAACwH,iBAAP,CAAyB,oBAAzB,EAA+CvK,MAAM,CAAC6H,KAAtD,EAn4BiC,CAq4BjC;;AACA9E,EAAAA,MAAM,CAACwH,iBAAP,CAAyB,UAAzB,EAAqCtK,IAAI,CAAC4H,KAA1C;AAEA;;AACA9E,EAAAA,MAAM,CAACyG,GAAP,GAAa9J,OAAO,CAAC,OAAD,CAApB;AAEA;;AACAqD,EAAAA,MAAM,CAACpD,IAAP,GAAcA,IAAd,CA54BiC,CA64BjC;;AACAkF,EAAAA,MAAM,CAAC8F,MAAP,CAAc5H,MAAd,EAAsBpD,IAAtB,EA94BiC,CAg5BjC;;AACAoD,EAAAA,MAAM,CAAC6H,QAAP,GAAkB7H,MAAlB,CAj5BiC,CAm5BjC;;AACAA,EAAAA,MAAM,CAAC8H,YAAP,GAAsBnL,OAAO,CAAC,gBAAD,CAA7B;AAEA;;AACAqD,EAAAA,MAAM,CAAC+H,eAAP,GAAyBpL,OAAO,CAAC,mBAAD,CAAP,CAA6BqD,MAA7B,CAAzB,CAv5BiC,CAy5BjC;;AACA,MAAGJ,QAAQ,IAAI,OAAOoI,MAAM,CAACD,eAAd,KAAkC,WAAjD,EAA8D;AAC5DjG,IAAAA,MAAM,CAACsE,cAAP,CAAsB4B,MAAtB,EAA8B,iBAA9B,EAAiD;AAC/CC,MAAAA,QAAQ,EAAE,IADqC;AAE/CC,MAAAA,UAAU,EAAE,KAFmC;AAG/CC,MAAAA,YAAY,EAAE,IAHiC;AAI/CC,MAAAA,KAAK,EAAEpI,MAAM,CAAC+H;AAJiC,KAAjD;AAMD,GAj6BgC,CAm6BjC;;;AACA,MAAGtI,OAAH,EAAY;AACV;AACAO,IAAAA,MAAM,CAACgH,iBAAP,CAAyB,MAAzB;AACD,GAHD,MAGO,IAAG,OAAOqB,cAAP,KAA0B,WAA7B,EAA0C;AAC/C;AACArI,IAAAA,MAAM,CAACgH,iBAAP,CAAyB,KAAzB;AACD;;AAED,WAASrG,YAAT,CAAsBJ,OAAtB,UAGG;AAAA,uCAFDiG,cAEC;AAAA,QAFDA,cAEC,sCAFgBxG,MAAM,CAACwG,cAEvB;AAAA,QADE8B,QACF;;AACD,WAAOxG,MAAM,CAAC8F,MAAP,CAAc,EAAd,EAAkB;AAACpB,MAAAA,cAAc,EAAdA;AAAD,KAAlB,EAAoC8B,QAApC,EAA8C/H,OAA9C,CAAP;AACD,GAj7BgC,CAm7BjC;;;AACA,SAAOP,MAAP;AACC,CAr7BD,C,CAu7BA;AAEA;;;AACA,IAAMuI,OAAO,GAAG,SAAVA,OAAU,GAAW;AACzB,SAAOxI,OAAO,CAAC,YAAW;AACxB,WAAOwI,OAAO,EAAd;AACD,GAFa,CAAd;AAGD,CAJD,C,CAMA;;;AACAxI,OAAO,CAACwI,OAAD,CAAP,C,CACA;;AACAC,MAAM,CAACC,OAAP,GAAiBF,OAAjB","sourcesContent":["/**\n * A JavaScript implementation of the JSON-LD API.\n *\n * @author Dave Longley\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2011-2019 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nconst canonize = require('rdf-canonize');\nconst util = require('./util');\nconst ContextResolver = require('./ContextResolver');\nconst IdentifierIssuer = util.IdentifierIssuer;\nconst JsonLdError = require('./JsonLdError');\nconst LRU = require('lru-cache');\nconst NQuads = require('./NQuads');\nconst Rdfa = require('./Rdfa');\n\nconst {expand: _expand} = require('./expand');\nconst {flatten: _flatten} = require('./flatten');\nconst {fromRDF: _fromRDF} = require('./fromRdf');\nconst {toRDF: _toRDF} = require('./toRdf');\n\nconst {\n  frameMergedOrDefault: _frameMergedOrDefault,\n  cleanupNull: _cleanupNull\n} = require('./frame');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString\n} = require('./types');\n\nconst {\n  isSubjectReference: _isSubjectReference,\n} = require('./graphTypes');\n\nconst {\n  expandIri: _expandIri,\n  getInitialContext: _getInitialContext,\n  process: _processContext,\n  processingMode: _processingMode\n} = require('./context');\n\nconst {\n  compact: _compact,\n  compactIri: _compactIri\n} = require('./compact');\n\nconst {\n  createNodeMap: _createNodeMap,\n  createMergedNodeMap: _createMergedNodeMap,\n  mergeNodeMaps: _mergeNodeMaps\n} = require('./nodeMap');\n\n// determine if in-browser or using Node.js\nconst _nodejs = (\n  typeof process !== 'undefined' && process.versions && process.versions.node);\nconst _browser = !_nodejs &&\n  (typeof window !== 'undefined' || typeof self !== 'undefined');\n\n/* eslint-disable indent */\n// attaches jsonld API to the given object\nconst wrapper = function(jsonld) {\n\n/** Registered RDF dataset parsers hashed by content-type. */\nconst _rdfParsers = {};\n\n// resolved context cache\n// TODO: consider basing max on context size rather than number\nconst RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;\nconst _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});\n\n/* Core API */\n\n/**\n * Performs JSON-LD compaction.\n *\n * @param input the JSON-LD input to compact.\n * @param ctx the context to compact with.\n * @param [options] options to use:\n *          [base] the base IRI to use.\n *          [compactArrays] true to compact arrays to single values when\n *            appropriate, false not to (default: true).\n *          [compactToRelative] true to compact IRIs to be relative to document\n *            base, false to keep absolute (default: true)\n *          [graph] true to always output a top-level graph (default: false).\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [framing] true if compaction is occuring during a framing operation.\n *          [compactionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the compacted output.\n */\njsonld.compact = async function(input, ctx, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not compact, too few arguments.');\n  }\n\n  if(ctx === null) {\n    throw new JsonLdError(\n      'The compaction context must not be null.',\n      'jsonld.CompactError', {code: 'invalid local context'});\n  }\n\n  // nothing to compact\n  if(input === null) {\n    return null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    compactArrays: true,\n    compactToRelative: true,\n    graph: false,\n    skipExpansion: false,\n    link: false,\n    issuer: new IdentifierIssuer('_:b'),\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if(options.link) {\n    // force skip expansion when linking, \"link\" is not part of the public\n    // API, it should only be called from framing\n    options.skipExpansion = true;\n  }\n  if(!options.compactToRelative) {\n    delete options.base;\n  }\n\n  // expand input\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), ctx, options);\n\n  // do compaction\n  let compacted = await _compact({\n    activeCtx,\n    element: expanded,\n    options,\n    compactionMap: options.compactionMap\n  });\n\n  // perform clean up\n  if(options.compactArrays && !options.graph && _isArray(compacted)) {\n    if(compacted.length === 1) {\n      // simplify to a single item\n      compacted = compacted[0];\n    } else if(compacted.length === 0) {\n      // simplify to an empty object\n      compacted = {};\n    }\n  } else if(options.graph && _isObject(compacted)) {\n    // always use array if graph option is on\n    compacted = [compacted];\n  }\n\n  // follow @context key\n  if(_isObject(ctx) && '@context' in ctx) {\n    ctx = ctx['@context'];\n  }\n\n  // build output context\n  ctx = util.clone(ctx);\n  if(!_isArray(ctx)) {\n    ctx = [ctx];\n  }\n  // remove empty contexts\n  const tmp = ctx;\n  ctx = [];\n  for(let i = 0; i < tmp.length; ++i) {\n    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {\n      ctx.push(tmp[i]);\n    }\n  }\n\n  // remove array if only one context\n  const hasContext = (ctx.length > 0);\n  if(ctx.length === 1) {\n    ctx = ctx[0];\n  }\n\n  // add context and/or @graph\n  if(_isArray(compacted)) {\n    // use '@graph' keyword\n    const graphAlias = _compactIri({\n      activeCtx, iri: '@graph', relativeTo: {vocab: true}\n    });\n    const graph = compacted;\n    compacted = {};\n    if(hasContext) {\n      compacted['@context'] = ctx;\n    }\n    compacted[graphAlias] = graph;\n  } else if(_isObject(compacted) && hasContext) {\n    // reorder keys so @context is first\n    const graph = compacted;\n    compacted = {'@context': ctx};\n    for(const key in graph) {\n      compacted[key] = graph[key];\n    }\n  }\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD expansion.\n *\n * @param input the JSON-LD input to expand.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [keepFreeFloatingNodes] true to keep free-floating nodes,\n *            false not to, defaults to false.\n *          [documentLoader(url, options)] the document loader.\n *          [expansionMap(info)] a function that can be used to custom map\n *            unmappable values (or to throw an error when they are detected);\n *            if this function returns `undefined` then the default behavior\n *            will be used.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the expanded output.\n */\njsonld.expand = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not expand, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    keepFreeFloatingNodes: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if(options.expansionMap === false) {\n    options.expansionMap = undefined;\n  }\n\n  // build set of objects that may have @contexts to resolve\n  const toResolve = {};\n\n  // build set of contexts to process prior to expansion\n  const contextsToProcess = [];\n\n  // if an `expandContext` has been given ensure it gets resolved\n  if('expandContext' in options) {\n    const expandContext = util.clone(options.expandContext);\n    if(_isObject(expandContext) && '@context' in expandContext) {\n      toResolve.expandContext = expandContext;\n    } else {\n      toResolve.expandContext = {'@context': expandContext};\n    }\n    contextsToProcess.push(toResolve.expandContext);\n  }\n\n  // if input is a string, attempt to dereference remote document\n  let defaultBase;\n  if(!_isString(input)) {\n    // input is not a URL, do not need to retrieve it first\n    toResolve.input = util.clone(input);\n  } else {\n    // load remote doc\n    const remoteDoc = await jsonld.get(input, options);\n    defaultBase = remoteDoc.documentUrl;\n    toResolve.input = remoteDoc.document;\n    if(remoteDoc.contextUrl) {\n      // context included in HTTP link header and must be resolved\n      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};\n      contextsToProcess.push(toResolve.remoteContext);\n    }\n  }\n\n  // set default base\n  if(!('base' in options)) {\n    options.base = defaultBase || '';\n  }\n\n  // process any additional contexts\n  let activeCtx = _getInitialContext(options);\n  for(const localCtx of contextsToProcess) {\n    activeCtx = await _processContext({activeCtx, localCtx, options});\n  }\n\n  // expand resolved input\n  let expanded = await _expand({\n    activeCtx,\n    element: toResolve.input,\n    options,\n    expansionMap: options.expansionMap\n  });\n\n  // optimize away @graph with no other properties\n  if(_isObject(expanded) && ('@graph' in expanded) &&\n    Object.keys(expanded).length === 1) {\n    expanded = expanded['@graph'];\n  } else if(expanded === null) {\n    expanded = [];\n  }\n\n  // normalize to an array\n  if(!_isArray(expanded)) {\n    expanded = [expanded];\n  }\n\n  return expanded;\n};\n\n/**\n * Performs JSON-LD flattening.\n *\n * @param input the JSON-LD to flatten.\n * @param ctx the context to use to compact the flattened output, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the flattened output.\n */\njsonld.flatten = async function(input, ctx, options) {\n  if(arguments.length < 1) {\n    return new TypeError('Could not flatten, too few arguments.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // do flattening\n  const flattened = _flatten(expanded);\n\n  if(ctx === null) {\n    // no compaction required\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * Performs JSON-LD framing.\n *\n * @param input the JSON-LD input to frame.\n * @param frame the JSON-LD frame to use.\n * @param [options] the framing options.\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [embed] default @embed flag: '@last', '@always', '@never', '@link'\n *            (default: '@last').\n *          [explicit] default @explicit flag (default: false).\n *          [requireAll] default @requireAll flag (default: true).\n *          [omitDefault] default @omitDefault flag (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the framed output.\n */\njsonld.frame = async function(input, frame, options) {\n  if(arguments.length < 2) {\n    throw new TypeError('Could not frame, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    embed: '@once',\n    explicit: false,\n    requireAll: false,\n    omitDefault: false,\n    bnodesToClear: [],\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // if frame is a string, attempt to dereference remote document\n  if(_isString(frame)) {\n    // load remote doc\n    const remoteDoc = await jsonld.get(frame, options);\n    frame = remoteDoc.document;\n\n    if(remoteDoc.contextUrl) {\n      // inject link header @context into frame\n      let ctx = frame['@context'];\n      if(!ctx) {\n        ctx = remoteDoc.contextUrl;\n      } else if(_isArray(ctx)) {\n        ctx.push(remoteDoc.contextUrl);\n      } else {\n        ctx = [ctx, remoteDoc.contextUrl];\n      }\n      frame['@context'] = ctx;\n    }\n  }\n\n  const frameContext = frame ? frame['@context'] || {} : {};\n\n  // process context\n  const activeCtx = await jsonld.processContext(\n    _getInitialContext(options), frameContext, options);\n\n  // mode specific defaults\n  if(!options.hasOwnProperty('omitGraph')) {\n    options.omitGraph = _processingMode(activeCtx, 1.1);\n  }\n  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {\n    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);\n  }\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  // expand frame\n  const opts = {...options};\n  opts.isFrame = true;\n  opts.keepFreeFloatingNodes = true;\n  const expandedFrame = await jsonld.expand(frame, opts);\n\n  // if the unexpanded frame includes a key expanding to @graph, frame the\n  // default graph, otherwise, the merged graph\n  const frameKeys = Object.keys(frame)\n    .map(key => _expandIri(activeCtx, key, {vocab: true}));\n  opts.merged = !frameKeys.includes('@graph');\n  opts.is11 = _processingMode(activeCtx, 1.1);\n\n  // do framing\n  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);\n\n  opts.graph = !options.omitGraph;\n  opts.skipExpansion = true;\n  opts.link = {};\n  opts.framing = true;\n  let compacted = await jsonld.compact(framed, frameContext, opts);\n\n  // replace @null with null, compacting arrays\n  opts.link = {};\n  compacted = _cleanupNull(compacted, opts);\n\n  return compacted;\n};\n\n/**\n * **Experimental**\n *\n * Links a JSON-LD document's nodes in memory.\n *\n * @param input the JSON-LD document to link.\n * @param [ctx] the JSON-LD context to apply.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the linked output.\n */\njsonld.link = async function(input, ctx, options) {\n  // API matches running frame with a wildcard frame and embed: '@link'\n  // get arguments\n  const frame = {};\n  if(ctx) {\n    frame['@context'] = ctx;\n  }\n  frame['@embed'] = '@link';\n  return jsonld.frame(input, frame, options);\n};\n\n/**\n * Performs RDF dataset normalization on the given input. The input is JSON-LD\n * unless the 'inputFormat' option is used. The output is an RDF dataset\n * unless the 'format' option is used.\n *\n * @param input the input to normalize as JSON-LD or as a format specified by\n *          the 'inputFormat' option.\n * @param [options] the options to use:\n *          [algorithm] the normalization algorithm to use, `URDNA2015` or\n *            `URGNA2012` (default: `URDNA2015`).\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [inputFormat] the format if input is not JSON-LD:\n *            'application/n-quads' for N-Quads.\n *          [format] the format if output is a string:\n *            'application/n-quads' for N-Quads.\n *          [documentLoader(url, options)] the document loader.\n *          [useNative] true to use a native canonize algorithm\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the normalized output.\n */\njsonld.normalize = jsonld.canonize = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not canonize, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    algorithm: 'URDNA2015',\n    skipExpansion: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n  if('inputFormat' in options) {\n    if(options.inputFormat !== 'application/n-quads' &&\n      options.inputFormat !== 'application/nquads') {\n      throw new JsonLdError(\n        'Unknown canonicalization input format.',\n        'jsonld.CanonizeError');\n    }\n    // TODO: `await` for async parsers\n    const parsedInput = NQuads.parse(input);\n\n    // do canonicalization\n    return canonize.canonize(parsedInput, options);\n  }\n\n  // convert to RDF dataset then do normalization\n  const opts = {...options};\n  delete opts.format;\n  opts.produceGeneralizedRdf = false;\n  const dataset = await jsonld.toRDF(input, opts);\n\n  // do canonicalization\n  return canonize.canonize(dataset, options);\n};\n\n/**\n * Converts an RDF dataset to JSON-LD.\n *\n * @param dataset a serialized string of RDF in a format specified by the\n *          format option or an RDF dataset to convert.\n * @param [options] the options to use:\n *          [format] the format if dataset param must first be parsed:\n *            'application/n-quads' for N-Quads (default).\n *          [rdfParser] a custom RDF-parser to use to parse the dataset.\n *          [useRdfType] true to use rdf:type, false to use @type\n *            (default: false).\n *          [useNativeTypes] true to convert XSD types into native types\n *            (boolean, integer, double), false not to (default: false).\n *\n * @return a Promise that resolves to the JSON-LD document.\n */\njsonld.fromRDF = async function(dataset, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert from RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    format: _isString(dataset) ? 'application/n-quads' : undefined\n  });\n\n  const {format} = options;\n  let {rdfParser} = options;\n\n  // handle special format\n  if(format) {\n    // check supported formats\n    rdfParser = rdfParser || _rdfParsers[format];\n    if(!rdfParser) {\n      throw new JsonLdError(\n        'Unknown input format.',\n        'jsonld.UnknownFormat', {format});\n    }\n  } else {\n    // no-op parser, assume dataset already parsed\n    rdfParser = () => dataset;\n  }\n\n  // rdfParser must be synchronous or return a promise, no callback support\n  const parsedDataset = await rdfParser(dataset);\n  return _fromRDF(parsedDataset, options);\n};\n\n/**\n * Outputs the RDF dataset found in the given JSON-LD object.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [skipExpansion] true to assume the input is expanded and skip\n *            expansion, false not to, defaults to false.\n *          [format] the format to use to output a string:\n *            'application/n-quads' for N-Quads.\n *          [produceGeneralizedRdf] true to output generalized RDF, false\n *            to produce only standard RDF (default: false).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the RDF dataset.\n */\njsonld.toRDF = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not convert to RDF, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    skipExpansion: false,\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // TODO: support toRDF custom map?\n  let expanded;\n  if(options.skipExpansion) {\n    expanded = input;\n  } else {\n    // expand input\n    expanded = await jsonld.expand(input, options);\n  }\n\n  // output RDF dataset\n  const dataset = _toRDF(expanded, options);\n  if(options.format) {\n    if(options.format === 'application/n-quads' ||\n      options.format === 'application/nquads') {\n      return await NQuads.serialize(dataset);\n    }\n    throw new JsonLdError(\n      'Unknown output format.',\n      'jsonld.UnknownFormat', {format: options.format});\n  }\n\n  return dataset;\n};\n\n/**\n * **Experimental**\n *\n * Recursively flattens the nodes in the given JSON-LD input into a merged\n * map of node ID => node. All graphs will be merged into the default graph.\n *\n * @param input the JSON-LD input.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged node map.\n */\njsonld.createNodeMap = async function(input, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not create node map, too few arguments.');\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    base: _isString(input) ? input : '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand input\n  const expanded = await jsonld.expand(input, options);\n\n  return _createMergedNodeMap(expanded, options);\n};\n\n/**\n * **Experimental**\n *\n * Merges two or more JSON-LD documents into a single flattened document.\n *\n * @param docs the JSON-LD documents to merge together.\n * @param ctx the context to use to compact the merged result, or null.\n * @param [options] the options to use:\n *          [base] the base IRI to use.\n *          [expandContext] a context to expand with.\n *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.\n *          [mergeNodes] true to merge properties for nodes with the same ID,\n *            false to ignore new properties for nodes with the same ID once\n *            the ID has been defined; note that this may not prevent merging\n *            new properties where a node is in the `object` position\n *            (default: true).\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the merged output.\n */\njsonld.merge = async function(docs, ctx, options) {\n  if(arguments.length < 1) {\n    throw new TypeError('Could not merge, too few arguments.');\n  }\n  if(!_isArray(docs)) {\n    throw new TypeError('Could not merge, \"docs\" must be an array.');\n  }\n\n  if(typeof ctx === 'function') {\n    ctx = null;\n  } else {\n    ctx = ctx || null;\n  }\n\n  // set default options\n  options = _setDefaults(options, {\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // expand all documents\n  const expanded = await Promise.all(docs.map(doc => {\n    const opts = {...options};\n    return jsonld.expand(doc, opts);\n  }));\n\n  let mergeNodes = true;\n  if('mergeNodes' in options) {\n    mergeNodes = options.mergeNodes;\n  }\n\n  const issuer = options.issuer || new IdentifierIssuer('_:b');\n  const graphs = {'@default': {}};\n\n  for(let i = 0; i < expanded.length; ++i) {\n    // uniquely relabel blank nodes\n    const doc = util.relabelBlankNodes(expanded[i], {\n      issuer: new IdentifierIssuer('_:b' + i + '-')\n    });\n\n    // add nodes to the shared node map graphs if merging nodes, to a\n    // separate graph set if not\n    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};\n    _createNodeMap(doc, _graphs, '@default', issuer);\n\n    if(_graphs !== graphs) {\n      // merge document graphs but don't merge existing nodes\n      for(const graphName in _graphs) {\n        const _nodeMap = _graphs[graphName];\n        if(!(graphName in graphs)) {\n          graphs[graphName] = _nodeMap;\n          continue;\n        }\n        const nodeMap = graphs[graphName];\n        for(const key in _nodeMap) {\n          if(!(key in nodeMap)) {\n            nodeMap[key] = _nodeMap[key];\n          }\n        }\n      }\n    }\n  }\n\n  // add all non-default graphs to default graph\n  const defaultGraph = _mergeNodeMaps(graphs);\n\n  // produce flattened output\n  const flattened = [];\n  const keys = Object.keys(defaultGraph).sort();\n  for(let ki = 0; ki < keys.length; ++ki) {\n    const node = defaultGraph[keys[ki]];\n    // only add full subjects to top-level\n    if(!_isSubjectReference(node)) {\n      flattened.push(node);\n    }\n  }\n\n  if(ctx === null) {\n    return flattened;\n  }\n\n  // compact result (force @graph option to true, skip expansion)\n  options.graph = true;\n  options.skipExpansion = true;\n  const compacted = await jsonld.compact(flattened, ctx, options);\n\n  return compacted;\n};\n\n/**\n * The default document loader for external documents.\n *\n * @param url the URL to load.\n *\n * @return a promise that resolves to the remote document.\n */\nObject.defineProperty(jsonld, 'documentLoader', {\n  get: () => jsonld._documentLoader,\n  set: v => jsonld._documentLoader = v\n});\n// default document loader not implemented\njsonld.documentLoader = async url => {\n  throw new JsonLdError(\n    'Could not retrieve a JSON-LD document from the URL. URL ' +\n    'dereferencing not implemented.', 'jsonld.LoadDocumentError',\n    {code: 'loading document failed', url});\n};\n\n/**\n * Gets a remote JSON-LD document using the default document loader or\n * one given in the passed options.\n *\n * @param url the URL to fetch.\n * @param [options] the options to use:\n *          [documentLoader] the document loader to use.\n *\n * @return a Promise that resolves to the retrieved remote document.\n */\njsonld.get = async function(url, options) {\n  let load;\n  if(typeof options.documentLoader === 'function') {\n    load = options.documentLoader;\n  } else {\n    load = jsonld.documentLoader;\n  }\n\n  const remoteDoc = await load(url);\n\n  try {\n    if(!remoteDoc.document) {\n      throw new JsonLdError(\n        'No remote document found at the given URL.',\n        'jsonld.NullRemoteDocument');\n    }\n    if(_isString(remoteDoc.document)) {\n      remoteDoc.document = JSON.parse(remoteDoc.document);\n    }\n  } catch(e) {\n    throw new JsonLdError(\n      'Could not retrieve a JSON-LD document from the URL.',\n      'jsonld.LoadDocumentError', {\n        code: 'loading document failed',\n        cause: e,\n        remoteDoc\n      });\n  }\n\n  return remoteDoc;\n};\n\n/**\n * Processes a local context, resolving any URLs as necessary, and returns a\n * new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param [options] the options to use:\n *          [documentLoader(url, options)] the document loader.\n *          [contextResolver] internal use only.\n *\n * @return a Promise that resolves to the new active context.\n */\njsonld.processContext = async function(\n  activeCtx, localCtx, options) {\n  // set default options\n  options = _setDefaults(options, {\n    base: '',\n    contextResolver: new ContextResolver(\n      {sharedCache: _resolvedContextCache})\n  });\n\n  // return initial context early for null context\n  if(localCtx === null) {\n    return _getInitialContext(options);\n  }\n\n  // get URLs in localCtx\n  localCtx = util.clone(localCtx);\n  if(!(_isObject(localCtx) && '@context' in localCtx)) {\n    localCtx = {'@context': localCtx};\n  }\n\n  return _processContext({activeCtx, localCtx, options});\n};\n\n// backwards compatibility\njsonld.getContextValue = require('./context').getContextValue;\n\n/**\n * Document loaders.\n */\njsonld.documentLoaders = {};\njsonld.documentLoaders.node = require('./documentLoaders/node');\njsonld.documentLoaders.xhr = require('./documentLoaders/xhr');\n\n/**\n * Assigns the default document loader for external document URLs to a built-in\n * default. Supported types currently include: 'xhr' and 'node'.\n *\n * @param type the type to set.\n * @param [params] the parameters required to use the document loader.\n */\njsonld.useDocumentLoader = function(type) {\n  if(!(type in jsonld.documentLoaders)) {\n    throw new JsonLdError(\n      'Unknown document loader type: \"' + type + '\"',\n      'jsonld.UnknownDocumentLoader',\n      {type});\n  }\n\n  // set document loader\n  jsonld.documentLoader = jsonld.documentLoaders[type].apply(\n    jsonld, Array.prototype.slice.call(arguments, 1));\n};\n\n/**\n * Registers an RDF dataset parser by content-type, for use with\n * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,\n * a string of input. An RDF dataset parser can be synchronous or\n * asynchronous (by returning a promise).\n *\n * @param contentType the content-type for the parser.\n * @param parser(input) the parser function (takes a string as a parameter\n *          and either returns an RDF dataset or a Promise that resolves to one.\n */\njsonld.registerRDFParser = function(contentType, parser) {\n  _rdfParsers[contentType] = parser;\n};\n\n/**\n * Unregisters an RDF dataset parser by content-type.\n *\n * @param contentType the content-type for the parser.\n */\njsonld.unregisterRDFParser = function(contentType) {\n  delete _rdfParsers[contentType];\n};\n\n// register the N-Quads RDF parser\njsonld.registerRDFParser('application/n-quads', NQuads.parse);\njsonld.registerRDFParser('application/nquads', NQuads.parse);\n\n// register the RDFa API RDF parser\njsonld.registerRDFParser('rdfa-api', Rdfa.parse);\n\n/* URL API */\njsonld.url = require('./url');\n\n/* Utility API */\njsonld.util = util;\n// backwards compatibility\nObject.assign(jsonld, util);\n\n// reexpose API as jsonld.promises for backwards compatability\njsonld.promises = jsonld;\n\n// backwards compatibility\njsonld.RequestQueue = require('./RequestQueue');\n\n/* WebIDL API */\njsonld.JsonLdProcessor = require('./JsonLdProcessor')(jsonld);\n\n// setup browser global JsonLdProcessor\nif(_browser && typeof global.JsonLdProcessor === 'undefined') {\n  Object.defineProperty(global, 'JsonLdProcessor', {\n    writable: true,\n    enumerable: false,\n    configurable: true,\n    value: jsonld.JsonLdProcessor\n  });\n}\n\n// set platform-specific defaults/APIs\nif(_nodejs) {\n  // use node document loader by default\n  jsonld.useDocumentLoader('node');\n} else if(typeof XMLHttpRequest !== 'undefined') {\n  // use xhr document loader by default\n  jsonld.useDocumentLoader('xhr');\n}\n\nfunction _setDefaults(options, {\n  documentLoader = jsonld.documentLoader,\n  ...defaults\n}) {\n  return Object.assign({}, {documentLoader}, defaults, options);\n}\n\n// end of jsonld API `wrapper` factory\nreturn jsonld;\n};\n\n// external APIs:\n\n// used to generate a new jsonld API instance\nconst factory = function() {\n  return wrapper(function() {\n    return factory();\n  });\n};\n\n// wrap the main jsonld API instance\nwrapper(factory);\n// export API\nmodule.exports = factory;\n"]},"metadata":{},"sourceType":"script"}