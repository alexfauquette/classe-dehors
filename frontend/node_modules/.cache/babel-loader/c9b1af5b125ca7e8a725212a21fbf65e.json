{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js\";\nimport React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport { FieldTitle, InputHelperText } from \"react-admin\"; // import MarkdownInput from \"ra-input-markdown\";\n\nimport PairLocationInput from \"../../pair/PairLocationInput\";\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport { useField } from \"react-final-form\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport { InputLabel, FormHelperText, FormControl } from \"@material-ui/core\";\nconst styles = {};\n\nconst MarkdownInput = ({\n  source,\n  helperText\n}) => {\n  const {\n    input: {\n      value,\n      onChange\n    },\n    meta: {\n      error,\n      submitError,\n      touched\n    }\n  } = useField(source); // const [value, setValue] = useState(\"\");\n\n  const [tab, setTab] = useState(\"write\");\n  console.log({\n    input: {\n      value,\n      onChange\n    },\n    meta: {\n      error,\n      submitError,\n      touched\n    }\n  }); // useEffect(() => {\n  //   setValue(value);\n  // }, []);\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n\n  const handleValueChange = value => {\n    // setValue(value);\n    onChange(value);\n  };\n\n  return /*#__PURE__*/React.createElement(FormControl, {\n    error: error,\n    focused: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FieldTitle // resource={resource}\n  // source={source}\n  , {\n    labe: \"kjdhfkjd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"sqjlq\"), /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"my-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(ReactMde, {\n    onChange: value => handleValueChange(value),\n    onTabChange: tab => setTab(tab),\n    value: value,\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    selectedTab: tab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"aaaa\")) //   label={\n  //     label !== '' &&\n  //     label !== false && (\n  //       <FieldTitle label={label} source={source} resource={resource} isRequired={isRequired} />\n  //     )\n  //   }\n  //   error={!!(touched && (error || submitError))}\n  //   helperText={\n  //       <InputHelperText\n  //           touched={touched}\n  //           error={error || submitError}\n  //           helperText={helperText}\n  //       />\n  //   }\n  ;\n};\n\nexport const validatePlaceForm = values => {\n  const errors = {};\n  console.log(values);\n\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n\n  return errors;\n};\nexport const PlaceFields = ({ ...props\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }\n}, \"Merci de remplir tous les champs\"), /*#__PURE__*/React.createElement(PairLocationInput, {\n  label: \"Adresse\",\n  source: \"pair:hasPostalAddress\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(TextInput, {\n  label: \"Nom\",\n  source: \"pair:label\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(MarkdownInput, Object.assign({\n  multiline: true,\n  label: \"Description\",\n  source: \"pair:description\",\n  fullWidth: true,\n  defaultValue: \"Ce lieu est sp\\xE9cifique, car ...\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }\n})));\nexport const PlaceForm = ({\n  mode,\n  ...rest\n}) => /*#__PURE__*/React.createElement(SimpleForm, Object.assign({}, rest, {\n  redirect: \"show\",\n  validate: validatePlaceForm,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(PlaceFields, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }\n}));\nexport default PlaceForm;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js"],"names":["React","useState","SimpleForm","TextInput","useInput","FieldTitle","InputHelperText","PairLocationInput","ReactMde","Showdown","useField","InputLabel","FormHelperText","FormControl","styles","MarkdownInput","source","helperText","input","value","onChange","meta","error","submitError","touched","tab","setTab","console","log","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","handleValueChange","markdown","Promise","resolve","makeHtml","validatePlaceForm","values","errors","PlaceFields","props","PlaceForm","mode","rest"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport { FieldTitle, InputHelperText } from \"react-admin\";\n// import MarkdownInput from \"ra-input-markdown\";\nimport PairLocationInput from \"../../pair/PairLocationInput\";\n\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\n\nimport { useField } from \"react-final-form\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport { InputLabel, FormHelperText, FormControl } from \"@material-ui/core\";\nconst styles = {};\nconst MarkdownInput = ({ source, helperText }) => {\n  const {\n    input: { value, onChange },\n    meta: { error, submitError, touched },\n  } = useField(source);\n  // const [value, setValue] = useState(\"\");\n  const [tab, setTab] = useState(\"write\");\n  console.log({\n    input: { value, onChange },\n    meta: { error, submitError, touched },\n  });\n  // useEffect(() => {\n  //   setValue(value);\n  // }, []);\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true,\n  });\n  const handleValueChange = (value) => {\n    // setValue(value);\n    onChange(value);\n  };\n\n  return (\n    <FormControl error={error} focused={true}>\n      <FieldTitle\n        // resource={resource}\n        // source={source}\n        labe=\"kjdhfkjd\"\n      >\n        sqjlq\n      </FieldTitle>\n      <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n      <ReactMde\n        onChange={(value) => handleValueChange(value)}\n        onTabChange={(tab) => setTab(tab)}\n        value={value}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter.makeHtml(markdown))\n        }\n        selectedTab={tab}\n      />\n      <FormHelperText>aaaa</FormHelperText>\n    </FormControl>\n\n    //   label={\n    //     label !== '' &&\n    //     label !== false && (\n    //       <FieldTitle label={label} source={source} resource={resource} isRequired={isRequired} />\n    //     )\n    //   }\n    //   error={!!(touched && (error || submitError))}\n    //   helperText={\n    //       <InputHelperText\n    //           touched={touched}\n    //           error={error || submitError}\n    //           helperText={helperText}\n    //       />\n    //   }\n  );\n};\n\nexport const validatePlaceForm = (values) => {\n  const errors = {};\n  console.log(values);\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n  return errors;\n};\nexport const PlaceFields = ({ ...props }) => (\n  <>\n    <p>Merci de remplir tous les champs</p>\n    <PairLocationInput\n      label=\"Adresse\"\n      source=\"pair:hasPostalAddress\"\n      fullWidth\n    />\n    <TextInput label=\"Nom\" source=\"pair:label\" fullWidth />\n    <MarkdownInput\n      multiline\n      label=\"Description\"\n      source=\"pair:description\"\n      fullWidth\n      defaultValue=\"Ce lieu est spécifique, car ...\"\n      {...props}\n    />\n  </>\n);\n\nexport const PlaceForm = ({ mode, ...rest }) => (\n  <SimpleForm {...rest} redirect=\"show\" validate={validatePlaceForm}>\n    <PlaceFields />\n  </SimpleForm>\n);\n\nexport default PlaceForm;\n"]},"metadata":{},"sourceType":"module"}