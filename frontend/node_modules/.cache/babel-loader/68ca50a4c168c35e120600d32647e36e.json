{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _toConsumableArray = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  function IdentifierIssuer(prefix) {\n    var existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n    var counter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, IdentifierIssuer);\n\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n\n\n  _createClass(IdentifierIssuer, [{\n    key: \"clone\",\n    value: function clone() {\n      var prefix = this.prefix,\n          _existing = this._existing,\n          counter = this.counter;\n      return new IdentifierIssuer(prefix, new Map(_existing), counter);\n    }\n    /**\n     * Gets the new identifier for the given old identifier, where if no old\n     * identifier is given a new identifier will be generated.\n     *\n     * @param [old] the old identifier to get the new identifier for.\n     *\n     * @return the new identifier.\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId(old) {\n      // return existing old identifier\n      var existing = old && this._existing.get(old);\n\n      if (existing) {\n        return existing;\n      } // get next identifier\n\n\n      var identifier = this.prefix + this.counter;\n      this.counter++; // save mapping\n\n      if (old) {\n        this._existing.set(old, identifier);\n      }\n\n      return identifier;\n    }\n    /**\n     * Returns true if the given old identifer has already been assigned a new\n     * identifier.\n     *\n     * @param old the old identifier to check.\n     *\n     * @return true if the old identifier has been assigned a new identifier,\n     *   false if not.\n     */\n\n  }, {\n    key: \"hasId\",\n    value: function hasId(old) {\n      return this._existing.has(old);\n    }\n    /**\n     * Returns all of the IDs that have been issued new IDs in the order in\n     * which they were issued new IDs.\n     *\n     * @return the list of old IDs that has been issued new IDs in order.\n     */\n\n  }, {\n    key: \"getOldIds\",\n    value: function getOldIds() {\n      return _toConsumableArray(this._existing.keys());\n    }\n  }]);\n\n  return IdentifierIssuer;\n}();","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"names":["module","exports","prefix","existing","Map","counter","_existing","IdentifierIssuer","old","get","identifier","set","has","keys"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,4BAAYC,MAAZ,EAAuD;AAAA,QAAnCC,QAAmC,uEAAxB,IAAIC,GAAJ,EAAwB;AAAA,QAAbC,OAAa,uEAAH,CAAG;;AAAA;;AACrD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKE,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;AAnBA;AAAA;AAAA,WAoBE,iBAAQ;AAAA,UACCH,MADD,GAC+B,IAD/B,CACCA,MADD;AAAA,UACSI,SADT,GAC+B,IAD/B,CACSA,SADT;AAAA,UACoBD,OADpB,GAC+B,IAD/B,CACoBA,OADpB;AAEN,aAAO,IAAIE,gBAAJ,CAAqBL,MAArB,EAA6B,IAAIE,GAAJ,CAAQE,SAAR,CAA7B,EAAiDD,OAAjD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAhCA;AAAA;AAAA,WAiCE,eAAMG,GAAN,EAAW;AACT;AACA,UAAML,QAAQ,GAAGK,GAAG,IAAI,KAAKF,SAAL,CAAeG,GAAf,CAAmBD,GAAnB,CAAxB;;AACA,UAAGL,QAAH,EAAa;AACX,eAAOA,QAAP;AACD,OALQ,CAOT;;;AACA,UAAMO,UAAU,GAAG,KAAKR,MAAL,GAAc,KAAKG,OAAtC;AACA,WAAKA,OAAL,GATS,CAWT;;AACA,UAAGG,GAAH,EAAQ;AACN,aAAKF,SAAL,CAAeK,GAAf,CAAmBH,GAAnB,EAAwBE,UAAxB;AACD;;AAED,aAAOA,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5DA;AAAA;AAAA,WA6DE,eAAMF,GAAN,EAAW;AACT,aAAO,KAAKF,SAAL,CAAeM,GAAf,CAAmBJ,GAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;AAtEA;AAAA;AAAA,WAuEE,qBAAY;AACV,gCAAW,KAAKF,SAAL,CAAeO,IAAf,EAAX;AACD;AAzEH;;AAAA;AAAA","sourcesContent":["/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   * @param existing an existing Map to use.\n   * @param counter the counter to use.\n   */\n  constructor(prefix, existing = new Map(), counter = 0) {\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const {prefix, _existing, counter} = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n    if(existing) {\n      return existing;\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter++;\n\n    // save mapping\n    if(old) {\n      this._existing.set(old, identifier);\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return this._existing.has(old);\n  }\n\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @return the list of old IDs that has been issued new IDs in order.\n   */\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n};\n"]},"metadata":{},"sourceType":"script"}