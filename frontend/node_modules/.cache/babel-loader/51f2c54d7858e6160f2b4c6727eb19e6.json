{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict'; // TODO: convert to ES6 iterable?\n\nvar _createForOfIteratorHelper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  function Permuter(list) {\n    _classCallCheck(this, Permuter);\n\n    // original array\n    this.current = list.sort(); // indicates whether there are more permutations\n\n    this.done = false; // directional info for permutation algorithm\n\n    this.dir = new Map();\n\n    for (var i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n\n\n  _createClass(Permuter, [{\n    key: \"hasNext\",\n    value: function hasNext() {\n      return !this.done;\n    }\n    /**\n     * Gets the next permutation. Call hasNext() to ensure there is another one\n     * first.\n     *\n     * @return the next permutation.\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      // copy current permutation to return it\n      var current = this.current,\n          dir = this.dir;\n      var rval = current.slice();\n      /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n       permutation algorithm. */\n      // get largest mobile element k\n      // (mobile: element is greater than the one it is looking at)\n\n      var k = null;\n      var pos = 0;\n      var length = current.length;\n\n      for (var i = 0; i < length; ++i) {\n        var element = current[i];\n        var left = dir.get(element);\n\n        if ((k === null || element > k) && (left && i > 0 && element > current[i - 1] || !left && i < length - 1 && element > current[i + 1])) {\n          k = element;\n          pos = i;\n        }\n      } // no more permutations\n\n\n      if (k === null) {\n        this.done = true;\n      } else {\n        // swap k and the element it is looking at\n        var swap = dir.get(k) ? pos - 1 : pos + 1;\n        current[pos] = current[swap];\n        current[swap] = k; // reverse the direction of all elements larger than k\n\n        var _iterator = _createForOfIteratorHelper(current),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _element = _step.value;\n\n            if (_element > k) {\n              dir.set(_element, !dir.get(_element));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return rval;\n    }\n  }]);\n\n  return Permuter;\n}();","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/rdf-canonize/lib/Permuter.js"],"names":["module","exports","list","current","sort","done","dir","Map","i","length","set","rval","slice","k","pos","element","left","get","swap"],"mappings":"AAAA;AACA;AACA;AACA,a,CAEA;;;;;;;;AAEAA,MAAM,CAACC,OAAP;AACE;AACF;AACA;AACA;AACA;AACA;AACE,oBAAYC,IAAZ,EAAkB;AAAA;;AAChB;AACA,SAAKC,OAAL,GAAeD,IAAI,CAACE,IAAL,EAAf,CAFgB,CAGhB;;AACA,SAAKC,IAAL,GAAY,KAAZ,CAJgB,CAKhB;;AACA,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,IAAI,CAACO,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnC,WAAKF,GAAL,CAASI,GAAT,CAAaR,IAAI,CAACM,CAAD,CAAjB,EAAsB,IAAtB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AAvBA;AAAA;AAAA,WAwBE,mBAAU;AACR,aAAO,CAAC,KAAKH,IAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;AAjCA;AAAA;AAAA,WAkCE,gBAAO;AACL;AADK,UAEEF,OAFF,GAEkB,IAFlB,CAEEA,OAFF;AAAA,UAEWG,GAFX,GAEkB,IAFlB,CAEWA,GAFX;AAGL,UAAMK,IAAI,GAAGR,OAAO,CAACS,KAAR,EAAb;AAEA;AACJ;AAEI;AACA;;AACA,UAAIC,CAAC,GAAG,IAAR;AACA,UAAIC,GAAG,GAAG,CAAV;AACA,UAAML,MAAM,GAAGN,OAAO,CAACM,MAAvB;;AACA,WAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,MAAnB,EAA2B,EAAED,CAA7B,EAAgC;AAC9B,YAAMO,OAAO,GAAGZ,OAAO,CAACK,CAAD,CAAvB;AACA,YAAMQ,IAAI,GAAGV,GAAG,CAACW,GAAJ,CAAQF,OAAR,CAAb;;AACA,YAAG,CAACF,CAAC,KAAK,IAAN,IAAcE,OAAO,GAAGF,CAAzB,MACCG,IAAI,IAAIR,CAAC,GAAG,CAAZ,IAAiBO,OAAO,GAAGZ,OAAO,CAACK,CAAC,GAAG,CAAL,CAAnC,IACA,CAACQ,IAAD,IAASR,CAAC,GAAIC,MAAM,GAAG,CAAvB,IAA6BM,OAAO,GAAGZ,OAAO,CAACK,CAAC,GAAG,CAAL,CAF9C,CAAH,EAE4D;AAC1DK,UAAAA,CAAC,GAAGE,OAAJ;AACAD,UAAAA,GAAG,GAAGN,CAAN;AACD;AACF,OAtBI,CAwBL;;;AACA,UAAGK,CAAC,KAAK,IAAT,EAAe;AACb,aAAKR,IAAL,GAAY,IAAZ;AACD,OAFD,MAEO;AACL;AACA,YAAMa,IAAI,GAAGZ,GAAG,CAACW,GAAJ,CAAQJ,CAAR,IAAaC,GAAG,GAAG,CAAnB,GAAuBA,GAAG,GAAG,CAA1C;AACAX,QAAAA,OAAO,CAACW,GAAD,CAAP,GAAeX,OAAO,CAACe,IAAD,CAAtB;AACAf,QAAAA,OAAO,CAACe,IAAD,CAAP,GAAgBL,CAAhB,CAJK,CAML;;AANK,mDAOgBV,OAPhB;AAAA;;AAAA;AAOL,8DAA8B;AAAA,gBAApBY,QAAoB;;AAC5B,gBAAGA,QAAO,GAAGF,CAAb,EAAgB;AACdP,cAAAA,GAAG,CAACI,GAAJ,CAAQK,QAAR,EAAiB,CAACT,GAAG,CAACW,GAAJ,CAAQF,QAAR,CAAlB;AACD;AACF;AAXI;AAAA;AAAA;AAAA;AAAA;AAYN;;AAED,aAAOJ,IAAP;AACD;AA5EH;;AAAA;AAAA","sourcesContent":["/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n// TODO: convert to ES6 iterable?\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param list the array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for(let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @return true if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @return the next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {current, dir} = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for(let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > current[i - 1]) ||\n        (!left && i < (length - 1) && element > current[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(const element of current) {\n        if(element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}