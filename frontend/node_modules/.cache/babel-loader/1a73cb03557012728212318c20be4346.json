{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nrequire('setimmediate');\n\nvar crypto = self.crypto || self.msCrypto; // TODO: synchronous version no longer supported in browser\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  function MessageDigest(algorithm) {\n    _classCallCheck(this, MessageDigest);\n\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if (!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n\n    if (algorithm === 'sha256') {\n      this.algorithm = {\n        name: 'SHA-256'\n      };\n    } else if (algorithm === 'sha1') {\n      this.algorithm = {\n        name: 'SHA-1'\n      };\n    } else {\n      throw new Error(\"Unsupport algorithm \\\"\".concat(algorithm, \"\\\".\"));\n    }\n\n    this._content = '';\n  }\n\n  _createClass(MessageDigest, [{\n    key: \"update\",\n    value: function update(msg) {\n      this._content += msg;\n    }\n  }, {\n    key: \"digest\",\n    value: function () {\n      var _digest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data, buffer, hex, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = new TextEncoder().encode(this._content);\n                _context.t0 = Uint8Array;\n                _context.next = 4;\n                return crypto.subtle.digest(this.algorithm, data);\n\n              case 4:\n                _context.t1 = _context.sent;\n                buffer = new _context.t0(_context.t1);\n                // return digest in hex\n                hex = '';\n\n                for (i = 0; i < buffer.length; ++i) {\n                  hex += buffer[i].toString(16).padStart(2, '0');\n                }\n\n                return _context.abrupt(\"return\", hex);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function digest() {\n        return _digest.apply(this, arguments);\n      }\n\n      return digest;\n    }()\n  }]);\n\n  return MessageDigest;\n}();","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/rdf-canonize/lib/MessageDigest-browser.js"],"names":["require","crypto","self","msCrypto","module","exports","algorithm","subtle","Error","name","_content","msg","data","TextEncoder","encode","Uint8Array","digest","buffer","hex","i","length","toString","padStart"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;AAEAA,OAAO,CAAC,cAAD,CAAP;;AAEA,IAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC,C,CAEA;;AAEAC,MAAM,CAACC,OAAP;AACE;AACF;AACA;AACA;AACA;AACE,yBAAYC,SAAZ,EAAuB;AAAA;;AACrB;AACA;AACA,QAAG,EAAEL,MAAM,IAAIA,MAAM,CAACM,MAAnB,CAAH,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,QAAGF,SAAS,KAAK,QAAjB,EAA2B;AACzB,WAAKA,SAAL,GAAiB;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAjB;AACD,KAFD,MAEO,IAAGH,SAAS,KAAK,MAAjB,EAAyB;AAC9B,WAAKA,SAAL,GAAiB;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAjB;AACD,KAFM,MAEA;AACL,YAAM,IAAID,KAAJ,iCAAkCF,SAAlC,SAAN;AACD;;AACD,SAAKI,QAAL,GAAgB,EAAhB;AACD;;AApBH;AAAA;AAAA,WAsBE,gBAAOC,GAAP,EAAY;AACV,WAAKD,QAAL,IAAiBC,GAAjB;AACD;AAxBH;AAAA;AAAA;AAAA,6EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,IADR,GACe,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyB,KAAKJ,QAA9B,CADf;AAAA,8BAEqBK,UAFrB;AAAA;AAAA,uBAGUd,MAAM,CAACM,MAAP,CAAcS,MAAd,CAAqB,KAAKV,SAA1B,EAAqCM,IAArC,CAHV;;AAAA;AAAA;AAEQK,gBAAAA,MAFR;AAIE;AACIC,gBAAAA,GALN,GAKY,EALZ;;AAME,qBAAQC,CAAR,GAAY,CAAZ,EAAeA,CAAC,GAAGF,MAAM,CAACG,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrCD,kBAAAA,GAAG,IAAID,MAAM,CAACE,CAAD,CAAN,CAAUE,QAAV,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAAP;AACD;;AARH,iDASSJ,GATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire('setimmediate');\n\nconst crypto = self.crypto || self.msCrypto;\n\n// TODO: synchronous version no longer supported in browser\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param algorithm the algorithm to use.\n   */\n  constructor(algorithm) {\n    // check if crypto.subtle is available\n    // check is here rather than top-level to only fail if class is used\n    if(!(crypto && crypto.subtle)) {\n      throw new Error('crypto.subtle not found.');\n    }\n    if(algorithm === 'sha256') {\n      this.algorithm = {name: 'SHA-256'};\n    } else if(algorithm === 'sha1') {\n      this.algorithm = {name: 'SHA-1'};\n    } else {\n      throw new Error(`Unsupport algorithm \"${algorithm}\".`);\n    }\n    this._content = '';\n  }\n\n  update(msg) {\n    this._content += msg;\n  }\n\n  async digest() {\n    const data = new TextEncoder().encode(this._content);\n    const buffer = new Uint8Array(\n      await crypto.subtle.digest(this.algorithm, data));\n    // return digest in hex\n    let hex = '';\n    for(let i = 0; i < buffer.length; ++i) {\n      hex += buffer[i].toString(16).padStart(2, '0');\n    }\n    return hex;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}