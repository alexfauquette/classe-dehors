{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/layout/SubList.js\";\nimport React from 'react';\nimport { useTranslate, getFieldLabelTranslationArgs, useShowContext } from 'react-admin';\nimport { Box, Typography } from '@material-ui/core';\nimport { LargeLabel } from '@semapps/archipelago-layout';\n\nconst SubList = ({\n  children,\n  label\n}) => {\n  const translate = useTranslate();\n  const {\n    basePath,\n    loaded,\n    record,\n    resource\n  } = useShowContext();\n  if (!loaded) return null;\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LargeLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, label), React.Children.map(children, field => field && record[field.props.source] && React.isValidElement(field) ? /*#__PURE__*/React.createElement(\"div\", {\n    key: field.props.source,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, field.props.addLabel ? /*#__PURE__*/React.createElement(Typography, {\n    paragraph: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, translate(...getFieldLabelTranslationArgs({\n    label: field.props.label,\n    resource,\n    source: field.props.source\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 19\n    }\n  })), React.cloneElement(field, {\n    record,\n    resource,\n    basePath\n  })) : typeof field.type === 'string' ? field : React.cloneElement(field, {\n    record,\n    resource,\n    basePath\n  })) : null));\n};\n\nexport default SubList;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/layout/SubList.js"],"names":["React","useTranslate","getFieldLabelTranslationArgs","useShowContext","Box","Typography","LargeLabel","SubList","children","label","translate","basePath","loaded","record","resource","Children","map","field","props","source","isValidElement","addLabel","cloneElement","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,4BAAvB,EAAqDC,cAArD,QAA2E,aAA3E;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,mBAAhC;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AACvC,QAAMC,SAAS,GAAGT,YAAY,EAA9B;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,MAAyCX,cAAc,EAA7D;AACA,MAAI,CAACS,MAAL,EAAa,OAAO,IAAP;AAEb,sBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaH,KAAb,CADF,EAEGT,KAAK,CAACe,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6BS,KAAK,IACjCA,KAAK,IAAIJ,MAAM,CAACI,KAAK,CAACC,KAAN,CAAYC,MAAb,CAAf,IAAuCnB,KAAK,CAACoB,cAAN,CAAqBH,KAArB,CAAvC,gBACE;AAAK,IAAA,GAAG,EAAEA,KAAK,CAACC,KAAN,CAAYC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACC,KAAN,CAAYG,QAAZ,gBACC,oBAAC,UAAD;AAAY,IAAA,SAAS,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,SAAS,CACR,GAAGR,4BAA4B,CAAC;AAC9BO,IAAAA,KAAK,EAAEQ,KAAK,CAACC,KAAN,CAAYT,KADW;AAE9BK,IAAAA,QAF8B;AAG9BK,IAAAA,MAAM,EAAEF,KAAK,CAACC,KAAN,CAAYC;AAHU,GAAD,CADvB,CADZ,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,EAWGnB,KAAK,CAACsB,YAAN,CAAmBL,KAAnB,EAA0B;AACzBJ,IAAAA,MADyB;AAEzBC,IAAAA,QAFyB;AAGzBH,IAAAA;AAHyB,GAA1B,CAXH,CADD,GAkBG,OAAOM,KAAK,CAACM,IAAb,KAAsB,QAAtB,GACFN,KADE,GAGFjB,KAAK,CAACsB,YAAN,CAAmBL,KAAnB,EAA0B;AACxBJ,IAAAA,MADwB;AAExBC,IAAAA,QAFwB;AAGxBH,IAAAA;AAHwB,GAA1B,CAtBJ,CADF,GA8BI,IA/BL,CAFH,CADF;AAsCD,CA3CD;;AA6CA,eAAeJ,OAAf","sourcesContent":["import React from 'react';\nimport { useTranslate, getFieldLabelTranslationArgs, useShowContext } from 'react-admin';\nimport { Box, Typography } from '@material-ui/core';\nimport { LargeLabel } from '@semapps/archipelago-layout';\n\nconst SubList = ({ children, label }) => {\n  const translate = useTranslate();\n  const { basePath, loaded, record, resource } = useShowContext();\n  if (!loaded) return null;\n\n  return (\n    <Box>\n      <LargeLabel>{label}</LargeLabel>\n      {React.Children.map(children, field =>\n        field && record[field.props.source] && React.isValidElement(field) ? (\n          <div key={field.props.source}>\n            {field.props.addLabel ? (\n              <Typography paragraph>\n                <Typography variant=\"h6\">\n                  {translate(\n                    ...getFieldLabelTranslationArgs({\n                      label: field.props.label,\n                      resource,\n                      source: field.props.source\n                    })\n                  )}\n                  <br />\n                </Typography>\n                {React.cloneElement(field, {\n                  record,\n                  resource,\n                  basePath\n                })}\n              </Typography>\n            ) : typeof field.type === 'string' ? (\n              field\n            ) : (\n              React.cloneElement(field, {\n                record,\n                resource,\n                basePath\n              })\n            )}\n          </div>\n        ) : null\n      )}\n    </Box>\n  );\n};\n\nexport default SubList;\n"]},"metadata":{},"sourceType":"module"}