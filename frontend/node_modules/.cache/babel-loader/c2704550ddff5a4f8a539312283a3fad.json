{"ast":null,"code":"import { useEffect } from 'react';\n\nconst useOutboundClickListener = matomoInstance => {\n  const handleOutboundClick = event => {\n    const {\n      target\n    } = event;\n\n    if (!(target instanceof HTMLAnchorElement)) {\n      return;\n    }\n\n    const {\n      href\n    } = target; // Check if the click target differs from the current hostname, meaning it's external\n\n    if ( // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n    !href.match(new RegExp(`^(http://www.|https://www.|http://|https://)+(${window.location.hostname})`))) {\n      matomoInstance.trackLink({\n        href\n      });\n    }\n  };\n\n  useEffect(() => {\n    window.document.addEventListener('click', handleOutboundClick, {\n      capture: true\n    });\n    return () => window.document.removeEventListener('click', handleOutboundClick, {\n      capture: true\n    });\n  }, []);\n};\n\nexport default useOutboundClickListener;","map":{"version":3,"sources":["../../src/utils/useOutboundClickListener.tsx"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;;AAGA,MAAM,wBAAwB,GAAI,cAAD,IAAyC;AACxE,QAAM,mBAAmB,GAAI,KAAD,IAAsB;AAChD,UAAM;AAAE,MAAA;AAAF,QAAa,KAAnB;;AAEA,QAAI,EAAE,MAAM,YAAY,iBAApB,CAAJ,EAA4C;AAC1C;AACD;;AAED,UAAM;AAAE,MAAA;AAAF,QAAW,MAAjB,CAPgD,CAShD;;AACA,SACE;AACA,KAAC,IAAI,CAAC,KAAL,CACC,IAAI,MAAJ,CACE,iDAAiD,MAAM,CAAC,QAAP,CAAgB,QAAQ,GAD3E,CADD,CAFH,EAOE;AACA,MAAA,cAAc,CAAC,SAAf,CAAyB;AAAE,QAAA;AAAF,OAAzB;AACD;AACF,GApBD;;AAsBA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,MAAM,CAAC,QAAP,CAAgB,gBAAhB,CAAiC,OAAjC,EAA0C,mBAA1C,EAA+D;AAC7D,MAAA,OAAO,EAAE;AADoD,KAA/D;AAIA,WAAO,MACL,MAAM,CAAC,QAAP,CAAgB,mBAAhB,CAAoC,OAApC,EAA6C,mBAA7C,EAAkE;AAChE,MAAA,OAAO,EAAE;AADuD,KAAlE,CADF;AAID,GATQ,EASN,EATM,CAAT;AAUD,CAjCD;;AAmCA,eAAe,wBAAf","sourceRoot":"","sourcesContent":["import { useEffect } from 'react';\nconst useOutboundClickListener = (matomoInstance) => {\n    const handleOutboundClick = (event) => {\n        const { target } = event;\n        if (!(target instanceof HTMLAnchorElement)) {\n            return;\n        }\n        const { href } = target;\n        // Check if the click target differs from the current hostname, meaning it's external\n        if (\n        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n        !href.match(new RegExp(`^(http://www.|https://www.|http://|https://)+(${window.location.hostname})`))) {\n            matomoInstance.trackLink({ href });\n        }\n    };\n    useEffect(() => {\n        window.document.addEventListener('click', handleOutboundClick, {\n            capture: true,\n        });\n        return () => window.document.removeEventListener('click', handleOutboundClick, {\n            capture: true,\n        });\n    }, []);\n};\nexport default useOutboundClickListener;\n//# sourceMappingURL=useOutboundClickListener.js.map"]},"metadata":{},"sourceType":"module"}