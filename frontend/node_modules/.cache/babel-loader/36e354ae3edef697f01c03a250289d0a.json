{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/addons/Map.js\";\nimport React, { useState } from \"react\";\nimport { useListContext } from \"react-admin\";\nimport { useLocation } from \"react-router\";\nimport { useMediaQuery, Drawer, Box, IconButton, makeStyles } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\"; // import DefaultPopupContent from \"./DefaultPopupContent\";\n// import QueryStringUpdater from \"./QueryStringUpdater\";\n\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { useGetList, useGetOne, useGetMany } from \"react-admin\";\nconst useStyles = makeStyles(() => ({\n  loading: {\n    zIndex: 1000,\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  closeButton: {\n    position: \"absolute\",\n    zIndex: 1400,\n    top: 0,\n    right: 0\n  }\n}));\n\nconst MapList = ({\n  latitude,\n  longitude,\n  label,\n  description,\n  popupContent,\n  height,\n  center,\n  zoom,\n  groupClusters,\n  boundToMarkers,\n  connectMarkers,\n  ...otherProps\n}) => {\n  const {\n    ids,\n    data,\n    basePath,\n    loading\n  } = useGetList(\"Place\");\n  console.log({\n    ids,\n    data,\n    basePath,\n    loading\n  }); // const { ids, data, basePath, loading } = useListContext();\n\n  const xs = useMediaQuery(theme => theme.breakpoints.down(\"xs\"), {\n    noSsr: true\n  });\n  const [drawerRecord, setDrawerRecord] = useState(null);\n  const [map, setMap] = useState(null);\n  const classes = useStyles(); // Get the zoom and center from query string, if available\n\n  const query = new URLSearchParams(useLocation().search);\n  center = query.has(\"lat\") && query.has(\"lng\") ? [query.get(\"lat\"), query.get(\"lng\")] : center;\n  zoom = query.has(\"zoom\") ? query.get(\"zoom\") : zoom;\n  let previousRecord;\n  const records = ids.map(id => ({ ...data[id],\n    latitude: latitude && latitude(data[id]),\n    longitude: longitude && longitude(data[id]),\n    label: label && label(data[id]),\n    description: description && description(data[id])\n  })).filter(record => record.latitude && record.longitude);\n  const bounds = boundToMarkers && records.length > 0 ? records.map(record => [record.latitude, record.longitude]) : undefined; // Do not display anything if the bounds are not ready, otherwise the MapContainer will not be initialized correctly\n\n  if (boundToMarkers && !bounds) return null;\n  const markers = records.map((record, i) => {\n    const marker = /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: [record.latitude, record.longitude],\n      eventHandlers: xs ? {\n        click: () => {\n          map.setView([record.latitude, record.longitude]);\n          setDrawerRecord(record);\n        }\n      } : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), connectMarkers && previousRecord && /*#__PURE__*/React.createElement(Polyline, {\n      positions: [[previousRecord.latitude, previousRecord.longitude], [record.latitude, record.longitude]],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    })); // Save record so that we can trace lines\n\n    previousRecord = record;\n    return marker;\n  });\n  return /*#__PURE__*/React.createElement(MapContainer, Object.assign({\n    style: {\n      height\n    },\n    center: !boundToMarkers ? center : undefined,\n    zoom: !boundToMarkers ? zoom : undefined,\n    bounds: bounds,\n    whenCreated: setMap\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), loading && /*#__PURE__*/React.createElement(Box, {\n    alignItems: \"center\",\n    className: classes.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 60,\n    thickness: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  })), groupClusters ? /*#__PURE__*/React.createElement(MarkerClusterGroup, {\n    showCoverageOnHover: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, markers) : markers, /*#__PURE__*/React.createElement(Drawer, {\n    anchor: \"bottom\",\n    open: !!drawerRecord,\n    onClose: () => setDrawerRecord(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    p: 1,\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => setDrawerRecord(null),\n    className: classes.closeButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  })))));\n};\n\nMapList.defaultProps = {\n  height: 700,\n  center: [47, 2.213749],\n  zoom: 6,\n  groupClusters: true,\n  connectMarkers: false,\n  scrollWheelZoom: false // popupContent: DefaultPopupContent,\n\n};\nexport default MapList;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/addons/Map.js"],"names":["React","useState","useListContext","useLocation","useMediaQuery","Drawer","Box","IconButton","makeStyles","CircularProgress","MapContainer","TileLayer","Marker","Popup","Polyline","MarkerClusterGroup","CloseIcon","useGetList","useGetOne","useGetMany","useStyles","loading","zIndex","position","top","left","right","bottom","display","alignItems","justifyContent","closeButton","MapList","latitude","longitude","label","description","popupContent","height","center","zoom","groupClusters","boundToMarkers","connectMarkers","otherProps","ids","data","basePath","console","log","xs","theme","breakpoints","down","noSsr","drawerRecord","setDrawerRecord","map","setMap","classes","query","URLSearchParams","search","has","get","previousRecord","records","id","filter","record","bounds","length","undefined","markers","i","marker","click","setView","defaultProps","scrollWheelZoom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useListContext } from \"react-admin\";\nimport { useLocation } from \"react-router\";\nimport {\n  useMediaQuery,\n  Drawer,\n  Box,\n  IconButton,\n  makeStyles,\n} from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Polyline,\n} from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n// import DefaultPopupContent from \"./DefaultPopupContent\";\n// import QueryStringUpdater from \"./QueryStringUpdater\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport { useGetList, useGetOne, useGetMany } from \"react-admin\";\n\nconst useStyles = makeStyles(() => ({\n  loading: {\n    zIndex: 1000,\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    zIndex: 1400,\n    top: 0,\n    right: 0,\n  },\n}));\n\nconst MapList = ({\n  latitude,\n  longitude,\n  label,\n  description,\n  popupContent,\n  height,\n  center,\n  zoom,\n  groupClusters,\n  boundToMarkers,\n  connectMarkers,\n  ...otherProps\n}) => {\n  const { ids, data, basePath, loading } = useGetList(\"Place\");\n  console.log({ ids, data, basePath, loading });\n  // const { ids, data, basePath, loading } = useListContext();\n  const xs = useMediaQuery((theme) => theme.breakpoints.down(\"xs\"), {\n    noSsr: true,\n  });\n  const [drawerRecord, setDrawerRecord] = useState(null);\n  const [map, setMap] = useState(null);\n  const classes = useStyles();\n\n  // Get the zoom and center from query string, if available\n  const query = new URLSearchParams(useLocation().search);\n  center =\n    query.has(\"lat\") && query.has(\"lng\")\n      ? [query.get(\"lat\"), query.get(\"lng\")]\n      : center;\n  zoom = query.has(\"zoom\") ? query.get(\"zoom\") : zoom;\n\n  let previousRecord;\n\n  const records = ids\n    .map((id) => ({\n      ...data[id],\n      latitude: latitude && latitude(data[id]),\n      longitude: longitude && longitude(data[id]),\n      label: label && label(data[id]),\n      description: description && description(data[id]),\n    }))\n    .filter((record) => record.latitude && record.longitude);\n\n  const bounds =\n    boundToMarkers && records.length > 0\n      ? records.map((record) => [record.latitude, record.longitude])\n      : undefined;\n\n  // Do not display anything if the bounds are not ready, otherwise the MapContainer will not be initialized correctly\n  if (boundToMarkers && !bounds) return null;\n\n  const markers = records.map((record, i) => {\n    const marker = (\n      <React.Fragment key={i}>\n        <Marker\n          position={[record.latitude, record.longitude]}\n          eventHandlers={\n            xs\n              ? {\n                  click: () => {\n                    map.setView([record.latitude, record.longitude]);\n                    setDrawerRecord(record);\n                  },\n                }\n              : undefined\n          }\n        >\n          {/* {!xs && (\n            <Popup>\n              {React.createElement(popupContent, { record, basePath })}\n            </Popup>\n          )} */}\n        </Marker>\n        {connectMarkers && previousRecord && (\n          <Polyline\n            positions={[\n              [previousRecord.latitude, previousRecord.longitude],\n              [record.latitude, record.longitude],\n            ]}\n          />\n        )}\n      </React.Fragment>\n    );\n\n    // Save record so that we can trace lines\n    previousRecord = record;\n\n    return marker;\n  });\n\n  return (\n    <MapContainer\n      style={{ height }}\n      center={!boundToMarkers ? center : undefined}\n      zoom={!boundToMarkers ? zoom : undefined}\n      bounds={bounds}\n      whenCreated={setMap}\n      {...otherProps}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {loading && (\n        <Box alignItems=\"center\" className={classes.loading}>\n          <CircularProgress size={60} thickness={6} />\n        </Box>\n      )}\n      {groupClusters ? (\n        <MarkerClusterGroup showCoverageOnHover={false}>\n          {markers}\n        </MarkerClusterGroup>\n      ) : (\n        markers\n      )}\n      {/* <QueryStringUpdater /> */}\n      <Drawer\n        anchor=\"bottom\"\n        open={!!drawerRecord}\n        onClose={() => setDrawerRecord(null)}\n      >\n        <Box p={1} position=\"relative\">\n          <IconButton\n            onClick={() => setDrawerRecord(null)}\n            className={classes.closeButton}\n          >\n            <CloseIcon />\n          </IconButton>\n          {/* {drawerRecord &&\n            React.createElement(popupContent, {\n              record: drawerRecord,\n              basePath,\n            })} */}\n        </Box>\n      </Drawer>\n    </MapContainer>\n  );\n};\n\nMapList.defaultProps = {\n  height: 700,\n  center: [47, 2.213749],\n  zoom: 6,\n  groupClusters: true,\n  connectMarkers: false,\n  scrollWheelZoom: false,\n  // popupContent: DefaultPopupContent,\n};\n\nexport default MapList;\n"]},"metadata":{},"sourceType":"module"}