{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar URDNA2015 = require('./URDNA2015');\n\nmodule.exports = /*#__PURE__*/function (_URDNA) {\n  _inherits(URDNA2012, _URDNA);\n\n  var _super = _createSuper(URDNA2012);\n\n  function URDNA2012() {\n    var _this;\n\n    _classCallCheck(this, URDNA2012);\n\n    _this = _super.call(this);\n    _this.name = 'URGNA2012';\n    _this.hashAlgorithm = 'sha1';\n    return _this;\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  _createClass(URDNA2012, [{\n    key: \"modifyFirstDegreeComponent\",\n    value: function modifyFirstDegreeComponent(id, component, key) {\n      if (component.termType !== 'BlankNode') {\n        return component;\n      }\n\n      if (key === 'graph') {\n        return {\n          termType: 'BlankNode',\n          value: '_:g'\n        };\n      }\n\n      return {\n        termType: 'BlankNode',\n        value: component.value === id ? '_:a' : '_:z'\n      };\n    } // helper for getting a related predicate\n\n  }, {\n    key: \"getRelatedPredicate\",\n    value: function getRelatedPredicate(quad) {\n      return quad.predicate.value;\n    } // helper for creating hash to related blank nodes map\n\n  }, {\n    key: \"createHashToRelated\",\n    value: function () {\n      var _createHashToRelated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, issuer) {\n        var hashToRelated, quads, i, _iterator, _step, quad, position, related, hash, entries;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 1) Create a hash to related blank nodes map for storing hashes that\n                // identify related blank nodes.\n                hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to\n                // quads map for the key identifier.\n\n                quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:\n\n                i = 0;\n                _iterator = _createForOfIteratorHelper(quads);\n                _context.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 31;\n                  break;\n                }\n\n                quad = _step.value;\n                // 3.1) If the quad's subject is a blank node that does not match\n                // identifier, set hash to the result of the Hash Related Blank Node\n                // algorithm, passing the blank node identifier for subject as related,\n                // quad, path identifier issuer as issuer, and p as position.\n                position = void 0;\n                related = void 0;\n\n                if (!(quad.subject.termType === 'BlankNode' && quad.subject.value !== id)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                related = quad.subject.value;\n                position = 'p';\n                _context.next = 21;\n                break;\n\n              case 15:\n                if (!(quad.object.termType === 'BlankNode' && quad.object.value !== id)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                // 3.2) Otherwise, if quad's object is a blank node that does not match\n                // identifier, to the result of the Hash Related Blank Node algorithm,\n                // passing the blank node identifier for object as related, quad, path\n                // identifier issuer as issuer, and r as position.\n                related = quad.object.value;\n                position = 'r';\n                _context.next = 21;\n                break;\n\n              case 20:\n                return _context.abrupt(\"continue\", 29);\n\n              case 21:\n                if (!(++i % 100 === 0)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.next = 24;\n                return this._yield();\n\n              case 24:\n                _context.next = 26;\n                return this.hashRelatedBlankNode(related, quad, issuer, position);\n\n              case 26:\n                hash = _context.sent;\n                entries = hashToRelated.get(hash);\n\n                if (entries) {\n                  entries.push(related);\n                } else {\n                  hashToRelated.set(hash, [related]);\n                }\n\n              case 29:\n                _context.next = 6;\n                break;\n\n              case 31:\n                _context.next = 36;\n                break;\n\n              case 33:\n                _context.prev = 33;\n                _context.t0 = _context[\"catch\"](4);\n\n                _iterator.e(_context.t0);\n\n              case 36:\n                _context.prev = 36;\n\n                _iterator.f();\n\n                return _context.finish(36);\n\n              case 39:\n                return _context.abrupt(\"return\", hashToRelated);\n\n              case 40:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 33, 36, 39]]);\n      }));\n\n      function createHashToRelated(_x, _x2) {\n        return _createHashToRelated.apply(this, arguments);\n      }\n\n      return createHashToRelated;\n    }()\n  }]);\n\n  return URDNA2012;\n}(URDNA2015);","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/rdf-canonize/lib/URGNA2012.js"],"names":["URDNA2015","require","module","exports","name","hashAlgorithm","id","component","key","termType","value","quad","predicate","issuer","hashToRelated","Map","quads","blankNodeInfo","get","i","position","related","subject","object","_yield","hashRelatedBlankNode","hash","entries","push","set"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    if(key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: (component.value === id ? '_:a' : '_:z')\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    let i = 0;\n    for(const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // Note: batch hashing related blank nodes 100 at a time\n      if(++i % 100 === 0) {\n        await this._yield();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = await this.hashRelatedBlankNode(\n        related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if(entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}