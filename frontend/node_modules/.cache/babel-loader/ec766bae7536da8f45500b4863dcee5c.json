{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js\";\nimport React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport PairLocationInput from \"../../pair/PairLocationInput\";\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport { useField } from \"react-final-form\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport { FormLabel, FormHelperText, FormControl } from \"@material-ui/core\";\n\nconst MarkdownInput = ({\n  source,\n  helperText,\n  label,\n  defaultValue\n}) => {\n  const {\n    input: {\n      value = \"\",\n      onBlur,\n      onFocus,\n      onChange\n    },\n    meta: {\n      error,\n      submitError,\n      touched\n    },\n    isRequired\n  } = useInput({\n    source,\n    defaultValue: defaultValue || \"\"\n  });\n  const [tab, setTab] = useState(\"write\");\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n  return /*#__PURE__*/React.createElement(FormControl, {\n    error: !!(touched && (error || submitError)),\n    required: isRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, label !== \"\" && label !== false && /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 43\n    }\n  }, label), /*#__PURE__*/React.createElement(ReactMde, {\n    onTabChange: tab => setTab(tab),\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    selectedTab: tab,\n    childProps: {\n      textArea: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      }\n    },\n    value: value,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, touched && error ? error : typeof helperText === \"string\" ? helperText : null));\n};\n\nexport const validatePlaceForm = values => {\n  const errors = {};\n  console.log(values);\n\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n\n  return errors;\n};\nexport const PlaceFields = ({ ...props\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }\n}, \"Merci de remplir tous les champs\"), /*#__PURE__*/React.createElement(PairLocationInput, {\n  label: \"Adresse\",\n  source: \"pair:hasPostalAddress\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(TextInput, {\n  label: \"Nom\",\n  source: \"pair:label\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(MarkdownInput, {\n  multiline: true,\n  label: \"Description\",\n  source: \"pair:description\",\n  fullWidth: true,\n  helperText: \"Pourquoi ce lieu est-il sp\\xE9cifique ?\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }\n}));\nexport const PlaceForm = ({\n  mode,\n  ...rest\n}) => /*#__PURE__*/React.createElement(SimpleForm, Object.assign({}, rest, {\n  redirect: \"show\",\n  validate: validatePlaceForm,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(PlaceFields, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }\n}));\nexport default PlaceForm;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js"],"names":["React","useState","SimpleForm","TextInput","useInput","PairLocationInput","ReactMde","Showdown","useField","FormLabel","FormHelperText","FormControl","MarkdownInput","source","helperText","label","defaultValue","input","value","onBlur","onFocus","onChange","meta","error","submitError","touched","isRequired","tab","setTab","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","markdown","Promise","resolve","makeHtml","textArea","validatePlaceForm","values","errors","console","log","PlaceFields","props","PlaceForm","mode","rest"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport PairLocationInput from \"../../pair/PairLocationInput\";\n\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\n\nimport { useField } from \"react-final-form\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport { FormLabel, FormHelperText, FormControl } from \"@material-ui/core\";\n\nconst MarkdownInput = ({ source, helperText, label, defaultValue }) => {\n  const {\n    input: { value = \"\", onBlur, onFocus, onChange },\n    meta: { error, submitError, touched },\n    isRequired,\n  } = useInput({ source, defaultValue: defaultValue || \"\" });\n\n  const [tab, setTab] = useState(\"write\");\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true,\n  });\n\n  return (\n    <FormControl\n      error={!!(touched && (error || submitError))}\n      required={isRequired}\n    >\n      {label !== \"\" && label !== false && <FormLabel>{label}</FormLabel>}\n      <ReactMde\n        onTabChange={(tab) => setTab(tab)}\n        generateMarkdownPreview={(markdown) =>\n          Promise.resolve(converter.makeHtml(markdown))\n        }\n        selectedTab={tab}\n        childProps={{\n          textArea: {\n            onBlur: onBlur,\n            onFocus: onFocus,\n          },\n        }}\n        value={value}\n        onChange={onChange}\n      />\n      <FormHelperText variant=\"outlined\">\n        {touched && error\n          ? error\n          : typeof helperText === \"string\"\n          ? helperText\n          : null}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport const validatePlaceForm = (values) => {\n  const errors = {};\n  console.log(values);\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n  return errors;\n};\n\nexport const PlaceFields = ({ ...props }) => (\n  <>\n    <p>Merci de remplir tous les champs</p>\n    <PairLocationInput\n      label=\"Adresse\"\n      source=\"pair:hasPostalAddress\"\n      fullWidth\n    />\n    <TextInput label=\"Nom\" source=\"pair:label\" fullWidth />\n    <MarkdownInput\n      multiline\n      label=\"Description\"\n      source=\"pair:description\"\n      fullWidth\n      helperText=\"Pourquoi ce lieu est-il spécifique ?\"\n    />\n  </>\n);\n\nexport const PlaceForm = ({ mode, ...rest }) => (\n  <SimpleForm {...rest} redirect=\"show\" validate={validatePlaceForm}>\n    <PlaceFields />\n  </SimpleForm>\n);\n\nexport default PlaceForm;\n"]},"metadata":{},"sourceType":"module"}