{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\n\nconst useDoubleClick = callback => {\n  const [elem, setElem] = useState(null);\n  const countRef = useRef(0);\n  const timerRef = useRef(null);\n  const inputCallbackRef = useRef(null);\n  const callbackRef = useCallback(node => {\n    setElem(node);\n    callbackRef.current = node;\n  }, []);\n  useEffect(() => {\n    inputCallbackRef.current = callback;\n  });\n  useEffect(() => {\n    const handler = () => {\n      const isDoubleClick = countRef.current + 1 === 2;\n      const timerIsPresent = timerRef.current;\n\n      if (timerIsPresent && isDoubleClick) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n        countRef.current = 0;\n\n        if (inputCallbackRef.current) {\n          inputCallbackRef.current();\n        }\n      }\n\n      if (!timerIsPresent) {\n        countRef.current = countRef.current + 1;\n        timerRef.current = setTimeout(() => {\n          clearTimeout(timerRef.current);\n          timerRef.current = null;\n          countRef.current = 0;\n        }, 300);\n      }\n    };\n\n    if (elem) {\n      elem.addEventListener(\"click\", handler);\n    }\n\n    return () => {\n      if (elem) {\n        elem.removeEventListener(\"click\", handler);\n      }\n    };\n  }, [elem]);\n  return [callbackRef, elem];\n};\n\nexport default useDoubleClick;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/layout/useDoubleClick.js"],"names":["useState","useRef","useCallback","useEffect","useDoubleClick","callback","elem","setElem","countRef","timerRef","inputCallbackRef","callbackRef","node","current","handler","isDoubleClick","timerIsPresent","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,SAAxC,QAAyD,OAAzD;;AAEA,MAAMC,cAAc,GAAGC,QAAQ,IAAI;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMQ,QAAQ,GAAGP,MAAM,CAAC,CAAD,CAAvB;AACA,QAAMQ,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMS,gBAAgB,GAAGT,MAAM,CAAC,IAAD,CAA/B;AACA,QAAMU,WAAW,GAAGT,WAAW,CAACU,IAAI,IAAI;AACtCL,IAAAA,OAAO,CAACK,IAAD,CAAP;AACAD,IAAAA,WAAW,CAACE,OAAZ,GAAsBD,IAAtB;AACD,GAH8B,EAG5B,EAH4B,CAA/B;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,gBAAgB,CAACG,OAAjB,GAA2BR,QAA3B;AACD,GAFQ,CAAT;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAG,MAAM;AACpB,YAAMC,aAAa,GAAGP,QAAQ,CAACK,OAAT,GAAmB,CAAnB,KAAyB,CAA/C;AACA,YAAMG,cAAc,GAAGP,QAAQ,CAACI,OAAhC;;AACA,UAAIG,cAAc,IAAID,aAAtB,EAAqC;AACnCE,QAAAA,YAAY,CAACR,QAAQ,CAACI,OAAV,CAAZ;AACAJ,QAAAA,QAAQ,CAACI,OAAT,GAAmB,IAAnB;AACAL,QAAAA,QAAQ,CAACK,OAAT,GAAmB,CAAnB;;AACA,YAAIH,gBAAgB,CAACG,OAArB,EAA8B;AAC5BH,UAAAA,gBAAgB,CAACG,OAAjB;AACD;AACF;;AACD,UAAI,CAACG,cAAL,EAAqB;AACnBR,QAAAA,QAAQ,CAACK,OAAT,GAAmBL,QAAQ,CAACK,OAAT,GAAmB,CAAtC;AACAJ,QAAAA,QAAQ,CAACI,OAAT,GAAmBK,UAAU,CAAC,MAAM;AAClCD,UAAAA,YAAY,CAACR,QAAQ,CAACI,OAAV,CAAZ;AACAJ,UAAAA,QAAQ,CAACI,OAAT,GAAmB,IAAnB;AACAL,UAAAA,QAAQ,CAACK,OAAT,GAAmB,CAAnB;AACD,SAJ4B,EAI1B,GAJ0B,CAA7B;AAKD;AACF,KAnBD;;AAoBA,QAAIP,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACa,gBAAL,CAAsB,OAAtB,EAA+BL,OAA/B;AACD;;AAED,WAAO,MAAM;AACX,UAAIR,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACc,mBAAL,CAAyB,OAAzB,EAAkCN,OAAlC;AACD;AACF,KAJD;AAKD,GA9BQ,EA8BN,CAACR,IAAD,CA9BM,CAAT;AAgCA,SAAO,CAACK,WAAD,EAAcL,IAAd,CAAP;AACD,CA/CD;;AAiDA,eAAeF,cAAf","sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\n\nconst useDoubleClick = callback => {\n  const [elem, setElem] = useState(null);\n  const countRef = useRef(0);\n  const timerRef = useRef(null);\n  const inputCallbackRef = useRef(null);\n  const callbackRef = useCallback(node => {\n    setElem(node);\n    callbackRef.current = node;\n  }, []);\n\n  useEffect(() => {\n    inputCallbackRef.current = callback;\n  });\n\n  useEffect(() => {\n    const handler = () => {\n      const isDoubleClick = countRef.current + 1 === 2;\n      const timerIsPresent = timerRef.current;\n      if (timerIsPresent && isDoubleClick) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n        countRef.current = 0;\n        if (inputCallbackRef.current) {\n          inputCallbackRef.current();\n        }\n      }\n      if (!timerIsPresent) {\n        countRef.current = countRef.current + 1;\n        timerRef.current = setTimeout(() => {\n          clearTimeout(timerRef.current);\n          timerRef.current = null;\n          countRef.current = 0;\n        }, 300);\n      }\n    }\n    if (elem) {\n      elem.addEventListener(\"click\", handler);\n    }\n\n    return () => {\n      if (elem) {\n        elem.removeEventListener(\"click\", handler);\n      }\n    };\n  }, [elem]);\n\n  return [callbackRef, elem];\n};\n\nexport default useDoubleClick;\n"]},"metadata":{},"sourceType":"module"}