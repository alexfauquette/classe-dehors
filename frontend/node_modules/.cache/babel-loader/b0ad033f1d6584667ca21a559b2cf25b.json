{"ast":null,"code":"import _slicedToArray from\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useRef,useCallback,useEffect}from'react';var useDoubleClick=function useDoubleClick(callback){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),elem=_useState2[0],setElem=_useState2[1];var countRef=useRef(0);var timerRef=useRef(null);var inputCallbackRef=useRef(null);var callbackRef=useCallback(function(node){setElem(node);callbackRef.current=node;},[]);useEffect(function(){inputCallbackRef.current=callback;});useEffect(function(){var handler=function handler(){var isDoubleClick=countRef.current+1===2;var timerIsPresent=timerRef.current;if(timerIsPresent&&isDoubleClick){clearTimeout(timerRef.current);timerRef.current=null;countRef.current=0;if(inputCallbackRef.current){inputCallbackRef.current();}}if(!timerIsPresent){countRef.current=countRef.current+1;timerRef.current=setTimeout(function(){clearTimeout(timerRef.current);timerRef.current=null;countRef.current=0;},300);}};if(elem){elem.addEventListener(\"click\",handler);}return function(){if(elem){elem.removeEventListener(\"click\",handler);}};},[elem]);return[callbackRef,elem];};export default useDoubleClick;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/layout/useDoubleClick.js"],"names":["useState","useRef","useCallback","useEffect","useDoubleClick","callback","elem","setElem","countRef","timerRef","inputCallbackRef","callbackRef","node","current","handler","isDoubleClick","timerIsPresent","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"iKAAA,OAASA,QAAT,CAAmBC,MAAnB,CAA2BC,WAA3B,CAAwCC,SAAxC,KAAyD,OAAzD,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,QAAQ,CAAI,eACTL,QAAQ,CAAC,IAAD,CADC,wCAC1BM,IAD0B,eACpBC,OADoB,eAEjC,GAAMC,CAAAA,QAAQ,CAAGP,MAAM,CAAC,CAAD,CAAvB,CACA,GAAMQ,CAAAA,QAAQ,CAAGR,MAAM,CAAC,IAAD,CAAvB,CACA,GAAMS,CAAAA,gBAAgB,CAAGT,MAAM,CAAC,IAAD,CAA/B,CACA,GAAMU,CAAAA,WAAW,CAAGT,WAAW,CAAC,SAAAU,IAAI,CAAI,CACtCL,OAAO,CAACK,IAAD,CAAP,CACAD,WAAW,CAACE,OAAZ,CAAsBD,IAAtB,CACD,CAH8B,CAG5B,EAH4B,CAA/B,CAKAT,SAAS,CAAC,UAAM,CACdO,gBAAgB,CAACG,OAAjB,CAA2BR,QAA3B,CACD,CAFQ,CAAT,CAIAF,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAMC,CAAAA,aAAa,CAAGP,QAAQ,CAACK,OAAT,CAAmB,CAAnB,GAAyB,CAA/C,CACA,GAAMG,CAAAA,cAAc,CAAGP,QAAQ,CAACI,OAAhC,CACA,GAAIG,cAAc,EAAID,aAAtB,CAAqC,CACnCE,YAAY,CAACR,QAAQ,CAACI,OAAV,CAAZ,CACAJ,QAAQ,CAACI,OAAT,CAAmB,IAAnB,CACAL,QAAQ,CAACK,OAAT,CAAmB,CAAnB,CACA,GAAIH,gBAAgB,CAACG,OAArB,CAA8B,CAC5BH,gBAAgB,CAACG,OAAjB,GACD,CACF,CACD,GAAI,CAACG,cAAL,CAAqB,CACnBR,QAAQ,CAACK,OAAT,CAAmBL,QAAQ,CAACK,OAAT,CAAmB,CAAtC,CACAJ,QAAQ,CAACI,OAAT,CAAmBK,UAAU,CAAC,UAAM,CAClCD,YAAY,CAACR,QAAQ,CAACI,OAAV,CAAZ,CACAJ,QAAQ,CAACI,OAAT,CAAmB,IAAnB,CACAL,QAAQ,CAACK,OAAT,CAAmB,CAAnB,CACD,CAJ4B,CAI1B,GAJ0B,CAA7B,CAKD,CACF,CAnBD,CAoBA,GAAIP,IAAJ,CAAU,CACRA,IAAI,CAACa,gBAAL,CAAsB,OAAtB,CAA+BL,OAA/B,EACD,CAED,MAAO,WAAM,CACX,GAAIR,IAAJ,CAAU,CACRA,IAAI,CAACc,mBAAL,CAAyB,OAAzB,CAAkCN,OAAlC,EACD,CACF,CAJD,CAKD,CA9BQ,CA8BN,CAACR,IAAD,CA9BM,CAAT,CAgCA,MAAO,CAACK,WAAD,CAAcL,IAAd,CAAP,CACD,CA/CD,CAiDA,cAAeF,CAAAA,cAAf","sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\n\nconst useDoubleClick = callback => {\n  const [elem, setElem] = useState(null);\n  const countRef = useRef(0);\n  const timerRef = useRef(null);\n  const inputCallbackRef = useRef(null);\n  const callbackRef = useCallback(node => {\n    setElem(node);\n    callbackRef.current = node;\n  }, []);\n\n  useEffect(() => {\n    inputCallbackRef.current = callback;\n  });\n\n  useEffect(() => {\n    const handler = () => {\n      const isDoubleClick = countRef.current + 1 === 2;\n      const timerIsPresent = timerRef.current;\n      if (timerIsPresent && isDoubleClick) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n        countRef.current = 0;\n        if (inputCallbackRef.current) {\n          inputCallbackRef.current();\n        }\n      }\n      if (!timerIsPresent) {\n        countRef.current = countRef.current + 1;\n        timerRef.current = setTimeout(() => {\n          clearTimeout(timerRef.current);\n          timerRef.current = null;\n          countRef.current = 0;\n        }, 300);\n      }\n    }\n    if (elem) {\n      elem.addEventListener(\"click\", handler);\n    }\n\n    return () => {\n      if (elem) {\n        elem.removeEventListener(\"click\", handler);\n      }\n    };\n  }, [elem]);\n\n  return [callbackRef, elem];\n};\n\nexport default useDoubleClick;\n"]},"metadata":{},"sourceType":"module"}