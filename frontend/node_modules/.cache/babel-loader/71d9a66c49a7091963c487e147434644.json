{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js\";\nimport React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport { FieldTitle, InputHelperText } from \"react-admin\"; // import MarkdownInput from \"ra-input-markdown\";\n\nimport PairLocationInput from \"../../pair/PairLocationInput\";\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nconst styles = {};\n\nconst MarkdownInput = ({\n  source\n}) => {\n  const {\n    input: {\n      value,\n      onChange\n    },\n    // meta: { touched, error },\n    isRequired\n  } = useInput(source); // const [value, setValue] = useState(\"\");\n\n  const [tab, setTab] = useState(\"write\"); // useEffect(() => {\n  //   setValue(value);\n  // }, []);\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n  });\n\n  const handleValueChange = value => {\n    // setValue(value);\n    onChange(value);\n  };\n\n  return /*#__PURE__*/React.createElement(ReactMde, {\n    onChange: value => handleValueChange(value),\n    onTabChange: tab => setTab(tab),\n    value: value,\n    generateMarkdownPreview: markdown => Promise.resolve(converter.makeHtml(markdown)),\n    selectedTab: tab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  });\n};\n\nexport const validatePlaceForm = values => {\n  const errors = {};\n  console.log(values);\n\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n\n  return errors;\n};\nexport const PlaceFields = ({ ...props\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }\n}, \"Merci de remplir tous les champs\"), /*#__PURE__*/React.createElement(PairLocationInput, {\n  label: \"Adresse\",\n  source: \"pair:hasPostalAddress\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(TextInput, {\n  label: \"Nom\",\n  source: \"pair:label\",\n  fullWidth: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(MarkdownInput, Object.assign({\n  multiline: true,\n  label: \"Description\",\n  source: \"pair:description\",\n  fullWidth: true,\n  defaultValue: \"Ce lieu est sp\\xE9cifique, car ...\"\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }\n})));\nexport const PlaceForm = ({\n  mode,\n  ...rest\n}) => /*#__PURE__*/React.createElement(SimpleForm, Object.assign({}, rest, {\n  redirect: \"show\",\n  validate: validatePlaceForm,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(PlaceFields, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }\n}));\nexport default PlaceForm;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceForm.js"],"names":["React","useState","SimpleForm","TextInput","useInput","FieldTitle","InputHelperText","PairLocationInput","ReactMde","Showdown","styles","MarkdownInput","source","input","value","onChange","isRequired","tab","setTab","converter","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","handleValueChange","markdown","Promise","resolve","makeHtml","validatePlaceForm","values","errors","console","log","PlaceFields","props","PlaceForm","mode","rest"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SimpleForm, TextInput, useInput } from \"react-admin\";\nimport { FieldTitle, InputHelperText } from \"react-admin\";\n// import MarkdownInput from \"ra-input-markdown\";\nimport PairLocationInput from \"../../pair/PairLocationInput\";\n\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\n\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nconst styles = {};\nconst MarkdownInput = ({ source }) => {\n  const {\n    input: { value, onChange },\n    // meta: { touched, error },\n    isRequired,\n  } = useInput(source);\n  // const [value, setValue] = useState(\"\");\n  const [tab, setTab] = useState(\"write\");\n\n  // useEffect(() => {\n  //   setValue(value);\n  // }, []);\n\n  const converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true,\n  });\n  const handleValueChange = (value) => {\n    // setValue(value);\n    onChange(value);\n  };\n\n  return (\n    <ReactMde\n      onChange={(value) => handleValueChange(value)}\n      onTabChange={(tab) => setTab(tab)}\n      value={value}\n      generateMarkdownPreview={(markdown) =>\n        Promise.resolve(converter.makeHtml(markdown))\n      }\n      selectedTab={tab}\n    />\n  );\n};\n\nexport const validatePlaceForm = (values) => {\n  const errors = {};\n  console.log(values);\n  if (!values[\"pair:hasPostalAddress\"]) {\n    errors[\"pair:hasPostalAddress\"] = \"required\";\n  }\n  if (!values[\"pair:label\"]) {\n    errors[\"pair:label\"] = \"required\";\n  }\n  if (!values[\"pair:description\"]) {\n    errors[\"pair:description\"] = \"required\";\n  }\n  return errors;\n};\nexport const PlaceFields = ({ ...props }) => (\n  <>\n    <p>Merci de remplir tous les champs</p>\n    <PairLocationInput\n      label=\"Adresse\"\n      source=\"pair:hasPostalAddress\"\n      fullWidth\n    />\n    <TextInput label=\"Nom\" source=\"pair:label\" fullWidth />\n    <MarkdownInput\n      multiline\n      label=\"Description\"\n      source=\"pair:description\"\n      fullWidth\n      defaultValue=\"Ce lieu est spÃ©cifique, car ...\"\n      {...props}\n    />\n  </>\n);\n\nexport const PlaceForm = ({ mode, ...rest }) => (\n  <SimpleForm {...rest} redirect=\"show\" validate={validatePlaceForm}>\n    <PlaceFields />\n  </SimpleForm>\n);\n\nexport default PlaceForm;\n"]},"metadata":{},"sourceType":"module"}