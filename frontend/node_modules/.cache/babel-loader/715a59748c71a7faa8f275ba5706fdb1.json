{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { TRACK_TYPES } from './constants';\n\nclass MatomoTracker {\n  constructor(userOptions) {\n    if (!userOptions.urlBase) {\n      throw new Error('Matomo urlBase is required.');\n    }\n\n    if (!userOptions.siteId) {\n      throw new Error('Matomo siteId is required.');\n    }\n\n    this.initialize(userOptions);\n  }\n\n  initialize({\n    urlBase,\n    siteId,\n    userId,\n    trackerUrl,\n    srcUrl,\n    disabled,\n    heartBeat,\n    linkTracking = true,\n    configurations = {}\n  }) {\n    var _a;\n\n    const normalizedUrlBase = urlBase[urlBase.length - 1] !== '/' ? `${urlBase}/` : urlBase;\n\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    window._paq = window._paq || [];\n\n    if (window._paq.length !== 0) {\n      return;\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    this.pushInstruction('setTrackerUrl', trackerUrl !== null && trackerUrl !== void 0 ? trackerUrl : `${normalizedUrlBase}matomo.php`);\n    this.pushInstruction('setSiteId', siteId);\n\n    if (userId) {\n      this.pushInstruction('setUserId', userId);\n    }\n\n    Object.entries(configurations).forEach(entry => {\n      this.pushInstruction(entry[0], entry[1]);\n    }); // accurately measure the time spent on the last pageview of a visit\n\n    if (!heartBeat || heartBeat && heartBeat.active) {\n      this.enableHeartBeatTimer((_a = heartBeat && heartBeat.seconds) !== null && _a !== void 0 ? _a : 15);\n    } // // measure outbound links and downloads\n    // // might not work accurately on SPAs because new links (dom elements) are created dynamically without a server-side page reload.\n\n\n    this.enableLinkTracking(linkTracking);\n    const doc = document;\n    const scriptElement = doc.createElement('script');\n    const scripts = doc.getElementsByTagName('script')[0];\n    scriptElement.type = 'text/javascript';\n    scriptElement.async = true;\n    scriptElement.defer = true;\n    scriptElement.src = srcUrl || `${normalizedUrlBase}matomo.js`;\n\n    if (scripts && scripts.parentNode) {\n      scripts.parentNode.insertBefore(scriptElement, scripts);\n    }\n  }\n\n  enableHeartBeatTimer(seconds) {\n    this.pushInstruction('enableHeartBeatTimer', seconds);\n  }\n\n  enableLinkTracking(active) {\n    this.pushInstruction('enableLinkTracking', active);\n  }\n\n  trackEventsForElements(elements) {\n    if (elements.length) {\n      elements.forEach(element => {\n        element.addEventListener('click', () => {\n          const {\n            matomoCategory,\n            matomoAction,\n            matomoName,\n            matomoValue\n          } = element.dataset;\n\n          if (matomoCategory && matomoAction) {\n            this.trackEvent({\n              category: matomoCategory,\n              action: matomoAction,\n              name: matomoName,\n              value: Number(matomoValue)\n            });\n          } else {\n            throw new Error(`Error: data-matomo-category and data-matomo-action are required.`);\n          }\n        });\n      });\n    }\n  } // Tracks events based on data attributes\n\n\n  trackEvents() {\n    const matchString = '[data-matomo-event=\"click\"]';\n    let firstTime = false;\n\n    if (!this.mutationObserver) {\n      firstTime = true;\n      this.mutationObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          mutation.addedNodes.forEach(node => {\n            // only track HTML elements\n            if (!(node instanceof HTMLElement)) return; // check the inserted element for being a code snippet\n\n            if (node.matches(matchString)) {\n              this.trackEventsForElements([node]);\n            }\n\n            const elements = Array.from(node.querySelectorAll(matchString));\n            this.trackEventsForElements(elements);\n          });\n        });\n      });\n    }\n\n    this.mutationObserver.observe(document, {\n      childList: true,\n      subtree: true\n    }); // Now track all already existing elements\n\n    if (firstTime) {\n      const elements = Array.from(document.querySelectorAll(matchString));\n      this.trackEventsForElements(elements);\n    }\n  }\n\n  stopObserving() {\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n  } // Tracks events\n  // https://matomo.org/docs/event-tracking/#tracking-events\n\n\n  trackEvent(_a) {\n    var {\n      category,\n      action,\n      name,\n      value\n    } = _a,\n        otherParams = __rest(_a, [\"category\", \"action\", \"name\", \"value\"]);\n\n    if (category && action) {\n      this.track(Object.assign({\n        data: [TRACK_TYPES.TRACK_EVENT, category, action, name, value]\n      }, otherParams));\n    } else {\n      throw new Error(`Error: category and action are required.`);\n    }\n  } // Tracks site search\n  // https://developer.matomo.org/guides/tracking-javascript-guide#internal-search-tracking\n\n\n  trackSiteSearch(_a) {\n    var {\n      keyword,\n      category,\n      count\n    } = _a,\n        otherParams = __rest(_a, [\"keyword\", \"category\", \"count\"]);\n\n    if (keyword) {\n      this.track(Object.assign({\n        data: [TRACK_TYPES.TRACK_SEARCH, keyword, category, count]\n      }, otherParams));\n    } else {\n      throw new Error(`Error: keyword is required.`);\n    }\n  } // Tracks outgoing links to other sites and downloads\n  // https://developer.matomo.org/guides/tracking-javascript-guide#enabling-download-outlink-tracking\n\n\n  trackLink({\n    href,\n    linkType = 'link'\n  }) {\n    this.pushInstruction(TRACK_TYPES.TRACK_LINK, href, linkType);\n  } // Tracks page views\n  // https://developer.matomo.org/guides/spa-tracking#tracking-a-new-page-view\n\n\n  trackPageView(params) {\n    this.track(Object.assign({\n      data: [TRACK_TYPES.TRACK_VIEW]\n    }, params));\n  } // Adds a product to an Ecommerce order to be tracked via trackEcommerceOrder.\n  // https://matomo.org/docs/ecommerce-analytics\n  // https://matomo.org/docs/ecommerce-analytics/#1-addecommerceitemproductsku-productname-productcategory-price-quantity\n\n\n  addEcommerceItem({\n    sku,\n    productName,\n    productCategory,\n    productPrice = 0.0,\n    productQuantity = 1\n  }) {\n    this.pushInstruction('addEcommerceItem', sku, productName, productCategory, productPrice, productQuantity);\n  } // Tracks an Ecommerce order containing items added via addEcommerceItem.\n  // https://matomo.org/docs/ecommerce-analytics/#2-trackecommerceorderorderid-revenue-subtotal-tax-shipping-discount\n\n\n  trackEcommerceOrder({\n    orderId,\n    orderRevenue,\n    orderSubTotal,\n    taxAmount,\n    shippingAmount,\n    discountOffered = false\n  }) {\n    this.track({\n      data: [TRACK_TYPES.TRACK_ECOMMERCE_ORDER, orderId, orderRevenue, orderSubTotal, taxAmount, shippingAmount, discountOffered]\n    });\n  } // Tracks updates to an Ecommerce Cart before an actual purchase.\n  // This will replace currently tracked information of the cart. Always include all items of the updated cart!\n  // https://matomo.org/docs/ecommerce-analytics/#example-tracking-an-ecommerce-cart-update-containing-two-products\n\n\n  trackEcommerceCartUpdate(amount) {\n    this.pushInstruction(TRACK_TYPES.TRACK_ECOMMERCE_CART_UPDATE, amount);\n  } // Marks the next page view as an Ecommerce product page.\n  // https://matomo.org/docs/ecommerce-analytics/#example-tracking-a-product-page-view\n\n\n  setEcommerceView({\n    sku,\n    productName,\n    productCategory,\n    productPrice\n  }) {\n    this.pushInstruction('setEcommerceView', sku, productName, productCategory, productPrice);\n  } // Marks the next tracked page view as an Ecommerce category page.\n  // https://matomo.org/docs/ecommerce-analytics/#example-tracking-a-category-page-view\n\n\n  setEcommerceCategoryView(productCategory) {\n    this.setEcommerceView({\n      productCategory,\n      productName: false,\n      sku: false\n    });\n  } // Sends the tracked page/view/search to Matomo\n\n\n  track({\n    data = [],\n    documentTitle = window.document.title,\n    href,\n    customDimensions = false\n  }) {\n    if (data.length) {\n      if (customDimensions && Array.isArray(customDimensions) && customDimensions.length) {\n        customDimensions.map(customDimension => this.pushInstruction('setCustomDimension', customDimension.id, customDimension.value));\n      }\n\n      this.pushInstruction('setCustomUrl', href !== null && href !== void 0 ? href : window.location.href);\n      this.pushInstruction('setDocumentTitle', documentTitle);\n      this.pushInstruction(...data);\n    }\n  }\n  /**\n   * Pushes an instruction to Matomo for execution, this is equivalent to pushing entries into the `_paq` array.\n   *\n   * For example:\n   *\n   * ```ts\n   * pushInstruction('setDocumentTitle', document.title)\n   * ```\n   * Is the equivalent of:\n   *\n   * ```ts\n   * _paq.push(['setDocumentTitle', document.title]);\n   * ```\n   *\n   * @param name The name of the instruction to be executed.\n   * @param args The arguments to pass along with the instruction.\n   */\n\n\n  pushInstruction(name, ...args) {\n    if (typeof window !== 'undefined') {\n      // eslint-disable-next-line\n      window._paq.push([name, ...args]);\n    }\n\n    return this;\n  }\n\n}\n\nexport default MatomoTracker;","map":{"version":3,"sources":["../src/MatomoTracker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { TRACK_TYPES } from './constants';\nclass MatomoTracker {\n    constructor(userOptions) {\n        if (!userOptions.urlBase) {\n            throw new Error('Matomo urlBase is required.');\n        }\n        if (!userOptions.siteId) {\n            throw new Error('Matomo siteId is required.');\n        }\n        this.initialize(userOptions);\n    }\n    initialize({ urlBase, siteId, userId, trackerUrl, srcUrl, disabled, heartBeat, linkTracking = true, configurations = {}, }) {\n        var _a;\n        const normalizedUrlBase = urlBase[urlBase.length - 1] !== '/' ? `${urlBase}/` : urlBase;\n        if (typeof window === 'undefined') {\n            return;\n        }\n        window._paq = window._paq || [];\n        if (window._paq.length !== 0) {\n            return;\n        }\n        if (disabled) {\n            return;\n        }\n        this.pushInstruction('setTrackerUrl', trackerUrl !== null && trackerUrl !== void 0 ? trackerUrl : `${normalizedUrlBase}matomo.php`);\n        this.pushInstruction('setSiteId', siteId);\n        if (userId) {\n            this.pushInstruction('setUserId', userId);\n        }\n        Object.entries(configurations).forEach((entry) => {\n            this.pushInstruction(entry[0], entry[1]);\n        });\n        // accurately measure the time spent on the last pageview of a visit\n        if (!heartBeat || (heartBeat && heartBeat.active)) {\n            this.enableHeartBeatTimer((_a = (heartBeat && heartBeat.seconds)) !== null && _a !== void 0 ? _a : 15);\n        }\n        // // measure outbound links and downloads\n        // // might not work accurately on SPAs because new links (dom elements) are created dynamically without a server-side page reload.\n        this.enableLinkTracking(linkTracking);\n        const doc = document;\n        const scriptElement = doc.createElement('script');\n        const scripts = doc.getElementsByTagName('script')[0];\n        scriptElement.type = 'text/javascript';\n        scriptElement.async = true;\n        scriptElement.defer = true;\n        scriptElement.src = srcUrl || `${normalizedUrlBase}matomo.js`;\n        if (scripts && scripts.parentNode) {\n            scripts.parentNode.insertBefore(scriptElement, scripts);\n        }\n    }\n    enableHeartBeatTimer(seconds) {\n        this.pushInstruction('enableHeartBeatTimer', seconds);\n    }\n    enableLinkTracking(active) {\n        this.pushInstruction('enableLinkTracking', active);\n    }\n    trackEventsForElements(elements) {\n        if (elements.length) {\n            elements.forEach((element) => {\n                element.addEventListener('click', () => {\n                    const { matomoCategory, matomoAction, matomoName, matomoValue, } = element.dataset;\n                    if (matomoCategory && matomoAction) {\n                        this.trackEvent({\n                            category: matomoCategory,\n                            action: matomoAction,\n                            name: matomoName,\n                            value: Number(matomoValue),\n                        });\n                    }\n                    else {\n                        throw new Error(`Error: data-matomo-category and data-matomo-action are required.`);\n                    }\n                });\n            });\n        }\n    }\n    // Tracks events based on data attributes\n    trackEvents() {\n        const matchString = '[data-matomo-event=\"click\"]';\n        let firstTime = false;\n        if (!this.mutationObserver) {\n            firstTime = true;\n            this.mutationObserver = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    mutation.addedNodes.forEach((node) => {\n                        // only track HTML elements\n                        if (!(node instanceof HTMLElement))\n                            return;\n                        // check the inserted element for being a code snippet\n                        if (node.matches(matchString)) {\n                            this.trackEventsForElements([node]);\n                        }\n                        const elements = Array.from(node.querySelectorAll(matchString));\n                        this.trackEventsForElements(elements);\n                    });\n                });\n            });\n        }\n        this.mutationObserver.observe(document, { childList: true, subtree: true });\n        // Now track all already existing elements\n        if (firstTime) {\n            const elements = Array.from(document.querySelectorAll(matchString));\n            this.trackEventsForElements(elements);\n        }\n    }\n    stopObserving() {\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n    }\n    // Tracks events\n    // https://matomo.org/docs/event-tracking/#tracking-events\n    trackEvent(_a) {\n        var { category, action, name, value } = _a, otherParams = __rest(_a, [\"category\", \"action\", \"name\", \"value\"]);\n        if (category && action) {\n            this.track(Object.assign({ data: [TRACK_TYPES.TRACK_EVENT, category, action, name, value] }, otherParams));\n        }\n        else {\n            throw new Error(`Error: category and action are required.`);\n        }\n    }\n    // Tracks site search\n    // https://developer.matomo.org/guides/tracking-javascript-guide#internal-search-tracking\n    trackSiteSearch(_a) {\n        var { keyword, category, count } = _a, otherParams = __rest(_a, [\"keyword\", \"category\", \"count\"]);\n        if (keyword) {\n            this.track(Object.assign({ data: [TRACK_TYPES.TRACK_SEARCH, keyword, category, count] }, otherParams));\n        }\n        else {\n            throw new Error(`Error: keyword is required.`);\n        }\n    }\n    // Tracks outgoing links to other sites and downloads\n    // https://developer.matomo.org/guides/tracking-javascript-guide#enabling-download-outlink-tracking\n    trackLink({ href, linkType = 'link' }) {\n        this.pushInstruction(TRACK_TYPES.TRACK_LINK, href, linkType);\n    }\n    // Tracks page views\n    // https://developer.matomo.org/guides/spa-tracking#tracking-a-new-page-view\n    trackPageView(params) {\n        this.track(Object.assign({ data: [TRACK_TYPES.TRACK_VIEW] }, params));\n    }\n    // Adds a product to an Ecommerce order to be tracked via trackEcommerceOrder.\n    // https://matomo.org/docs/ecommerce-analytics\n    // https://matomo.org/docs/ecommerce-analytics/#1-addecommerceitemproductsku-productname-productcategory-price-quantity\n    addEcommerceItem({ sku, productName, productCategory, productPrice = 0.0, productQuantity = 1, }) {\n        this.pushInstruction('addEcommerceItem', sku, productName, productCategory, productPrice, productQuantity);\n    }\n    // Tracks an Ecommerce order containing items added via addEcommerceItem.\n    // https://matomo.org/docs/ecommerce-analytics/#2-trackecommerceorderorderid-revenue-subtotal-tax-shipping-discount\n    trackEcommerceOrder({ orderId, orderRevenue, orderSubTotal, taxAmount, shippingAmount, discountOffered = false, }) {\n        this.track({\n            data: [\n                TRACK_TYPES.TRACK_ECOMMERCE_ORDER,\n                orderId,\n                orderRevenue,\n                orderSubTotal,\n                taxAmount,\n                shippingAmount,\n                discountOffered,\n            ],\n        });\n    }\n    // Tracks updates to an Ecommerce Cart before an actual purchase.\n    // This will replace currently tracked information of the cart. Always include all items of the updated cart!\n    // https://matomo.org/docs/ecommerce-analytics/#example-tracking-an-ecommerce-cart-update-containing-two-products\n    trackEcommerceCartUpdate(amount) {\n        this.pushInstruction(TRACK_TYPES.TRACK_ECOMMERCE_CART_UPDATE, amount);\n    }\n    // Marks the next page view as an Ecommerce product page.\n    // https://matomo.org/docs/ecommerce-analytics/#example-tracking-a-product-page-view\n    setEcommerceView({ sku, productName, productCategory, productPrice, }) {\n        this.pushInstruction('setEcommerceView', sku, productName, productCategory, productPrice);\n    }\n    // Marks the next tracked page view as an Ecommerce category page.\n    // https://matomo.org/docs/ecommerce-analytics/#example-tracking-a-category-page-view\n    setEcommerceCategoryView(productCategory) {\n        this.setEcommerceView({ productCategory, productName: false, sku: false });\n    }\n    // Sends the tracked page/view/search to Matomo\n    track({ data = [], documentTitle = window.document.title, href, customDimensions = false, }) {\n        if (data.length) {\n            if (customDimensions &&\n                Array.isArray(customDimensions) &&\n                customDimensions.length) {\n                customDimensions.map((customDimension) => this.pushInstruction('setCustomDimension', customDimension.id, customDimension.value));\n            }\n            this.pushInstruction('setCustomUrl', href !== null && href !== void 0 ? href : window.location.href);\n            this.pushInstruction('setDocumentTitle', documentTitle);\n            this.pushInstruction(...data);\n        }\n    }\n    /**\n     * Pushes an instruction to Matomo for execution, this is equivalent to pushing entries into the `_paq` array.\n     *\n     * For example:\n     *\n     * ```ts\n     * pushInstruction('setDocumentTitle', document.title)\n     * ```\n     * Is the equivalent of:\n     *\n     * ```ts\n     * _paq.push(['setDocumentTitle', document.title]);\n     * ```\n     *\n     * @param name The name of the instruction to be executed.\n     * @param args The arguments to pass along with the instruction.\n     */\n    pushInstruction(name, ...args) {\n        if (typeof window !== 'undefined') {\n            // eslint-disable-next-line\n            window._paq.push([name, ...args]);\n        }\n        return this;\n    }\n}\nexport default MatomoTracker;\n//# sourceMappingURL=MatomoTracker.js.map"]},"metadata":{},"sourceType":"module"}