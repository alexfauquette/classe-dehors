{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _createForOfIteratorHelper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar URDNA2015Sync = require('./URDNA2015Sync');\n\nmodule.exports = /*#__PURE__*/function (_URDNA2015Sync) {\n  _inherits(URDNA2012Sync, _URDNA2015Sync);\n\n  var _super = _createSuper(URDNA2012Sync);\n\n  function URDNA2012Sync() {\n    var _this;\n\n    _classCallCheck(this, URDNA2012Sync);\n\n    _this = _super.call(this);\n    _this.name = 'URGNA2012';\n    _this.hashAlgorithm = 'sha1';\n    return _this;\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  _createClass(URDNA2012Sync, [{\n    key: \"modifyFirstDegreeComponent\",\n    value: function modifyFirstDegreeComponent(id, component, key) {\n      if (component.termType !== 'BlankNode') {\n        return component;\n      }\n\n      if (key === 'graph') {\n        return {\n          termType: 'BlankNode',\n          value: '_:g'\n        };\n      }\n\n      return {\n        termType: 'BlankNode',\n        value: component.value === id ? '_:a' : '_:z'\n      };\n    } // helper for getting a related predicate\n\n  }, {\n    key: \"getRelatedPredicate\",\n    value: function getRelatedPredicate(quad) {\n      return quad.predicate.value;\n    } // helper for creating hash to related blank nodes map\n\n  }, {\n    key: \"createHashToRelated\",\n    value: function createHashToRelated(id, issuer) {\n      // 1) Create a hash to related blank nodes map for storing hashes that\n      // identify related blank nodes.\n      var hashToRelated = new Map(); // 2) Get a reference, quads, to the list of quads in the blank node to\n      // quads map for the key identifier.\n\n      var quads = this.blankNodeInfo.get(id).quads; // 3) For each quad in quads:\n\n      var _iterator = _createForOfIteratorHelper(quads),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var quad = _step.value;\n          // 3.1) If the quad's subject is a blank node that does not match\n          // identifier, set hash to the result of the Hash Related Blank Node\n          // algorithm, passing the blank node identifier for subject as related,\n          // quad, path identifier issuer as issuer, and p as position.\n          var position = void 0;\n          var related = void 0;\n\n          if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n            related = quad.subject.value;\n            position = 'p';\n          } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n            // 3.2) Otherwise, if quad's object is a blank node that does not match\n            // identifier, to the result of the Hash Related Blank Node algorithm,\n            // passing the blank node identifier for object as related, quad, path\n            // identifier issuer as issuer, and r as position.\n            related = quad.object.value;\n            position = 'r';\n          } else {\n            // 3.3) Otherwise, continue to the next quad.\n            continue;\n          } // 3.4) Add a mapping of hash to the blank node identifier for the\n          // component that matched (subject or object) to hash to related blank\n          // nodes map, adding an entry as necessary.\n\n\n          var hash = this.hashRelatedBlankNode(related, quad, issuer, position);\n          var entries = hashToRelated.get(hash);\n\n          if (entries) {\n            entries.push(related);\n          } else {\n            hashToRelated.set(hash, [related]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return hashToRelated;\n    }\n  }]);\n\n  return URDNA2012Sync;\n}(URDNA2015Sync);","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/rdf-canonize/lib/URGNA2012Sync.js"],"names":["URDNA2015Sync","require","module","exports","name","hashAlgorithm","id","component","key","termType","value","quad","predicate","issuer","hashToRelated","Map","quads","blankNodeInfo","get","position","related","subject","object","hash","hashRelatedBlankNode","entries","push","set"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AAEAC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE,2BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,IAAL,GAAY,WAAZ;AACA,UAAKC,aAAL,GAAqB,MAArB;AAHY;AAIb,GALH,CAOE;;;AAPF;AAAA;AAAA,WAQE,oCAA2BC,EAA3B,EAA+BC,SAA/B,EAA0CC,GAA1C,EAA+C;AAC7C,UAAGD,SAAS,CAACE,QAAV,KAAuB,WAA1B,EAAuC;AACrC,eAAOF,SAAP;AACD;;AACD,UAAGC,GAAG,KAAK,OAAX,EAAoB;AAClB,eAAO;AACLC,UAAAA,QAAQ,EAAE,WADL;AAELC,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID;;AACD,aAAO;AACLD,QAAAA,QAAQ,EAAE,WADL;AAELC,QAAAA,KAAK,EAAGH,SAAS,CAACG,KAAV,KAAoBJ,EAApB,GAAyB,KAAzB,GAAiC;AAFpC,OAAP;AAID,KAtBH,CAwBE;;AAxBF;AAAA;AAAA,WAyBE,6BAAoBK,IAApB,EAA0B;AACxB,aAAOA,IAAI,CAACC,SAAL,CAAeF,KAAtB;AACD,KA3BH,CA6BE;;AA7BF;AAAA;AAAA,WA8BE,6BAAoBJ,EAApB,EAAwBO,MAAxB,EAAgC;AAC9B;AACA;AACA,UAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB,CAH8B,CAK9B;AACA;;AACA,UAAMC,KAAK,GAAG,KAAKC,aAAL,CAAmBC,GAAnB,CAAuBZ,EAAvB,EAA2BU,KAAzC,CAP8B,CAS9B;;AAT8B,iDAUZA,KAVY;AAAA;;AAAA;AAU9B,4DAAyB;AAAA,cAAfL,IAAe;AACvB;AACA;AACA;AACA;AACA,cAAIQ,QAAQ,SAAZ;AACA,cAAIC,OAAO,SAAX;;AACA,cAAGT,IAAI,CAACU,OAAL,CAAaZ,QAAb,KAA0B,WAA1B,IAAyCE,IAAI,CAACU,OAAL,CAAaX,KAAb,KAAuBJ,EAAnE,EAAuE;AACrEc,YAAAA,OAAO,GAAGT,IAAI,CAACU,OAAL,CAAaX,KAAvB;AACAS,YAAAA,QAAQ,GAAG,GAAX;AACD,WAHD,MAGO,IACLR,IAAI,CAACW,MAAL,CAAYb,QAAZ,KAAyB,WAAzB,IAAwCE,IAAI,CAACW,MAAL,CAAYZ,KAAZ,KAAsBJ,EADzD,EAC6D;AAClE;AACA;AACA;AACA;AACAc,YAAAA,OAAO,GAAGT,IAAI,CAACW,MAAL,CAAYZ,KAAtB;AACAS,YAAAA,QAAQ,GAAG,GAAX;AACD,WARM,MAQA;AACL;AACA;AACD,WArBsB,CAsBvB;AACA;AACA;;;AACA,cAAMI,IAAI,GAAG,KAAKC,oBAAL,CAA0BJ,OAA1B,EAAmCT,IAAnC,EAAyCE,MAAzC,EAAiDM,QAAjD,CAAb;AACA,cAAMM,OAAO,GAAGX,aAAa,CAACI,GAAd,CAAkBK,IAAlB,CAAhB;;AACA,cAAGE,OAAH,EAAY;AACVA,YAAAA,OAAO,CAACC,IAAR,CAAaN,OAAb;AACD,WAFD,MAEO;AACLN,YAAAA,aAAa,CAACa,GAAd,CAAkBJ,IAAlB,EAAwB,CAACH,OAAD,CAAxB;AACD;AACF;AA1C6B;AAAA;AAAA;AAAA;AAAA;;AA4C9B,aAAON,aAAP;AACD;AA3EH;;AAAA;AAAA,EAA6Cd,aAA7C","sourcesContent":["/*\n * Copyright (c) 2016-2020 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    if(key === 'graph') {\n      return {\n        termType: 'BlankNode',\n        value: '_:g'\n      };\n    }\n    return {\n      termType: 'BlankNode',\n      value: (component.value === id ? '_:a' : '_:z')\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    for(const quad of quads) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = this.hashRelatedBlankNode(related, quad, issuer, position);\n      const entries = hashToRelated.get(hash);\n      if(entries) {\n        entries.push(related);\n      } else {\n        hashToRelated.set(hash, [related]);\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}