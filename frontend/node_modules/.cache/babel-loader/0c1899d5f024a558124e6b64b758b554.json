{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceList.js\";\nimport React, { useState } from \"react\";\nimport { // MultiViewsList,\nSimpleList // ListActions,\n} from \"@semapps/archipelago-layout\";\nimport { MapList } from \"@semapps/geo-components\";\nimport { Avatar } from \"@material-ui/core\";\nimport MapIcon from \"@material-ui/icons/Map\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport PlaceIcon from \"@material-ui/icons/Place\";\nimport MarkdownIntroduction from \"../../markdown/MarkdownIntroduction\"; // import { ListActions } from \"react-admin\";\n\nimport { TopToolbar, Button, CreateButton, ExportButton, RefreshButton, useResourceDefinition, Link } from \"react-admin\";\nimport { useLocation } from \"react-router\";\nimport { useMediaQuery } from \"@material-ui/core\";\nimport { List } from \"react-admin\";\n\nconst ListActions = ({\n  bulkActions,\n  basePath,\n  currentSort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  views,\n  currentView,\n  setView\n}) => {\n  const xs = useMediaQuery(theme => theme.breakpoints.down(\"xs\"));\n  const resourceDefinition = useResourceDefinition({});\n  const query = new URLSearchParams(useLocation().search);\n  return /*#__PURE__*/React.createElement(TopToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, views && Object.entries(views).filter(([key]) => key !== currentView).map(([key, view]) => {\n    query.set(\"view\", key);\n    query.set(\"page\", 1);\n    query.set(\"perPage\", view.perPage);\n\n    if (view.sort) {\n      query.set(\"sort\", view.sort.field);\n      query.set(\"order\", view.sort.order);\n    }\n\n    return /*#__PURE__*/React.createElement(Link, {\n      key: key,\n      to: \"?\" + query.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => setView(key),\n      label: view.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, React.createElement(view.icon)));\n  }), bulkActions && React.cloneElement(bulkActions, {\n    basePath,\n    filterValues,\n    resource,\n    selectedIds,\n    onUnselectItems\n  }), filters && React.cloneElement(filters, {\n    resource,\n    showFilter,\n    displayedFilters,\n    filterValues,\n    context: \"button\"\n  }), resourceDefinition.hasCreate && /*#__PURE__*/React.createElement(CreateButton, {\n    basePath: basePath,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 40\n    }\n  }), !xs && exporter !== false && /*#__PURE__*/React.createElement(ExportButton, {\n    disabled: total === 0,\n    resource: resource,\n    sort: currentSort,\n    filter: filterValues,\n    exporter: exporter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), !xs && /*#__PURE__*/React.createElement(RefreshButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }));\n};\n\nconst MultiViewsList = ({\n  children,\n  actions,\n  views,\n  ListComponent,\n  ...otherProps\n}) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has(\"view\") ? query.get(\"view\") : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return /*#__PURE__*/React.createElement(ListComponent, Object.assign({\n    actions: React.cloneElement(actions, {\n      views,\n      currentView,\n      setView,\n      ...otherProps\n    }),\n    pagination: views[currentView].pagination // Set initial values, but use the query string to change these values to avoid a complete refresh\n    ,\n    perPage: views[initialView].perPage,\n    sort: views[initialView].sort\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }), views[currentView].list);\n};\n\nMultiViewsList.defaultProps = {\n  actions: /*#__PURE__*/React.createElement(ListActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }\n  }),\n  ListComponent: List\n};\n\nconst PlaceList = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MarkdownIntroduction, {\n  pageId: \"place-introduction\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(MultiViewsList, Object.assign({\n  views: {\n    map: {\n      label: \"Carte\",\n      icon: MapIcon,\n      perPage: 500,\n      pagination: false,\n      list: /*#__PURE__*/React.createElement(MapList, {\n        latitude: record => {\n          var _record$pairHasPosta;\n\n          return record === null || record === void 0 ? void 0 : (_record$pairHasPosta = record[\"pair:hasPostalAddress\"]) === null || _record$pairHasPosta === void 0 ? void 0 : _record$pairHasPosta[\"pair:latitude\"];\n        },\n        longitude: record => {\n          var _record$pairHasPosta2;\n\n          return record === null || record === void 0 ? void 0 : (_record$pairHasPosta2 = record[\"pair:hasPostalAddress\"]) === null || _record$pairHasPosta2 === void 0 ? void 0 : _record$pairHasPosta2[\"pair:longitude\"];\n        },\n        label: record => record === null || record === void 0 ? void 0 : record[\"pair:label\"],\n        description: record => {\n          var _record$pairHasPosta3;\n\n          return record === null || record === void 0 ? void 0 : (_record$pairHasPosta3 = record[\"pair:hasPostalAddress\"]) === null || _record$pairHasPosta3 === void 0 ? void 0 : _record$pairHasPosta3[\"pair:label\"];\n        },\n        scrollWheelZoom: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      })\n    },\n    list: {\n      label: \"Liste\",\n      icon: ListIcon,\n      sort: {\n        field: \"pair:label\",\n        order: \"DESC\"\n      },\n      perPage: 25,\n      list: /*#__PURE__*/React.createElement(SimpleList, {\n        primaryText: record => record[\"pair:label\"],\n        secondaryText: record => {\n          var _record$pairHasPosta4;\n\n          return (_record$pairHasPosta4 = record[\"pair:hasPostalAddress\"]) === null || _record$pairHasPosta4 === void 0 ? void 0 : _record$pairHasPosta4[\"pair:label\"];\n        },\n        leftAvatar: () => /*#__PURE__*/React.createElement(Avatar, {\n          width: \"100%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(PlaceIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 19\n          }\n        })),\n        linkType: \"show\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      })\n    }\n  } // actions={<ListActions />}\n  ,\n  exporter: false\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }\n})));\n\nexport default PlaceList;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/resources/Place/PlaceList.js"],"names":["React","useState","SimpleList","MapList","Avatar","MapIcon","ListIcon","PlaceIcon","MarkdownIntroduction","TopToolbar","Button","CreateButton","ExportButton","RefreshButton","useResourceDefinition","Link","useLocation","useMediaQuery","List","ListActions","bulkActions","basePath","currentSort","displayedFilters","exporter","filters","filterValues","onUnselectItems","resource","selectedIds","showFilter","total","views","currentView","setView","xs","theme","breakpoints","down","resourceDefinition","query","URLSearchParams","search","Object","entries","filter","key","map","view","set","perPage","sort","field","order","toString","label","createElement","icon","cloneElement","context","hasCreate","MultiViewsList","children","actions","ListComponent","otherProps","initialView","has","get","keys","pagination","list","defaultProps","PlaceList","props","record"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  // MultiViewsList,\n  SimpleList,\n  // ListActions,\n} from \"@semapps/archipelago-layout\";\nimport { MapList } from \"@semapps/geo-components\";\nimport { Avatar } from \"@material-ui/core\";\nimport MapIcon from \"@material-ui/icons/Map\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport PlaceIcon from \"@material-ui/icons/Place\";\nimport MarkdownIntroduction from \"../../markdown/MarkdownIntroduction\";\n// import { ListActions } from \"react-admin\";\n\nimport {\n  TopToolbar,\n  Button,\n  CreateButton,\n  ExportButton,\n  RefreshButton,\n  useResourceDefinition,\n  Link,\n} from \"react-admin\";\n\nimport { useLocation } from \"react-router\";\nimport { useMediaQuery } from \"@material-ui/core\";\nimport { List } from \"react-admin\";\n\nconst ListActions = ({\n  bulkActions,\n  basePath,\n  currentSort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  resource,\n  selectedIds,\n  showFilter,\n  total,\n  views,\n  currentView,\n  setView,\n}) => {\n  const xs = useMediaQuery((theme) => theme.breakpoints.down(\"xs\"));\n  const resourceDefinition = useResourceDefinition({});\n  const query = new URLSearchParams(useLocation().search);\n  return (\n    <TopToolbar>\n      {views &&\n        Object.entries(views)\n          .filter(([key]) => key !== currentView)\n          .map(([key, view]) => {\n            query.set(\"view\", key);\n            query.set(\"page\", 1);\n            query.set(\"perPage\", view.perPage);\n            if (view.sort) {\n              query.set(\"sort\", view.sort.field);\n              query.set(\"order\", view.sort.order);\n            }\n            return (\n              <Link key={key} to={\"?\" + query.toString()}>\n                <Button onClick={() => setView(key)} label={view.label}>\n                  {React.createElement(view.icon)}\n                </Button>\n              </Link>\n            );\n          })}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          basePath,\n          filterValues,\n          resource,\n          selectedIds,\n          onUnselectItems,\n        })}\n      {filters &&\n        React.cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: \"button\",\n        })}\n      {resourceDefinition.hasCreate && <CreateButton basePath={basePath} />}\n\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          resource={resource}\n          sort={currentSort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n\n      {!xs && <RefreshButton />}\n    </TopToolbar>\n  );\n};\n\nconst MultiViewsList = ({\n  children,\n  actions,\n  views,\n  ListComponent,\n  ...otherProps\n}) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has(\"view\")\n    ? query.get(\"view\")\n    : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListComponent\n      actions={React.cloneElement(actions, {\n        views,\n        currentView,\n        setView,\n        ...otherProps,\n      })}\n      pagination={views[currentView].pagination}\n      // Set initial values, but use the query string to change these values to avoid a complete refresh\n      perPage={views[initialView].perPage}\n      sort={views[initialView].sort}\n      {...otherProps}\n    >\n      {views[currentView].list}\n    </ListComponent>\n  );\n};\nMultiViewsList.defaultProps = {\n  actions: <ListActions />,\n  ListComponent: List,\n};\nconst PlaceList = (props) => (\n  <>\n    <MarkdownIntroduction pageId=\"place-introduction\" />\n    <MultiViewsList\n      views={{\n        map: {\n          label: \"Carte\",\n          icon: MapIcon,\n          perPage: 500,\n          pagination: false,\n          list: (\n            <MapList\n              latitude={(record) =>\n                record?.[\"pair:hasPostalAddress\"]?.[\"pair:latitude\"]\n              }\n              longitude={(record) =>\n                record?.[\"pair:hasPostalAddress\"]?.[\"pair:longitude\"]\n              }\n              label={(record) => record?.[\"pair:label\"]}\n              description={(record) =>\n                record?.[\"pair:hasPostalAddress\"]?.[\"pair:label\"]\n              }\n              scrollWheelZoom\n            />\n          ),\n        },\n        list: {\n          label: \"Liste\",\n          icon: ListIcon,\n          sort: { field: \"pair:label\", order: \"DESC\" },\n          perPage: 25,\n          list: (\n            <SimpleList\n              primaryText={(record) => record[\"pair:label\"]}\n              secondaryText={(record) =>\n                record[\"pair:hasPostalAddress\"]?.[\"pair:label\"]\n              }\n              leftAvatar={() => (\n                <Avatar width=\"100%\">\n                  <PlaceIcon />\n                </Avatar>\n              )}\n              linkType=\"show\"\n            />\n          ),\n        },\n      }}\n      // actions={<ListActions />}\n      exporter={false}\n      {...props}\n    />\n  </>\n);\n\nexport default PlaceList;\n"]},"metadata":{},"sourceType":"module"}