{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _objectSpread = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _defineProperty = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"/home/alexandre/dev/classe-dehors/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./context'),\n    isKeyword = _require.isKeyword;\n\nvar graphTypes = require('./graphTypes');\n\nvar types = require('./types');\n\nvar util = require('./util');\n\nvar url = require('./url');\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require2 = require('./nodeMap'),\n    _createNodeMap = _require2.createNodeMap,\n    _mergeNodeMapGraphs = _require2.mergeNodeMapGraphs;\n\nvar api = {};\nmodule.exports = api;\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\n\napi.frameMergedOrDefault = function (input, frame, options) {\n  // create framing state\n  var state = {\n    options: options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  }; // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n\n  var issuer = new util.IdentifierIssuer('_:b');\n\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n\n  state.subjects = state.graphMap[state.graph]; // frame the subjects\n\n  var framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune\n\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(function (id) {\n      return state.bnodeMap[id].length === 1;\n    });\n  } // remove @preserve from results\n\n\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\n\n\napi.frame = function (state, subjects, frame, parent) {\n  var property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  // validate the frame\n  _validateFrame(frame);\n\n  frame = frame[0]; // get flags for current frame\n\n  var options = state.options;\n  var flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  }; // get link for current graph\n\n  if (!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n\n  var link = state.link[state.graph]; // filter out subjects that match the frame\n\n  var matches = _filterSubjects(state, subjects, frame, flags); // add matches to output\n\n\n  var ids = Object.keys(matches).sort();\n\n  var _iterator = _createForOfIteratorHelper(ids),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var id = _step.value;\n      var subject = matches[id];\n      /* Note: In order to treat each top-level match as a compartmentalized\n      result, clear the unique embedded subjects map when the property is null,\n      which only occurs at the top-level. */\n\n      if (property === null) {\n        state.uniqueEmbeds = _defineProperty({}, state.graph, {});\n      } else {\n        state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n      }\n\n      if (flags.embed === '@link' && id in link) {\n        // TODO: may want to also match an existing linked subject against\n        // the current frame ... so different frames could produce different\n        // subjects that are only shared in-memory when the frames are the same\n        // add existing linked subject\n        _addFrameOutput(parent, property, link[id]);\n\n        return \"continue\";\n      } // start output for subject\n\n\n      var output = {\n        '@id': id\n      };\n\n      if (id.indexOf('_:') === 0) {\n        util.addValue(state.bnodeMap, id, output, {\n          propertyIsArray: true\n        });\n      }\n\n      link[id] = output; // validate @embed\n\n      if ((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n        throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n          code: 'invalid @embed value',\n          frame: frame\n        });\n      }\n\n      if (!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n        // skip adding this node object to the top level, as it was\n        // already included in another node object\n        return \"continue\";\n      } // if embed is @never or if a circular reference would be created by an\n      // embed, the subject cannot be embedded, just add the reference;\n      // note that a circular reference won't occur when the embed flag is\n      // `@link` as the above check will short-circuit before reaching this point\n\n\n      if (state.embedded && (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack))) {\n        _addFrameOutput(parent, property, output);\n\n        return \"continue\";\n      } // if only the first (or once) should be embedded\n\n\n      if (state.embedded && (flags.embed == '@first' || flags.embed == '@once') && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n        _addFrameOutput(parent, property, output);\n\n        return \"continue\";\n      } // if only the last match should be embedded\n\n\n      if (flags.embed === '@last') {\n        // remove any existing embed\n        if (id in state.uniqueEmbeds[state.graph]) {\n          _removeEmbed(state, id);\n        }\n      }\n\n      state.uniqueEmbeds[state.graph][id] = {\n        parent: parent,\n        property: property\n      }; // push matching subject onto stack to enable circular embed checks\n\n      state.subjectStack.push({\n        subject: subject,\n        graph: state.graph\n      }); // subject is also the name of a graph\n\n      if (id in state.graphMap) {\n        var recurse = false;\n        var subframe = null;\n\n        if (!('@graph' in frame)) {\n          recurse = state.graph !== '@merged';\n          subframe = {};\n        } else {\n          subframe = frame['@graph'][0];\n          recurse = !(id === '@merged' || id === '@default');\n\n          if (!types.isObject(subframe)) {\n            subframe = {};\n          }\n        }\n\n        if (recurse) {\n          // recurse into graph\n          api.frame(_objectSpread(_objectSpread({}, state), {}, {\n            graph: id,\n            embedded: false\n          }), Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        }\n      } // if frame has @included, recurse over its sub-frame\n\n\n      if ('@included' in frame) {\n        api.frame(_objectSpread(_objectSpread({}, state), {}, {\n          embedded: false\n        }), subjects, frame['@included'], output, '@included');\n      } // iterate over subject properties\n\n\n      var _iterator2 = _createForOfIteratorHelper(Object.keys(subject).sort()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var prop = _step2.value;\n\n          // copy keywords to output\n          if (isKeyword(prop)) {\n            output[prop] = util.clone(subject[prop]);\n\n            if (prop === '@type') {\n              // count bnode values of @type\n              var _iterator5 = _createForOfIteratorHelper(subject['@type']),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var type = _step5.value;\n\n                  if (type.indexOf('_:') === 0) {\n                    util.addValue(state.bnodeMap, type, output, {\n                      propertyIsArray: true\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n\n            continue;\n          } // explicit is on and property isn't in the frame, skip processing\n\n\n          if (flags.explicit && !(prop in frame)) {\n            continue;\n          } // add objects\n\n\n          var _iterator6 = _createForOfIteratorHelper(subject[prop]),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var o = _step6.value;\n\n              var _subframe = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list\n\n\n              if (graphTypes.isList(o)) {\n                var _subframe2 = frame[prop] && frame[prop][0] && frame[prop][0]['@list'] ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // add empty list\n\n\n                var list = {\n                  '@list': []\n                };\n\n                _addFrameOutput(output, prop, list); // add list objects\n\n\n                var src = o['@list'];\n\n                var _iterator7 = _createForOfIteratorHelper(src),\n                    _step7;\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    var oo = _step7.value;\n\n                    if (graphTypes.isSubjectReference(oo)) {\n                      // recurse into subject reference\n                      api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                        embedded: true\n                      }), [oo['@id']], _subframe2, list, '@list');\n                    } else {\n                      // include other values automatically\n                      _addFrameOutput(list, '@list', util.clone(oo));\n                    }\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              } else if (graphTypes.isSubjectReference(o)) {\n                // recurse into subject reference\n                api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                  embedded: true\n                }), [o['@id']], _subframe, output, prop);\n              } else if (_valueMatch(_subframe[0], o)) {\n                // include other values, if they match\n                _addFrameOutput(output, prop, util.clone(o));\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        } // handle defaults\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(Object.keys(frame).sort()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _prop = _step3.value;\n\n          // skip keywords\n          if (_prop === '@type') {\n            if (!types.isObject(frame[_prop][0]) || !('@default' in frame[_prop][0])) {\n              continue;\n            } // allow through default types\n\n          } else if (isKeyword(_prop)) {\n            continue;\n          } // if omit default is off, then include default values for properties\n          // that appear in the next frame but are not in the matching subject\n\n\n          var next = frame[_prop][0] || {};\n\n          var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n\n          if (!omitDefaultOn && !(_prop in output)) {\n            var preserve = '@null';\n\n            if ('@default' in next) {\n              preserve = util.clone(next['@default']);\n            }\n\n            if (!types.isArray(preserve)) {\n              preserve = [preserve];\n            }\n\n            output[_prop] = [{\n              '@preserve': preserve\n            }];\n          }\n        } // if embed reverse values by finding nodes having this subject as a value\n        // of the associated property\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(Object.keys(frame['@reverse'] || {}).sort()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var reverseProp = _step4.value;\n          var _subframe3 = frame['@reverse'][reverseProp];\n\n          for (var _i = 0, _Object$keys = Object.keys(state.subjects); _i < _Object$keys.length; _i++) {\n            var _subject = _Object$keys[_i];\n            var nodeValues = util.getValues(state.subjects[_subject], reverseProp);\n\n            if (nodeValues.some(function (v) {\n              return v['@id'] === id;\n            })) {\n              // node has property referencing this subject, recurse\n              output['@reverse'] = output['@reverse'] || {};\n              util.addValue(output['@reverse'], reverseProp, [], {\n                propertyIsArray: true\n              });\n              api.frame(_objectSpread(_objectSpread({}, state), {}, {\n                embedded: true\n              }), [_subject], _subframe3, output['@reverse'][reverseProp], property);\n            }\n          }\n        } // add output to parent\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack\n\n\n      state.subjectStack.pop();\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\n\n\napi.cleanupNull = function (input, options) {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    var noNulls = input.map(function (v) {\n      return api.cleanupNull(v, options);\n    });\n    return noNulls.filter(function (v) {\n      return v;\n    }); // removes nulls from array\n  }\n\n  if (input === '@null') {\n    return null;\n  }\n\n  if (types.isObject(input)) {\n    // handle in-memory linked nodes\n    if ('@id' in input) {\n      var id = input['@id'];\n\n      if (options.link.hasOwnProperty(id)) {\n        var idx = options.link[id].indexOf(input);\n\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        } // prevent circular visitation\n\n\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    for (var key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n\n  return input;\n};\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\n\n\nfunction _createImplicitFrame(flags) {\n  var frame = {};\n\n  for (var key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n\n  return [frame];\n}\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\n\n\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (var i = subjectStack.length - 1; i >= 0; --i) {\n    var subject = subjectStack[i];\n\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\n\n\nfunction _getFrameFlag(frame, options, name) {\n  var flag = '@' + name;\n  var rval = flag in frame ? frame[flag][0] : options[name];\n\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@once';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link' && rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError('Invalid JSON-LD syntax; invalid value of @embed.', 'jsonld.SyntaxError', {\n        code: 'invalid @embed value',\n        frame: frame\n      });\n    }\n  }\n\n  return rval;\n}\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\n\n\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame: frame\n    });\n  }\n\n  if ('@id' in frame[0]) {\n    var _iterator8 = _createForOfIteratorHelper(util.asArray(frame[0]['@id'])),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var id = _step8.value;\n\n        // @id must be wildcard or an IRI\n        if (!(types.isObject(id) || url.isAbsolute(id)) || types.isString(id) && id.indexOf('_:') === 0) {\n          throw new JsonLdError('Invalid JSON-LD syntax; invalid @id in frame.', 'jsonld.SyntaxError', {\n            code: 'invalid frame',\n            frame: frame\n          });\n        }\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n\n  if ('@type' in frame[0]) {\n    var _iterator9 = _createForOfIteratorHelper(util.asArray(frame[0]['@type'])),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var type = _step9.value;\n\n        // @id must be wildcard or an IRI\n        if (!(types.isObject(type) || url.isAbsolute(type)) || types.isString(type) && type.indexOf('_:') === 0) {\n          throw new JsonLdError('Invalid JSON-LD syntax; invalid @type in frame.', 'jsonld.SyntaxError', {\n            code: 'invalid frame',\n            frame: frame\n          });\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n  }\n}\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\n\n\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  var rval = {};\n\n  var _iterator10 = _createForOfIteratorHelper(subjects),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var id = _step10.value;\n      var subject = state.graphMap[state.graph][id];\n\n      if (_filterSubject(state, subject, frame, flags)) {\n        rval[id] = subject;\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return rval;\n}\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\n\n\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  var wildcard = true;\n  var matchesSome = false;\n\n  for (var key in frame) {\n    var matchThis = false;\n    var nodeValues = util.getValues(subject, key);\n    var isEmpty = util.getValues(frame, key).length === 0;\n\n    if (key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if (types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if (frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n\n      if (!flags.requireAll) {\n        return matchThis;\n      }\n    } else if (key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n\n      if (isEmpty) {\n        if (nodeValues.length > 0) {\n          // don't match on no @type\n          return false;\n        }\n\n        matchThis = true;\n      } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        var _iterator11 = _createForOfIteratorHelper(frame['@type']),\n            _step11;\n\n        try {\n          var _loop2 = function _loop2() {\n            var type = _step11.value;\n\n            if (types.isObject(type) && '@default' in type) {\n              // match on default object\n              matchThis = true;\n            } else {\n              matchThis = matchThis || nodeValues.some(function (tt) {\n                return tt === type;\n              });\n            }\n          };\n\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n\n      if (!flags.requireAll) {\n        return matchThis;\n      }\n    } else if (isKeyword(key)) {\n      continue;\n    } else {\n      var _ret2 = function () {\n        // Force a copy of this frame entry so it can be manipulated\n        var thisFrame = util.getValues(frame, key)[0];\n        var hasDefault = false;\n\n        if (thisFrame) {\n          _validateFrame([thisFrame]);\n\n          hasDefault = '@default' in thisFrame;\n        } // no longer a wildcard pattern if frame has any non-keyword properties\n\n\n        wildcard = false; // skip, but allow match if node has no value for property, and frame has\n        // a default value\n\n        if (nodeValues.length === 0 && hasDefault) {\n          return \"continue\";\n        } // if frame value is empty, don't match if subject has any value\n\n\n        if (nodeValues.length > 0 && isEmpty) {\n          return {\n            v: false\n          };\n        }\n\n        if (thisFrame === undefined) {\n          // node does not match if values is not empty and the value of property\n          // in frame is match none.\n          if (nodeValues.length > 0) {\n            return {\n              v: false\n            };\n          }\n\n          matchThis = true;\n        } else {\n          if (graphTypes.isList(thisFrame)) {\n            var listValue = thisFrame['@list'][0];\n\n            if (graphTypes.isList(nodeValues[0])) {\n              var nodeListValues = nodeValues[0]['@list'];\n\n              if (graphTypes.isValue(listValue)) {\n                // match on any matching value\n                matchThis = nodeListValues.some(function (lv) {\n                  return _valueMatch(listValue, lv);\n                });\n              } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n                matchThis = nodeListValues.some(function (lv) {\n                  return _nodeMatch(state, listValue, lv, flags);\n                });\n              }\n            }\n          } else if (graphTypes.isValue(thisFrame)) {\n            matchThis = nodeValues.some(function (nv) {\n              return _valueMatch(thisFrame, nv);\n            });\n          } else if (graphTypes.isSubjectReference(thisFrame)) {\n            matchThis = nodeValues.some(function (nv) {\n              return _nodeMatch(state, thisFrame, nv, flags);\n            });\n          } else if (types.isObject(thisFrame)) {\n            matchThis = nodeValues.length > 0;\n          } else {\n            matchThis = false;\n          }\n        }\n      }();\n\n      if (_ret2 === \"continue\") continue;\n      if (typeof _ret2 === \"object\") return _ret2.v;\n    } // all non-defaulted values must match if requireAll is set\n\n\n    if (!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  } // return true if wildcard or subject matches some properties\n\n\n  return wildcard || matchesSome;\n}\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\n\n\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  var embeds = state.uniqueEmbeds[state.graph];\n  var embed = embeds[id];\n  var parent = embed.parent;\n  var property = embed.property; // create reference to replace embed\n\n  var subject = {\n    '@id': id\n  }; // remove existing embed\n\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (var i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    var useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  } // recursively remove dependent dangling embeds\n\n\n  var removeDependents = function removeDependents(id) {\n    // get embed keys as a separate array to enable deleting keys in map\n    var ids = Object.keys(embeds);\n\n    for (var _i2 = 0, _ids = ids; _i2 < _ids.length; _i2++) {\n      var next = _ids[_i2];\n\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n\n  removeDependents(id);\n}\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\n\n\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if (types.isArray(input)) {\n    return input.map(function (value) {\n      return _cleanupPreserve(value, options);\n    });\n  }\n\n  if (types.isObject(input)) {\n    // remove @preserve\n    if ('@preserve' in input) {\n      return input['@preserve'][0];\n    } // skip @values\n\n\n    if (graphTypes.isValue(input)) {\n      return input;\n    } // recurse through @lists\n\n\n    if (graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    } // handle in-memory linked nodes\n\n\n    if ('@id' in input) {\n      var id = input['@id'];\n\n      if (options.link.hasOwnProperty(id)) {\n        var idx = options.link[id].indexOf(input);\n\n        if (idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        } // prevent circular visitation\n\n\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    } // recurse through properties\n\n\n    for (var prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if (prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n\n  return input;\n}\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\n\n\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\n\n\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n\n  var nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\n\n\nfunction _valueMatch(pattern, value) {\n  var v1 = value['@value'];\n  var t1 = value['@type'];\n  var l1 = value['@language'];\n  var v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  var t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  var l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/node_modules/jsonld/lib/frame.js"],"names":["require","isKeyword","graphTypes","types","util","url","JsonLdError","_createNodeMap","createNodeMap","_mergeNodeMapGraphs","mergeNodeMapGraphs","api","module","exports","frameMergedOrDefault","input","frame","options","state","embedded","graph","graphMap","subjectStack","link","bnodeMap","issuer","IdentifierIssuer","merged","subjects","framed","Object","keys","sort","pruneBlankNodeIdentifiers","bnodesToClear","filter","id","length","_cleanupPreserve","parent","property","_validateFrame","flags","embed","_getFrameFlag","explicit","requireAll","hasOwnProperty","matches","_filterSubjects","ids","subject","uniqueEmbeds","_addFrameOutput","output","indexOf","addValue","propertyIsArray","is11","code","_createsCircularReference","_removeEmbed","push","recurse","subframe","isObject","prop","clone","type","o","_createImplicitFrame","isList","list","src","oo","isSubjectReference","_valueMatch","next","omitDefaultOn","preserve","isArray","reverseProp","nodeValues","getValues","some","v","pop","cleanupNull","noNulls","map","idx","key","undefined","subjectToEmbed","i","name","flag","rval","asArray","isAbsolute","isString","_filterSubject","wildcard","matchesSome","matchThis","isEmpty","isEmptyObject","includes","tt","thisFrame","hasDefault","listValue","nodeListValues","isValue","lv","isSubject","_nodeMatch","nv","embeds","compareValues","useArray","removeValue","removeDependents","value","pattern","nodeObject","v1","t1","l1","v2","t2","l2"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;eAEoBA,OAAO,CAAC,WAAD,C;IAApBC,S,YAAAA,S;;AACP,IAAMC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMK,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAMM,WAAW,GAAGN,OAAO,CAAC,eAAD,CAA3B;;gBAIIA,OAAO,CAAC,WAAD,C;IAFMO,c,aAAfC,a;IACoBC,mB,aAApBC,kB;;AAGF,IAAMC,GAAG,GAAG,EAAZ;AACAC,MAAM,CAACC,OAAP,GAAiBF,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,GAAG,CAACG,oBAAJ,GAA2B,UAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,EAA2B;AACpD;AACA,MAAMC,KAAK,GAAG;AACZD,IAAAA,OAAO,EAAPA,OADY;AAEZE,IAAAA,QAAQ,EAAE,KAFE;AAGZC,IAAAA,KAAK,EAAE,UAHK;AAIZC,IAAAA,QAAQ,EAAE;AAAC,kBAAY;AAAb,KAJE;AAKZC,IAAAA,YAAY,EAAE,EALF;AAMZC,IAAAA,IAAI,EAAE,EANM;AAOZC,IAAAA,QAAQ,EAAE;AAPE,GAAd,CAFoD,CAYpD;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIrB,IAAI,CAACsB,gBAAT,CAA0B,KAA1B,CAAf;;AACAnB,EAAAA,cAAc,CAACQ,KAAD,EAAQG,KAAK,CAACG,QAAd,EAAwB,UAAxB,EAAoCI,MAApC,CAAd;;AACA,MAAGR,OAAO,CAACU,MAAX,EAAmB;AACjBT,IAAAA,KAAK,CAACG,QAAN,CAAe,SAAf,IAA4BZ,mBAAmB,CAACS,KAAK,CAACG,QAAP,CAA/C;AACAH,IAAAA,KAAK,CAACE,KAAN,GAAc,SAAd;AACD;;AACDF,EAAAA,KAAK,CAACU,QAAN,GAAiBV,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACE,KAArB,CAAjB,CApBoD,CAsBpD;;AACA,MAAMS,MAAM,GAAG,EAAf;AACAlB,EAAAA,GAAG,CAACK,KAAJ,CAAUE,KAAV,EAAiBY,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACU,QAAlB,EAA4BI,IAA5B,EAAjB,EAAqDhB,KAArD,EAA4Da,MAA5D,EAxBoD,CA0BpD;;AACA,MAAGZ,OAAO,CAACgB,yBAAX,EAAsC;AACpC;AACAhB,IAAAA,OAAO,CAACiB,aAAR,GACEJ,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACM,QAAlB,EAA4BW,MAA5B,CAAmC,UAAAC,EAAE;AAAA,aAAIlB,KAAK,CAACM,QAAN,CAAeY,EAAf,EAAmBC,MAAnB,KAA8B,CAAlC;AAAA,KAArC,CADF;AAED,GA/BmD,CAiCpD;;;AACApB,EAAAA,OAAO,CAACM,IAAR,GAAe,EAAf;AACA,SAAOe,gBAAgB,CAACT,MAAD,EAASZ,OAAT,CAAvB;AACD,CApCD;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAN,GAAG,CAACK,KAAJ,GAAY,UAACE,KAAD,EAAQU,QAAR,EAAkBZ,KAAlB,EAAyBuB,MAAzB,EAAqD;AAAA,MAApBC,QAAoB,uEAAT,IAAS;;AAC/D;AACAC,EAAAA,cAAc,CAACzB,KAAD,CAAd;;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb,CAH+D,CAK/D;;AACA,MAAMC,OAAO,GAAGC,KAAK,CAACD,OAAtB;AACA,MAAMyB,KAAK,GAAG;AACZC,IAAAA,KAAK,EAAEC,aAAa,CAAC5B,KAAD,EAAQC,OAAR,EAAiB,OAAjB,CADR;AAEZ4B,IAAAA,QAAQ,EAAED,aAAa,CAAC5B,KAAD,EAAQC,OAAR,EAAiB,UAAjB,CAFX;AAGZ6B,IAAAA,UAAU,EAAEF,aAAa,CAAC5B,KAAD,EAAQC,OAAR,EAAiB,YAAjB;AAHb,GAAd,CAP+D,CAa/D;;AACA,MAAG,CAACC,KAAK,CAACK,IAAN,CAAWwB,cAAX,CAA0B7B,KAAK,CAACE,KAAhC,CAAJ,EAA4C;AAC1CF,IAAAA,KAAK,CAACK,IAAN,CAAWL,KAAK,CAACE,KAAjB,IAA0B,EAA1B;AACD;;AACD,MAAMG,IAAI,GAAGL,KAAK,CAACK,IAAN,CAAWL,KAAK,CAACE,KAAjB,CAAb,CAjB+D,CAmB/D;;AACA,MAAM4B,OAAO,GAAGC,eAAe,CAAC/B,KAAD,EAAQU,QAAR,EAAkBZ,KAAlB,EAAyB0B,KAAzB,CAA/B,CApB+D,CAsB/D;;;AACA,MAAMQ,GAAG,GAAGpB,MAAM,CAACC,IAAP,CAAYiB,OAAZ,EAAqBhB,IAArB,EAAZ;;AAvB+D,6CAwB/CkB,GAxB+C;AAAA;;AAAA;AAAA;AAAA,UAwBrDd,EAxBqD;AAyB7D,UAAMe,OAAO,GAAGH,OAAO,CAACZ,EAAD,CAAvB;AAEA;AACJ;AACA;;AACI,UAAGI,QAAQ,KAAK,IAAhB,EAAsB;AACpBtB,QAAAA,KAAK,CAACkC,YAAN,uBAAuBlC,KAAK,CAACE,KAA7B,EAAqC,EAArC;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,IAAkCF,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,KAAmC,EAArE;AACD;;AAED,UAAGsB,KAAK,CAACC,KAAN,KAAgB,OAAhB,IAA2BP,EAAE,IAAIb,IAApC,EAA0C;AACxC;AACA;AACA;AAEA;AACA8B,QAAAA,eAAe,CAACd,MAAD,EAASC,QAAT,EAAmBjB,IAAI,CAACa,EAAD,CAAvB,CAAf;;AACA;AACD,OA5C4D,CA8C7D;;;AACA,UAAMkB,MAAM,GAAG;AAAC,eAAOlB;AAAR,OAAf;;AACA,UAAGA,EAAE,CAACmB,OAAH,CAAW,IAAX,MAAqB,CAAxB,EAA2B;AACzBnD,QAAAA,IAAI,CAACoD,QAAL,CAActC,KAAK,CAACM,QAApB,EAA8BY,EAA9B,EAAkCkB,MAAlC,EAA0C;AAACG,UAAAA,eAAe,EAAE;AAAlB,SAA1C;AACD;;AACDlC,MAAAA,IAAI,CAACa,EAAD,CAAJ,GAAWkB,MAAX,CAnD6D,CAqD7D;;AACA,UAAG,CAACZ,KAAK,CAACC,KAAN,KAAgB,QAAhB,IAA4BD,KAAK,CAACC,KAAN,KAAgB,OAA7C,KAAyDzB,KAAK,CAACwC,IAAlE,EAAwE;AACtE,cAAM,IAAIpD,WAAJ,CACJ,kDADI,EAEJ,oBAFI,EAEkB;AAACqD,UAAAA,IAAI,EAAE,sBAAP;AAA+B3C,UAAAA,KAAK,EAALA;AAA/B,SAFlB,CAAN;AAGD;;AAED,UAAG,CAACE,KAAK,CAACC,QAAP,IAAmBD,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,EAAgC2B,cAAhC,CAA+CX,EAA/C,CAAtB,EAA0E;AACxE;AACA;AACA;AACD,OAhE4D,CAkE7D;AACA;AACA;AACA;;;AACA,UAAGlB,KAAK,CAACC,QAAN,KACAuB,KAAK,CAACC,KAAN,KAAgB,QAAhB,IACDiB,yBAAyB,CAACT,OAAD,EAAUjC,KAAK,CAACE,KAAhB,EAAuBF,KAAK,CAACI,YAA7B,CAFxB,CAAH,EAEwE;AACtE+B,QAAAA,eAAe,CAACd,MAAD,EAASC,QAAT,EAAmBc,MAAnB,CAAf;;AACA;AACD,OA3E4D,CA6E7D;;;AACA,UAAGpC,KAAK,CAACC,QAAN,KACCuB,KAAK,CAACC,KAAN,IAAe,QAAf,IAA2BD,KAAK,CAACC,KAAN,IAAe,OAD3C,KAEAzB,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,EAAgC2B,cAAhC,CAA+CX,EAA/C,CAFH,EAEuD;AACrDiB,QAAAA,eAAe,CAACd,MAAD,EAASC,QAAT,EAAmBc,MAAnB,CAAf;;AACA;AACD,OAnF4D,CAqF7D;;;AACA,UAAGZ,KAAK,CAACC,KAAN,KAAgB,OAAnB,EAA4B;AAC1B;AACA,YAAGP,EAAE,IAAIlB,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,CAAT,EAA0C;AACxCyC,UAAAA,YAAY,CAAC3C,KAAD,EAAQkB,EAAR,CAAZ;AACD;AACF;;AAEDlB,MAAAA,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,EAAgCgB,EAAhC,IAAsC;AAACG,QAAAA,MAAM,EAANA,MAAD;AAASC,QAAAA,QAAQ,EAARA;AAAT,OAAtC,CA7F6D,CA+F7D;;AACAtB,MAAAA,KAAK,CAACI,YAAN,CAAmBwC,IAAnB,CAAwB;AAACX,QAAAA,OAAO,EAAPA,OAAD;AAAU/B,QAAAA,KAAK,EAAEF,KAAK,CAACE;AAAvB,OAAxB,EAhG6D,CAkG7D;;AACA,UAAGgB,EAAE,IAAIlB,KAAK,CAACG,QAAf,EAAyB;AACvB,YAAI0C,OAAO,GAAG,KAAd;AACA,YAAIC,QAAQ,GAAG,IAAf;;AACA,YAAG,EAAE,YAAYhD,KAAd,CAAH,EAAyB;AACvB+C,UAAAA,OAAO,GAAG7C,KAAK,CAACE,KAAN,KAAgB,SAA1B;AACA4C,UAAAA,QAAQ,GAAG,EAAX;AACD,SAHD,MAGO;AACLA,UAAAA,QAAQ,GAAGhD,KAAK,CAAC,QAAD,CAAL,CAAgB,CAAhB,CAAX;AACA+C,UAAAA,OAAO,GAAG,EAAE3B,EAAE,KAAK,SAAP,IAAoBA,EAAE,KAAK,UAA7B,CAAV;;AACA,cAAG,CAACjC,KAAK,CAAC8D,QAAN,CAAeD,QAAf,CAAJ,EAA8B;AAC5BA,YAAAA,QAAQ,GAAG,EAAX;AACD;AACF;;AAED,YAAGD,OAAH,EAAY;AACV;AACApD,UAAAA,GAAG,CAACK,KAAJ,iCACME,KADN;AACaE,YAAAA,KAAK,EAAEgB,EADpB;AACwBjB,YAAAA,QAAQ,EAAE;AADlC,cAEEW,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACG,QAAN,CAAee,EAAf,CAAZ,EAAgCJ,IAAhC,EAFF,EAE0C,CAACgC,QAAD,CAF1C,EAEsDV,MAFtD,EAE8D,QAF9D;AAGD;AACF,OAvH4D,CAyH7D;;;AACA,UAAG,eAAetC,KAAlB,EAAyB;AACvBL,QAAAA,GAAG,CAACK,KAAJ,iCACME,KADN;AACaC,UAAAA,QAAQ,EAAE;AADvB,YAEES,QAFF,EAEYZ,KAAK,CAAC,WAAD,CAFjB,EAEgCsC,MAFhC,EAEwC,WAFxC;AAGD,OA9H4D,CAgI7D;;;AAhI6D,kDAiI3CxB,MAAM,CAACC,IAAP,CAAYoB,OAAZ,EAAqBnB,IAArB,EAjI2C;AAAA;;AAAA;AAiI7D,+DAA+C;AAAA,cAArCkC,IAAqC;;AAC7C;AACA,cAAGjE,SAAS,CAACiE,IAAD,CAAZ,EAAoB;AAClBZ,YAAAA,MAAM,CAACY,IAAD,CAAN,GAAe9D,IAAI,CAAC+D,KAAL,CAAWhB,OAAO,CAACe,IAAD,CAAlB,CAAf;;AAEA,gBAAGA,IAAI,KAAK,OAAZ,EAAqB;AACnB;AADmB,0DAEDf,OAAO,CAAC,OAAD,CAFN;AAAA;;AAAA;AAEnB,uEAAoC;AAAA,sBAA1BiB,IAA0B;;AAClC,sBAAGA,IAAI,CAACb,OAAL,CAAa,IAAb,MAAuB,CAA1B,EAA6B;AAC3BnD,oBAAAA,IAAI,CAACoD,QAAL,CACEtC,KAAK,CAACM,QADR,EACkB4C,IADlB,EACwBd,MADxB,EACgC;AAACG,sBAAAA,eAAe,EAAE;AAAlB,qBADhC;AAED;AACF;AAPkB;AAAA;AAAA;AAAA;AAAA;AAQpB;;AACD;AACD,WAf4C,CAiB7C;;;AACA,cAAGf,KAAK,CAACG,QAAN,IAAkB,EAAEqB,IAAI,IAAIlD,KAAV,CAArB,EAAuC;AACrC;AACD,WApB4C,CAsB7C;;;AAtB6C,sDAuB9BmC,OAAO,CAACe,IAAD,CAvBuB;AAAA;;AAAA;AAuB7C,mEAA8B;AAAA,kBAApBG,CAAoB;;AAC5B,kBAAML,SAAQ,GAAIE,IAAI,IAAIlD,KAAR,GAChBA,KAAK,CAACkD,IAAD,CADW,GACFI,oBAAoB,CAAC5B,KAAD,CADpC,CAD4B,CAI5B;;;AACA,kBAAGxC,UAAU,CAACqE,MAAX,CAAkBF,CAAlB,CAAH,EAAyB;AACvB,oBAAML,UAAQ,GACXhD,KAAK,CAACkD,IAAD,CAAL,IAAelD,KAAK,CAACkD,IAAD,CAAL,CAAY,CAAZ,CAAf,IAAiClD,KAAK,CAACkD,IAAD,CAAL,CAAY,CAAZ,EAAe,OAAf,CAAlC,GACElD,KAAK,CAACkD,IAAD,CAAL,CAAY,CAAZ,EAAe,OAAf,CADF,GAEEI,oBAAoB,CAAC5B,KAAD,CAHxB,CADuB,CAMvB;;;AACA,oBAAM8B,IAAI,GAAG;AAAC,2BAAS;AAAV,iBAAb;;AACAnB,gBAAAA,eAAe,CAACC,MAAD,EAASY,IAAT,EAAeM,IAAf,CAAf,CARuB,CAUvB;;;AACA,oBAAMC,GAAG,GAAGJ,CAAC,CAAC,OAAD,CAAb;;AAXuB,4DAYPI,GAZO;AAAA;;AAAA;AAYvB,yEAAqB;AAAA,wBAAXC,EAAW;;AACnB,wBAAGxE,UAAU,CAACyE,kBAAX,CAA8BD,EAA9B,CAAH,EAAsC;AACpC;AACA/D,sBAAAA,GAAG,CAACK,KAAJ,iCACME,KADN;AACaC,wBAAAA,QAAQ,EAAE;AADvB,0BAEE,CAACuD,EAAE,CAAC,KAAD,CAAH,CAFF,EAEeV,UAFf,EAEyBQ,IAFzB,EAE+B,OAF/B;AAGD,qBALD,MAKO;AACL;AACAnB,sBAAAA,eAAe,CAACmB,IAAD,EAAO,OAAP,EAAgBpE,IAAI,CAAC+D,KAAL,CAAWO,EAAX,CAAhB,CAAf;AACD;AACF;AAtBsB;AAAA;AAAA;AAAA;AAAA;AAuBxB,eAvBD,MAuBO,IAAGxE,UAAU,CAACyE,kBAAX,CAA8BN,CAA9B,CAAH,EAAqC;AAC1C;AACA1D,gBAAAA,GAAG,CAACK,KAAJ,iCACME,KADN;AACaC,kBAAAA,QAAQ,EAAE;AADvB,oBAEE,CAACkD,CAAC,CAAC,KAAD,CAAF,CAFF,EAEcL,SAFd,EAEwBV,MAFxB,EAEgCY,IAFhC;AAGD,eALM,MAKA,IAAGU,WAAW,CAACZ,SAAQ,CAAC,CAAD,CAAT,EAAcK,CAAd,CAAd,EAAgC;AACrC;AACAhB,gBAAAA,eAAe,CAACC,MAAD,EAASY,IAAT,EAAe9D,IAAI,CAAC+D,KAAL,CAAWE,CAAX,CAAf,CAAf;AACD;AACF;AA5D4C;AAAA;AAAA;AAAA;AAAA;AA6D9C,SA9L4D,CAgM7D;;AAhM6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAiM3CvC,MAAM,CAACC,IAAP,CAAYf,KAAZ,EAAmBgB,IAAnB,EAjM2C;AAAA;;AAAA;AAiM7D,+DAA6C;AAAA,cAAnCkC,KAAmC;;AAC3C;AACA,cAAGA,KAAI,KAAK,OAAZ,EAAqB;AACnB,gBAAG,CAAC/D,KAAK,CAAC8D,QAAN,CAAejD,KAAK,CAACkD,KAAD,CAAL,CAAY,CAAZ,CAAf,CAAD,IACA,EAAE,cAAclD,KAAK,CAACkD,KAAD,CAAL,CAAY,CAAZ,CAAhB,CADH,EACoC;AAClC;AACD,aAJkB,CAKnB;;AACD,WAND,MAMO,IAAGjE,SAAS,CAACiE,KAAD,CAAZ,EAAoB;AACzB;AACD,WAV0C,CAY3C;AACA;;;AACA,cAAMW,IAAI,GAAG7D,KAAK,CAACkD,KAAD,CAAL,CAAY,CAAZ,KAAkB,EAA/B;;AACA,cAAMY,aAAa,GAAGlC,aAAa,CAACiC,IAAD,EAAO5D,OAAP,EAAgB,aAAhB,CAAnC;;AACA,cAAG,CAAC6D,aAAD,IAAkB,EAAEZ,KAAI,IAAIZ,MAAV,CAArB,EAAwC;AACtC,gBAAIyB,QAAQ,GAAG,OAAf;;AACA,gBAAG,cAAcF,IAAjB,EAAuB;AACrBE,cAAAA,QAAQ,GAAG3E,IAAI,CAAC+D,KAAL,CAAWU,IAAI,CAAC,UAAD,CAAf,CAAX;AACD;;AACD,gBAAG,CAAC1E,KAAK,CAAC6E,OAAN,CAAcD,QAAd,CAAJ,EAA6B;AAC3BA,cAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD;;AACDzB,YAAAA,MAAM,CAACY,KAAD,CAAN,GAAe,CAAC;AAAC,2BAAaa;AAAd,aAAD,CAAf;AACD;AACF,SA3N4D,CA6N7D;AACA;;AA9N6D;AAAA;AAAA;AAAA;AAAA;;AAAA,kDA+NpCjD,MAAM,CAACC,IAAP,CAAYf,KAAK,CAAC,UAAD,CAAL,IAAqB,EAAjC,EAAqCgB,IAArC,EA/NoC;AAAA;;AAAA;AA+N7D,+DAAsE;AAAA,cAA5DiD,WAA4D;AACpE,cAAMjB,UAAQ,GAAGhD,KAAK,CAAC,UAAD,CAAL,CAAkBiE,WAAlB,CAAjB;;AACA,0CAAqBnD,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACU,QAAlB,CAArB,kCAAkD;AAA9C,gBAAMuB,QAAO,mBAAb;AACF,gBAAM+B,UAAU,GACd9E,IAAI,CAAC+E,SAAL,CAAejE,KAAK,CAACU,QAAN,CAAeuB,QAAf,CAAf,EAAwC8B,WAAxC,CADF;;AAEA,gBAAGC,UAAU,CAACE,IAAX,CAAgB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAAC,KAAD,CAAD,KAAajD,EAAjB;AAAA,aAAjB,CAAH,EAA0C;AACxC;AACAkB,cAAAA,MAAM,CAAC,UAAD,CAAN,GAAqBA,MAAM,CAAC,UAAD,CAAN,IAAsB,EAA3C;AACAlD,cAAAA,IAAI,CAACoD,QAAL,CACEF,MAAM,CAAC,UAAD,CADR,EACsB2B,WADtB,EACmC,EADnC,EACuC;AAACxB,gBAAAA,eAAe,EAAE;AAAlB,eADvC;AAEA9C,cAAAA,GAAG,CAACK,KAAJ,iCACME,KADN;AACaC,gBAAAA,QAAQ,EAAE;AADvB,kBAEE,CAACgC,QAAD,CAFF,EAEaa,UAFb,EAEuBV,MAAM,CAAC,UAAD,CAAN,CAAmB2B,WAAnB,CAFvB,EAGEzC,QAHF;AAID;AACF;AACF,SA/O4D,CAiP7D;;AAjP6D;AAAA;AAAA;AAAA;AAAA;;AAkP7Da,MAAAA,eAAe,CAACd,MAAD,EAASC,QAAT,EAAmBc,MAAnB,CAAf,CAlP6D,CAoP7D;;;AACApC,MAAAA,KAAK,CAACI,YAAN,CAAmBgE,GAAnB;AArP6D;;AAwB/D,wDAAqB;AAAA;;AAAA,+BA0DjB;AAoKH;AAtP8D;AAAA;AAAA;AAAA;AAAA;AAuPhE,CAvPD;AAyPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3E,GAAG,CAAC4E,WAAJ,GAAkB,UAACxE,KAAD,EAAQE,OAAR,EAAoB;AACpC;AACA,MAAGd,KAAK,CAAC6E,OAAN,CAAcjE,KAAd,CAAH,EAAyB;AACvB,QAAMyE,OAAO,GAAGzE,KAAK,CAAC0E,GAAN,CAAU,UAAAJ,CAAC;AAAA,aAAI1E,GAAG,CAAC4E,WAAJ,CAAgBF,CAAhB,EAAmBpE,OAAnB,CAAJ;AAAA,KAAX,CAAhB;AACA,WAAOuE,OAAO,CAACrD,MAAR,CAAe,UAAAkD,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAAhB,CAAP,CAFuB,CAEQ;AAChC;;AAED,MAAGtE,KAAK,KAAK,OAAb,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAGZ,KAAK,CAAC8D,QAAN,CAAelD,KAAf,CAAH,EAA0B;AACxB;AACA,QAAG,SAASA,KAAZ,EAAmB;AACjB,UAAMqB,EAAE,GAAGrB,KAAK,CAAC,KAAD,CAAhB;;AACA,UAAGE,OAAO,CAACM,IAAR,CAAawB,cAAb,CAA4BX,EAA5B,CAAH,EAAoC;AAClC,YAAMsD,GAAG,GAAGzE,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiBmB,OAAjB,CAAyBxC,KAAzB,CAAZ;;AACA,YAAG2E,GAAG,KAAK,CAAC,CAAZ,EAAe;AACb;AACA,iBAAOzE,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiBsD,GAAjB,CAAP;AACD,SALiC,CAMlC;;;AACAzE,QAAAA,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiB0B,IAAjB,CAAsB/C,KAAtB;AACD,OARD,MAQO;AACL;AACAE,QAAAA,OAAO,CAACM,IAAR,CAAaa,EAAb,IAAmB,CAACrB,KAAD,CAAnB;AACD;AACF;;AAED,SAAI,IAAM4E,GAAV,IAAiB5E,KAAjB,EAAwB;AACtBA,MAAAA,KAAK,CAAC4E,GAAD,CAAL,GAAahF,GAAG,CAAC4E,WAAJ,CAAgBxE,KAAK,CAAC4E,GAAD,CAArB,EAA4B1E,OAA5B,CAAb;AACD;AACF;;AACD,SAAOF,KAAP;AACD,CAlCD;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuD,oBAAT,CAA8B5B,KAA9B,EAAqC;AACnC,MAAM1B,KAAK,GAAG,EAAd;;AACA,OAAI,IAAM2E,GAAV,IAAiBjD,KAAjB,EAAwB;AACtB,QAAGA,KAAK,CAACiD,GAAD,CAAL,KAAeC,SAAlB,EAA6B;AAC3B5E,MAAAA,KAAK,CAAC,MAAM2E,GAAP,CAAL,GAAmB,CAACjD,KAAK,CAACiD,GAAD,CAAN,CAAnB;AACD;AACF;;AACD,SAAO,CAAC3E,KAAD,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4C,yBAAT,CAAmCiC,cAAnC,EAAmDzE,KAAnD,EAA0DE,YAA1D,EAAwE;AACtE,OAAI,IAAIwE,CAAC,GAAGxE,YAAY,CAACe,MAAb,GAAsB,CAAlC,EAAqCyD,CAAC,IAAI,CAA1C,EAA6C,EAAEA,CAA/C,EAAkD;AAChD,QAAM3C,OAAO,GAAG7B,YAAY,CAACwE,CAAD,CAA5B;;AACA,QAAG3C,OAAO,CAAC/B,KAAR,KAAkBA,KAAlB,IACD+B,OAAO,CAACA,OAAR,CAAgB,KAAhB,MAA2B0C,cAAc,CAAC,KAAD,CAD3C,EACoD;AAClD,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASjD,aAAT,CAAuB5B,KAAvB,EAA8BC,OAA9B,EAAuC8E,IAAvC,EAA6C;AAC3C,MAAMC,IAAI,GAAG,MAAMD,IAAnB;AACA,MAAIE,IAAI,GAAID,IAAI,IAAIhF,KAAR,GAAgBA,KAAK,CAACgF,IAAD,CAAL,CAAY,CAAZ,CAAhB,GAAiC/E,OAAO,CAAC8E,IAAD,CAApD;;AACA,MAAGA,IAAI,KAAK,OAAZ,EAAqB;AACnB;AACA;AACA;AACA;AACA,QAAGE,IAAI,KAAK,IAAZ,EAAkB;AAChBA,MAAAA,IAAI,GAAG,OAAP;AACD,KAFD,MAEO,IAAGA,IAAI,KAAK,KAAZ,EAAmB;AACxBA,MAAAA,IAAI,GAAG,QAAP;AACD,KAFM,MAEA,IAAGA,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,QAA/B,IAA2CA,IAAI,KAAK,OAApD,IACRA,IAAI,KAAK,QADD,IACaA,IAAI,KAAK,OADtB,IACiCA,IAAI,KAAK,OAD7C,EACsD;AAC3D,YAAM,IAAI3F,WAAJ,CACJ,kDADI,EAEJ,oBAFI,EAEkB;AAACqD,QAAAA,IAAI,EAAE,sBAAP;AAA+B3C,QAAAA,KAAK,EAALA;AAA/B,OAFlB,CAAN;AAGD;AACF;;AACD,SAAOiF,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASxD,cAAT,CAAwBzB,KAAxB,EAA+B;AAC7B,MAAG,CAACb,KAAK,CAAC6E,OAAN,CAAchE,KAAd,CAAD,IAAyBA,KAAK,CAACqB,MAAN,KAAiB,CAA1C,IAA+C,CAAClC,KAAK,CAAC8D,QAAN,CAAejD,KAAK,CAAC,CAAD,CAApB,CAAnD,EAA6E;AAC3E,UAAM,IAAIV,WAAJ,CACJ,kEADI,EAEJ,oBAFI,EAEkB;AAACU,MAAAA,KAAK,EAALA;AAAD,KAFlB,CAAN;AAGD;;AAED,MAAG,SAASA,KAAK,CAAC,CAAD,CAAjB,EAAsB;AAAA,gDACJZ,IAAI,CAAC8F,OAAL,CAAalF,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAb,CADI;AAAA;;AAAA;AACpB,6DAA+C;AAAA,YAArCoB,EAAqC;;AAC7C;AACA,YAAG,EAAEjC,KAAK,CAAC8D,QAAN,CAAe7B,EAAf,KAAsB/B,GAAG,CAAC8F,UAAJ,CAAe/D,EAAf,CAAxB,KACAjC,KAAK,CAACiG,QAAN,CAAehE,EAAf,KAAsBA,EAAE,CAACmB,OAAH,CAAW,IAAX,MAAqB,CAD9C,EACkD;AAChD,gBAAM,IAAIjD,WAAJ,CACJ,+CADI,EAEJ,oBAFI,EAEkB;AAACqD,YAAAA,IAAI,EAAE,eAAP;AAAwB3C,YAAAA,KAAK,EAALA;AAAxB,WAFlB,CAAN;AAGD;AACF;AATmB;AAAA;AAAA;AAAA;AAAA;AAUrB;;AAED,MAAG,WAAWA,KAAK,CAAC,CAAD,CAAnB,EAAwB;AAAA,gDACJZ,IAAI,CAAC8F,OAAL,CAAalF,KAAK,CAAC,CAAD,CAAL,CAAS,OAAT,CAAb,CADI;AAAA;;AAAA;AACtB,6DAAmD;AAAA,YAAzCoD,IAAyC;;AACjD;AACA,YAAG,EAAEjE,KAAK,CAAC8D,QAAN,CAAeG,IAAf,KAAwB/D,GAAG,CAAC8F,UAAJ,CAAe/B,IAAf,CAA1B,KACAjE,KAAK,CAACiG,QAAN,CAAehC,IAAf,KAAwBA,IAAI,CAACb,OAAL,CAAa,IAAb,MAAuB,CADlD,EACsD;AACpD,gBAAM,IAAIjD,WAAJ,CACJ,iDADI,EAEJ,oBAFI,EAEkB;AAACqD,YAAAA,IAAI,EAAE,eAAP;AAAwB3C,YAAAA,KAAK,EAALA;AAAxB,WAFlB,CAAN;AAGD;AACF;AATqB;AAAA;AAAA;AAAA;AAAA;AAUvB;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiC,eAAT,CAAyB/B,KAAzB,EAAgCU,QAAhC,EAA0CZ,KAA1C,EAAiD0B,KAAjD,EAAwD;AACtD;AACA,MAAMuD,IAAI,GAAG,EAAb;;AAFsD,+CAGtCrE,QAHsC;AAAA;;AAAA;AAGtD,8DAA0B;AAAA,UAAhBQ,EAAgB;AACxB,UAAMe,OAAO,GAAGjC,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACE,KAArB,EAA4BgB,EAA5B,CAAhB;;AACA,UAAGiE,cAAc,CAACnF,KAAD,EAAQiC,OAAR,EAAiBnC,KAAjB,EAAwB0B,KAAxB,CAAjB,EAAiD;AAC/CuD,QAAAA,IAAI,CAAC7D,EAAD,CAAJ,GAAWe,OAAX;AACD;AACF;AARqD;AAAA;AAAA;AAAA;AAAA;;AAStD,SAAO8C,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,cAAT,CAAwBnF,KAAxB,EAA+BiC,OAA/B,EAAwCnC,KAAxC,EAA+C0B,KAA/C,EAAsD;AACpD;AACA,MAAI4D,QAAQ,GAAG,IAAf;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,OAAI,IAAMZ,GAAV,IAAiB3E,KAAjB,EAAwB;AACtB,QAAIwF,SAAS,GAAG,KAAhB;AACA,QAAMtB,UAAU,GAAG9E,IAAI,CAAC+E,SAAL,CAAehC,OAAf,EAAwBwC,GAAxB,CAAnB;AACA,QAAMc,OAAO,GAAGrG,IAAI,CAAC+E,SAAL,CAAenE,KAAf,EAAsB2E,GAAtB,EAA2BtD,MAA3B,KAAsC,CAAtD;;AAEA,QAAGsD,GAAG,KAAK,KAAX,EAAkB;AAChB;AACA,UAAGxF,KAAK,CAACuG,aAAN,CAAoB1F,KAAK,CAAC,KAAD,CAAL,CAAa,CAAb,KAAmB,EAAvC,CAAH,EAA+C;AAC7CwF,QAAAA,SAAS,GAAG,IAAZ;AACD,OAFD,MAEO,IAAGxF,KAAK,CAAC,KAAD,CAAL,CAAaqB,MAAb,IAAuB,CAA1B,EAA6B;AAClCmE,QAAAA,SAAS,GAAGxF,KAAK,CAAC,KAAD,CAAL,CAAa2F,QAAb,CAAsBzB,UAAU,CAAC,CAAD,CAAhC,CAAZ;AACD;;AACD,UAAG,CAACxC,KAAK,CAACI,UAAV,EAAsB;AACpB,eAAO0D,SAAP;AACD;AACF,KAVD,MAUO,IAAGb,GAAG,KAAK,OAAX,EAAoB;AACzB;AACA;AACAW,MAAAA,QAAQ,GAAG,KAAX;;AACA,UAAGG,OAAH,EAAY;AACV,YAAGvB,UAAU,CAAC7C,MAAX,GAAoB,CAAvB,EAA0B;AACxB;AACA,iBAAO,KAAP;AACD;;AACDmE,QAAAA,SAAS,GAAG,IAAZ;AACD,OAND,MAMO,IAAGxF,KAAK,CAAC,OAAD,CAAL,CAAeqB,MAAf,KAA0B,CAA1B,IACRlC,KAAK,CAACuG,aAAN,CAAoB1F,KAAK,CAAC,OAAD,CAAL,CAAe,CAAf,CAApB,CADK,EACmC;AACxC;AACAwF,QAAAA,SAAS,GAAGtB,UAAU,CAAC7C,MAAX,GAAoB,CAAhC;AACD,OAJM,MAIA;AACL;AADK,qDAEarB,KAAK,CAAC,OAAD,CAFlB;AAAA;;AAAA;AAAA;AAAA,gBAEKoD,IAFL;;AAGH,gBAAGjE,KAAK,CAAC8D,QAAN,CAAeG,IAAf,KAAwB,cAAcA,IAAzC,EAA+C;AAC7C;AACAoC,cAAAA,SAAS,GAAG,IAAZ;AACD,aAHD,MAGO;AACLA,cAAAA,SAAS,GAAGA,SAAS,IAAItB,UAAU,CAACE,IAAX,CAAgB,UAAAwB,EAAE;AAAA,uBAAIA,EAAE,KAAKxC,IAAX;AAAA,eAAlB,CAAzB;AACD;AARE;;AAEL,oEAAkC;AAAA;AAOjC;AATI;AAAA;AAAA;AAAA;AAAA;AAUN;;AACD,UAAG,CAAC1B,KAAK,CAACI,UAAV,EAAsB;AACpB,eAAO0D,SAAP;AACD;AACF,KA5BM,MA4BA,IAAGvG,SAAS,CAAC0F,GAAD,CAAZ,EAAmB;AACxB;AACD,KAFM,MAEA;AAAA;AACL;AACA,YAAMkB,SAAS,GAAGzG,IAAI,CAAC+E,SAAL,CAAenE,KAAf,EAAsB2E,GAAtB,EAA2B,CAA3B,CAAlB;AACA,YAAImB,UAAU,GAAG,KAAjB;;AACA,YAAGD,SAAH,EAAc;AACZpE,UAAAA,cAAc,CAAC,CAACoE,SAAD,CAAD,CAAd;;AACAC,UAAAA,UAAU,GAAG,cAAcD,SAA3B;AACD,SAPI,CASL;;;AACAP,QAAAA,QAAQ,GAAG,KAAX,CAVK,CAYL;AACA;;AACA,YAAGpB,UAAU,CAAC7C,MAAX,KAAsB,CAAtB,IAA2ByE,UAA9B,EAA0C;AACxC;AACD,SAhBI,CAkBL;;;AACA,YAAG5B,UAAU,CAAC7C,MAAX,GAAoB,CAApB,IAAyBoE,OAA5B,EAAqC;AACnC;AAAA,eAAO;AAAP;AACD;;AAED,YAAGI,SAAS,KAAKjB,SAAjB,EAA4B;AAC1B;AACA;AACA,cAAGV,UAAU,CAAC7C,MAAX,GAAoB,CAAvB,EAA0B;AACxB;AAAA,iBAAO;AAAP;AACD;;AACDmE,UAAAA,SAAS,GAAG,IAAZ;AACD,SAPD,MAOO;AACL,cAAGtG,UAAU,CAACqE,MAAX,CAAkBsC,SAAlB,CAAH,EAAiC;AAC/B,gBAAME,SAAS,GAAGF,SAAS,CAAC,OAAD,CAAT,CAAmB,CAAnB,CAAlB;;AACA,gBAAG3G,UAAU,CAACqE,MAAX,CAAkBW,UAAU,CAAC,CAAD,CAA5B,CAAH,EAAqC;AACnC,kBAAM8B,cAAc,GAAG9B,UAAU,CAAC,CAAD,CAAV,CAAc,OAAd,CAAvB;;AAEA,kBAAGhF,UAAU,CAAC+G,OAAX,CAAmBF,SAAnB,CAAH,EAAkC;AAChC;AACAP,gBAAAA,SAAS,GAAGQ,cAAc,CAAC5B,IAAf,CAAoB,UAAA8B,EAAE;AAAA,yBAAItC,WAAW,CAACmC,SAAD,EAAYG,EAAZ,CAAf;AAAA,iBAAtB,CAAZ;AACD,eAHD,MAGO,IAAGhH,UAAU,CAACiH,SAAX,CAAqBJ,SAArB,KACR7G,UAAU,CAACyE,kBAAX,CAA8BoC,SAA9B,CADK,EACqC;AAC1CP,gBAAAA,SAAS,GAAGQ,cAAc,CAAC5B,IAAf,CAAoB,UAAA8B,EAAE;AAAA,yBAAIE,UAAU,CAC9ClG,KAD8C,EACvC6F,SADuC,EAC5BG,EAD4B,EACxBxE,KADwB,CAAd;AAAA,iBAAtB,CAAZ;AAED;AACF;AACF,WAdD,MAcO,IAAGxC,UAAU,CAAC+G,OAAX,CAAmBJ,SAAnB,CAAH,EAAkC;AACvCL,YAAAA,SAAS,GAAGtB,UAAU,CAACE,IAAX,CAAgB,UAAAiC,EAAE;AAAA,qBAAIzC,WAAW,CAACiC,SAAD,EAAYQ,EAAZ,CAAf;AAAA,aAAlB,CAAZ;AACD,WAFM,MAEA,IAAGnH,UAAU,CAACyE,kBAAX,CAA8BkC,SAA9B,CAAH,EAA6C;AAClDL,YAAAA,SAAS,GACPtB,UAAU,CAACE,IAAX,CAAgB,UAAAiC,EAAE;AAAA,qBAAID,UAAU,CAAClG,KAAD,EAAQ2F,SAAR,EAAmBQ,EAAnB,EAAuB3E,KAAvB,CAAd;AAAA,aAAlB,CADF;AAED,WAHM,MAGA,IAAGvC,KAAK,CAAC8D,QAAN,CAAe4C,SAAf,CAAH,EAA8B;AACnCL,YAAAA,SAAS,GAAGtB,UAAU,CAAC7C,MAAX,GAAoB,CAAhC;AACD,WAFM,MAEA;AACLmE,YAAAA,SAAS,GAAG,KAAZ;AACD;AACF;AAvDI;;AAAA,gCAeH;AAfG;AAwDN,KArGqB,CAuGtB;;;AACA,QAAG,CAACA,SAAD,IAAc9D,KAAK,CAACI,UAAvB,EAAmC;AACjC,aAAO,KAAP;AACD;;AAEDyD,IAAAA,WAAW,GAAGA,WAAW,IAAIC,SAA7B;AACD,GAlHmD,CAoHpD;;;AACA,SAAOF,QAAQ,IAAIC,WAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS1C,YAAT,CAAsB3C,KAAtB,EAA6BkB,EAA7B,EAAiC;AAC/B;AACA,MAAMkF,MAAM,GAAGpG,KAAK,CAACkC,YAAN,CAAmBlC,KAAK,CAACE,KAAzB,CAAf;AACA,MAAMuB,KAAK,GAAG2E,MAAM,CAAClF,EAAD,CAApB;AACA,MAAMG,MAAM,GAAGI,KAAK,CAACJ,MAArB;AACA,MAAMC,QAAQ,GAAGG,KAAK,CAACH,QAAvB,CAL+B,CAO/B;;AACA,MAAMW,OAAO,GAAG;AAAC,WAAOf;AAAR,GAAhB,CAR+B,CAU/B;;AACA,MAAGjC,KAAK,CAAC6E,OAAN,CAAczC,MAAd,CAAH,EAA0B;AACxB;AACA,SAAI,IAAIuD,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGvD,MAAM,CAACF,MAA1B,EAAkC,EAAEyD,CAApC,EAAuC;AACrC,UAAG1F,IAAI,CAACmH,aAAL,CAAmBhF,MAAM,CAACuD,CAAD,CAAzB,EAA8B3C,OAA9B,CAAH,EAA2C;AACzCZ,QAAAA,MAAM,CAACuD,CAAD,CAAN,GAAY3C,OAAZ;AACA;AACD;AACF;AACF,GARD,MAQO;AACL;AACA,QAAMqE,QAAQ,GAAGrH,KAAK,CAAC6E,OAAN,CAAczC,MAAM,CAACC,QAAD,CAApB,CAAjB;AACApC,IAAAA,IAAI,CAACqH,WAAL,CAAiBlF,MAAjB,EAAyBC,QAAzB,EAAmCW,OAAnC,EAA4C;AAACM,MAAAA,eAAe,EAAE+D;AAAlB,KAA5C;AACApH,IAAAA,IAAI,CAACoD,QAAL,CAAcjB,MAAd,EAAsBC,QAAtB,EAAgCW,OAAhC,EAAyC;AAACM,MAAAA,eAAe,EAAE+D;AAAlB,KAAzC;AACD,GAxB8B,CA0B/B;;;AACA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAtF,EAAE,EAAI;AAC7B;AACA,QAAMc,GAAG,GAAGpB,MAAM,CAACC,IAAP,CAAYuF,MAAZ,CAAZ;;AACA,6BAAkBpE,GAAlB,4BAAuB;AAAnB,UAAM2B,IAAI,YAAV;;AACF,UAAGA,IAAI,IAAIyC,MAAR,IAAkBnH,KAAK,CAAC8D,QAAN,CAAeqD,MAAM,CAACzC,IAAD,CAAN,CAAatC,MAA5B,CAAlB,IACD+E,MAAM,CAACzC,IAAD,CAAN,CAAatC,MAAb,CAAoB,KAApB,MAA+BH,EADjC,EACqC;AACnC,eAAOkF,MAAM,CAACzC,IAAD,CAAb;AACA6C,QAAAA,gBAAgB,CAAC7C,IAAD,CAAhB;AACD;AACF;AACF,GAVD;;AAWA6C,EAAAA,gBAAgB,CAACtF,EAAD,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,gBAAT,CAA0BvB,KAA1B,EAAiCE,OAAjC,EAA0C;AACxC;AACA,MAAGd,KAAK,CAAC6E,OAAN,CAAcjE,KAAd,CAAH,EAAyB;AACvB,WAAOA,KAAK,CAAC0E,GAAN,CAAU,UAAAkC,KAAK;AAAA,aAAIrF,gBAAgB,CAACqF,KAAD,EAAQ1G,OAAR,CAApB;AAAA,KAAf,CAAP;AACD;;AAED,MAAGd,KAAK,CAAC8D,QAAN,CAAelD,KAAf,CAAH,EAA0B;AACxB;AACA,QAAG,eAAeA,KAAlB,EAAyB;AACvB,aAAOA,KAAK,CAAC,WAAD,CAAL,CAAmB,CAAnB,CAAP;AACD,KAJuB,CAMxB;;;AACA,QAAGb,UAAU,CAAC+G,OAAX,CAAmBlG,KAAnB,CAAH,EAA8B;AAC5B,aAAOA,KAAP;AACD,KATuB,CAWxB;;;AACA,QAAGb,UAAU,CAACqE,MAAX,CAAkBxD,KAAlB,CAAH,EAA6B;AAC3BA,MAAAA,KAAK,CAAC,OAAD,CAAL,GAAiBuB,gBAAgB,CAACvB,KAAK,CAAC,OAAD,CAAN,EAAiBE,OAAjB,CAAjC;AACA,aAAOF,KAAP;AACD,KAfuB,CAiBxB;;;AACA,QAAG,SAASA,KAAZ,EAAmB;AACjB,UAAMqB,EAAE,GAAGrB,KAAK,CAAC,KAAD,CAAhB;;AACA,UAAGE,OAAO,CAACM,IAAR,CAAawB,cAAb,CAA4BX,EAA5B,CAAH,EAAoC;AAClC,YAAMsD,GAAG,GAAGzE,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiBmB,OAAjB,CAAyBxC,KAAzB,CAAZ;;AACA,YAAG2E,GAAG,KAAK,CAAC,CAAZ,EAAe;AACb;AACA,iBAAOzE,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiBsD,GAAjB,CAAP;AACD,SALiC,CAMlC;;;AACAzE,QAAAA,OAAO,CAACM,IAAR,CAAaa,EAAb,EAAiB0B,IAAjB,CAAsB/C,KAAtB;AACD,OARD,MAQO;AACL;AACAE,QAAAA,OAAO,CAACM,IAAR,CAAaa,EAAb,IAAmB,CAACrB,KAAD,CAAnB;AACD;AACF,KAhCuB,CAkCxB;;;AACA,SAAI,IAAMmD,IAAV,IAAkBnD,KAAlB,EAAyB;AACvB;AACA,UAAGmD,IAAI,KAAK,KAAT,IAAkBjD,OAAO,CAACiB,aAAR,CAAsByE,QAAtB,CAA+B5F,KAAK,CAACmD,IAAD,CAApC,CAArB,EAAkE;AAChE,eAAOnD,KAAK,CAAC,KAAD,CAAZ;AACA;AACD;;AAEDA,MAAAA,KAAK,CAACmD,IAAD,CAAL,GAAc5B,gBAAgB,CAACvB,KAAK,CAACmD,IAAD,CAAN,EAAcjD,OAAd,CAA9B;AACD;AACF;;AACD,SAAOF,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,eAAT,CAAyBd,MAAzB,EAAiCC,QAAjC,EAA2Cc,MAA3C,EAAmD;AACjD,MAAGnD,KAAK,CAAC8D,QAAN,CAAe1B,MAAf,CAAH,EAA2B;AACzBnC,IAAAA,IAAI,CAACoD,QAAL,CAAcjB,MAAd,EAAsBC,QAAtB,EAAgCc,MAAhC,EAAwC;AAACG,MAAAA,eAAe,EAAE;AAAlB,KAAxC;AACD,GAFD,MAEO;AACLlB,IAAAA,MAAM,CAACuB,IAAP,CAAYR,MAAZ;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8D,UAAT,CAAoBlG,KAApB,EAA2B0G,OAA3B,EAAoCD,KAApC,EAA2CjF,KAA3C,EAAkD;AAChD,MAAG,EAAE,SAASiF,KAAX,CAAH,EAAsB;AACpB,WAAO,KAAP;AACD;;AACD,MAAME,UAAU,GAAG3G,KAAK,CAACU,QAAN,CAAe+F,KAAK,CAAC,KAAD,CAApB,CAAnB;AACA,SAAOE,UAAU,IAAIxB,cAAc,CAACnF,KAAD,EAAQ2G,UAAR,EAAoBD,OAApB,EAA6BlF,KAA7B,CAAnC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkC,WAAT,CAAqBgD,OAArB,EAA8BD,KAA9B,EAAqC;AACnC,MAAMG,EAAE,GAAGH,KAAK,CAAC,QAAD,CAAhB;AACA,MAAMI,EAAE,GAAGJ,KAAK,CAAC,OAAD,CAAhB;AACA,MAAMK,EAAE,GAAGL,KAAK,CAAC,WAAD,CAAhB;AACA,MAAMM,EAAE,GAAGL,OAAO,CAAC,QAAD,CAAP,GACRzH,KAAK,CAAC6E,OAAN,CAAc4C,OAAO,CAAC,QAAD,CAArB,IACCA,OAAO,CAAC,QAAD,CADR,GACqB,CAACA,OAAO,CAAC,QAAD,CAAR,CAFb,GAGT,EAHF;AAIA,MAAMM,EAAE,GAAGN,OAAO,CAAC,OAAD,CAAP,GACRzH,KAAK,CAAC6E,OAAN,CAAc4C,OAAO,CAAC,OAAD,CAArB,IACCA,OAAO,CAAC,OAAD,CADR,GACoB,CAACA,OAAO,CAAC,OAAD,CAAR,CAFZ,GAGT,EAHF;AAIA,MAAMO,EAAE,GAAGP,OAAO,CAAC,WAAD,CAAP,GACRzH,KAAK,CAAC6E,OAAN,CAAc4C,OAAO,CAAC,WAAD,CAArB,IACCA,OAAO,CAAC,WAAD,CADR,GACwB,CAACA,OAAO,CAAC,WAAD,CAAR,CAFhB,GAGT,EAHF;;AAKA,MAAGK,EAAE,CAAC5F,MAAH,KAAc,CAAd,IAAmB6F,EAAE,CAAC7F,MAAH,KAAc,CAAjC,IAAsC8F,EAAE,CAAC9F,MAAH,KAAc,CAAvD,EAA0D;AACxD,WAAO,IAAP;AACD;;AACD,MAAG,EAAE4F,EAAE,CAACtB,QAAH,CAAYmB,EAAZ,KAAmB3H,KAAK,CAACuG,aAAN,CAAoBuB,EAAE,CAAC,CAAD,CAAtB,CAArB,CAAH,EAAqD;AACnD,WAAO,KAAP;AACD;;AACD,MAAG,EAAE,CAACF,EAAD,IAAOG,EAAE,CAAC7F,MAAH,KAAc,CAArB,IAA0B6F,EAAE,CAACvB,QAAH,CAAYoB,EAAZ,CAA1B,IAA6CA,EAAE,IAClD5H,KAAK,CAACuG,aAAN,CAAoBwB,EAAE,CAAC,CAAD,CAAtB,CADC,CAAH,EAC+B;AAC7B,WAAO,KAAP;AACD;;AACD,MAAG,EAAE,CAACF,EAAD,IAAOG,EAAE,CAAC9F,MAAH,KAAc,CAArB,IAA0B8F,EAAE,CAACxB,QAAH,CAAYqB,EAAZ,CAA1B,IAA6CA,EAAE,IAClD7H,KAAK,CAACuG,aAAN,CAAoByB,EAAE,CAAC,CAAD,CAAtB,CADC,CAAH,EAC+B;AAC7B,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {isKeyword} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst url = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    embedded: false,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  // remove @preserve from results\n  options.link = {};\n  return _cleanupPreserve(framed, options);\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // get link for current graph\n  if(!state.link.hasOwnProperty(state.graph)) {\n    state.link[state.graph] = {};\n  }\n  const link = state.link[state.graph];\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    if(flags.embed === '@link' && id in link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, link[id]);\n      continue;\n    }\n\n    // start output for subject\n    const output = {'@id': id};\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    link[id] = output;\n\n    // validate @embed\n    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n\n    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      // skip adding this node object to the top level, as it was\n      // already included in another node object\n      continue;\n    }\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(state.embedded &&\n      (flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack))) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the first (or once) should be embedded\n    if(state.embedded &&\n       (flags.embed == '@first' || flags.embed == '@once') &&\n       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n    }\n\n    state.uniqueEmbeds[state.graph][id] = {parent, property};\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        recurse = !(id === '@merged' || id === '@default');\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n      }\n\n      if(recurse) {\n        // recurse into graph\n        api.frame(\n          {...state, graph: id, embedded: false},\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n      }\n    }\n\n    // if frame has @included, recurse over its sub-frame\n    if('@included' in frame) {\n      api.frame(\n        {...state, embedded: false},\n        subjects, frame['@included'], output, '@included');\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(const o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          const subframe =\n            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?\n              frame[prop][0]['@list'] :\n              _createImplicitFrame(flags);\n\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const oo of src) {\n            if(graphTypes.isSubjectReference(oo)) {\n              // recurse into subject reference\n              api.frame(\n                {...state, embedded: true},\n                [oo['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(oo));\n            }\n          }\n        } else if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(\n            {...state, embedded: true},\n            [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(prop === '@type') {\n        if(!types.isObject(frame[prop][0]) ||\n           !('@default' in frame[prop][0])) {\n          continue;\n        }\n        // allow through default types\n      } else if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {\n      const subframe = frame['@reverse'][reverseProp];\n      for(const subject of Object.keys(state.subjects)) {\n        const nodeValues =\n          util.getValues(state.subjects[subject], reverseProp);\n        if(nodeValues.some(v => v['@id'] === id)) {\n          // node has property referencing this subject, recurse\n          output['@reverse'] = output['@reverse'] || {};\n          util.addValue(\n            output['@reverse'], reverseProp, [], {propertyIsArray: true});\n          api.frame(\n            {...state, embedded: true},\n            [subject], subframe, output['@reverse'][reverseProp],\n            property);\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Replace `@null` with `null`, removing it from arrays.\n *\n * @param input the framed, compacted output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\napi.cleanupNull = (input, options) => {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    const noNulls = input.map(v => api.cleanupNull(v, options));\n    return noNulls.filter(v => v); // removes nulls from array\n  }\n\n  if(input === '@null') {\n    return null;\n  }\n\n  if(types.isObject(input)) {\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    for(const key in input) {\n      input[key] = api.cleanupNull(input[key], options);\n    }\n  }\n  return input;\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@once';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&\n      rval !== '@first' && rval !== '@last' && rval !== '@once') {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; invalid value of @embed.',\n        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n\n  if('@id' in frame[0]) {\n    for(const id of util.asArray(frame[0]['@id'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(id) || url.isAbsolute(id)) ||\n        (types.isString(id) && id.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @id in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n\n  if('@type' in frame[0]) {\n    for(const type of util.asArray(frame[0]['@type'])) {\n      // @id must be wildcard or an IRI\n      if(!(types.isObject(type) || url.isAbsolute(type)) ||\n        (types.isString(type) && type.indexOf('_:') === 0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; invalid @type in frame.',\n          'jsonld.SyntaxError', {code: 'invalid frame', frame});\n      }\n    }\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(key === '@id') {\n      // match on no @id or any matching @id, including wildcard\n      if(types.isEmptyObject(frame['@id'][0] || {})) {\n        matchThis = true;\n      } else if(frame['@id'].length >= 0) {\n        matchThis = frame['@id'].includes(nodeValues[0]);\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(key === '@type') {\n      // check @type (object value means 'any' type,\n      // fall through to ducktyping)\n      wildcard = false;\n      if(isEmpty) {\n        if(nodeValues.length > 0) {\n          // don't match on no @type\n          return false;\n        }\n        matchThis = true;\n      } else if(frame['@type'].length === 1 &&\n        types.isEmptyObject(frame['@type'][0])) {\n        // match on wildcard @type if there is a type\n        matchThis = nodeValues.length > 0;\n      } else {\n        // match on a specific @type\n        for(const type of frame['@type']) {\n          if(types.isObject(type) && '@default' in type) {\n            // match on default object\n            matchThis = true;\n          } else {\n            matchThis = matchThis || nodeValues.some(tt => tt === type);\n          }\n        }\n      }\n      if(!flags.requireAll) {\n        return matchThis;\n      }\n    } else if(isKeyword(key)) {\n      continue;\n    } else {\n      // Force a copy of this frame entry so it can be manipulated\n      const thisFrame = util.getValues(frame, key)[0];\n      let hasDefault = false;\n      if(thisFrame) {\n        _validateFrame([thisFrame]);\n        hasDefault = '@default' in thisFrame;\n      }\n\n      // no longer a wildcard pattern if frame has any non-keyword properties\n      wildcard = false;\n\n      // skip, but allow match if node has no value for property, and frame has\n      // a default value\n      if(nodeValues.length === 0 && hasDefault) {\n        continue;\n      }\n\n      // if frame value is empty, don't match if subject has any value\n      if(nodeValues.length > 0 && isEmpty) {\n        return false;\n      }\n\n      if(thisFrame === undefined) {\n        // node does not match if values is not empty and the value of property\n        // in frame is match none.\n        if(nodeValues.length > 0) {\n          return false;\n        }\n        matchThis = true;\n      } else {\n        if(graphTypes.isList(thisFrame)) {\n          const listValue = thisFrame['@list'][0];\n          if(graphTypes.isList(nodeValues[0])) {\n            const nodeListValues = nodeValues[0]['@list'];\n\n            if(graphTypes.isValue(listValue)) {\n              // match on any matching value\n              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n            } else if(graphTypes.isSubject(listValue) ||\n              graphTypes.isSubjectReference(listValue)) {\n              matchThis = nodeListValues.some(lv => _nodeMatch(\n                state, listValue, lv, flags));\n            }\n          }\n        } else if(graphTypes.isValue(thisFrame)) {\n          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n        } else if(graphTypes.isSubjectReference(thisFrame)) {\n          matchThis =\n            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n        } else if(types.isObject(thisFrame)) {\n          matchThis = nodeValues.length > 0;\n        } else {\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Removes the @preserve keywords from expanded result of framing.\n *\n * @param input the framed, framed output.\n * @param options the framing options used.\n *\n * @return the resulting output.\n */\nfunction _cleanupPreserve(input, options) {\n  // recurse through arrays\n  if(types.isArray(input)) {\n    return input.map(value => _cleanupPreserve(value, options));\n  }\n\n  if(types.isObject(input)) {\n    // remove @preserve\n    if('@preserve' in input) {\n      return input['@preserve'][0];\n    }\n\n    // skip @values\n    if(graphTypes.isValue(input)) {\n      return input;\n    }\n\n    // recurse through @lists\n    if(graphTypes.isList(input)) {\n      input['@list'] = _cleanupPreserve(input['@list'], options);\n      return input;\n    }\n\n    // handle in-memory linked nodes\n    if('@id' in input) {\n      const id = input['@id'];\n      if(options.link.hasOwnProperty(id)) {\n        const idx = options.link[id].indexOf(input);\n        if(idx !== -1) {\n          // already visited\n          return options.link[id][idx];\n        }\n        // prevent circular visitation\n        options.link[id].push(input);\n      } else {\n        // prevent circular visitation\n        options.link[id] = [input];\n      }\n    }\n\n    // recurse through properties\n    for(const prop in input) {\n      // potentially remove the id, if it is an unreference bnode\n      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {\n        delete input['@id'];\n        continue;\n      }\n\n      input[prop] = _cleanupPreserve(input[prop], options);\n    }\n  }\n  return input;\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}