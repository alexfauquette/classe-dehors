{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/resources/Event/EventList.js\";\nimport React from \"react\";\nimport { ReferenceField, TextField } from \"react-admin\";\nimport { Avatar } from \"@material-ui/core\";\nimport { List, SimpleList, ListActions } from \"@semapps/archipelago-layout\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport MarkdownIntroduction from \"../../markdown/MarkdownIntroduction\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport isBefore from \"date-fns/isBefore\";\nimport format from \"date-fns/format\";\nimport { eventType } from \"../../constants.js\";\n\nconst postRowStyle = (record, index) => {\n  const pastEvent = isBefore(new Date(record[\"pair:endDate\"]), new Date());\n  return {\n    backgroundColor: pastEvent ? \"lightgray\" : \"white\"\n  };\n};\n\nconst EventList = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MarkdownIntroduction, {\n  pageId: \"agenda-introduction\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(List, Object.assign({}, props, {\n  title: \"Calendrier\",\n  sort: {\n    field: \"pair:startDate\",\n    order: \"ASC\"\n  },\n  actions: /*#__PURE__*/React.createElement(ListActions, {\n    exporter: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(SimpleList, {\n  primaryText: record => record[\"pair:label\"],\n  secondaryText: record => {\n    const pastEvent = record[\"pair:endDate\"] && isBefore(new Date(record[\"pair:endDate\"]), new Date()) || !record[\"pair:endDate\"] && isBefore(new Date(record[\"pair:startDate\"]), new Date());\n\n    if (pastEvent) {\n      return `Passé:\\xa0le\\xa0${format(new Date(record[\"pair:startDate\"]), \"dd/MM/yyyy\")}`;\n    }\n\n    if (record[\"pair:startDate\"] && record[\"pair:endDate\"]) {\n      if (isSameDay(new Date(record[\"pair:startDate\"]), new Date(record[\"pair:endDate\"]))) {\n        // Same day : Le xx/xx/xxxx de tt:tt à tt:tt\n        return `Le\\xa0${format(new Date(record[\"pair:startDate\"]), \"dd/MM/yyyy\")} de\\xa0${format(new Date(record[\"pair:startDate\"]), \"kk:mm\")}\\xa0à\\xa0${format(new Date(record[\"pair:endDate\"]), \"kk:mm\")}`;\n      } else {\n        // Different days : Du xx/xx/xxxx tt:tt au xx/xx/xxxx tt:tt\n        return `Du\\xa0${format(new Date(record[\"pair:startDate\"]), \"dd/MM/yyyy\\xa0kk:mm\")} au\\xa0${format(new Date(record[\"pair:endDate\"]), \"dd/MM/yyyy\\xa0kk:mm\")}`;\n      }\n    }\n\n    if (record[\"pair:startDate\"]) {\n      // Only start day indicated : La xx/xx/xxxx à tt:tt\n      return `Le\\xa0${format(new Date(record[\"pair:startDate\"]), \"dd/MM/yyyy\")}\\xa0à\\xa0${format(new Date(record[\"pair:startDate\"]), \"kk:mm\")}`;\n    }\n\n    return \"\";\n  },\n  tertiaryText: record => {\n    var _eventType$find;\n\n    if (record[\"pair:operatedBy\"]) {\n      return /*#__PURE__*/React.createElement(ReferenceField, {\n        record: record,\n        reference: \"Organization\",\n        basePath: \"Organization\" // Hack to get access to to Organization data\n        ,\n        source: \"pair:operatedBy\",\n        linkType: \"show\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        source: \"pair:label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    return record[\"pair:hasType\"] ? (_eventType$find = eventType.find(({\n      id\n    }) => id === record[\"pair:hasType\"])) === null || _eventType$find === void 0 ? void 0 : _eventType$find.name : \"\";\n  },\n  leftAvatar: () => /*#__PURE__*/React.createElement(Avatar, {\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(EventIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  })),\n  linkType: \"show\",\n  rowStyle: postRowStyle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }\n})));\n\nexport default EventList;","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/resources/Event/EventList.js"],"names":["React","ReferenceField","TextField","Avatar","List","SimpleList","ListActions","EventIcon","MarkdownIntroduction","isSameDay","isBefore","format","eventType","postRowStyle","record","index","pastEvent","Date","backgroundColor","EventList","props","field","order","find","id","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ReferenceField, TextField } from \"react-admin\";\nimport { Avatar } from \"@material-ui/core\";\nimport { List, SimpleList, ListActions } from \"@semapps/archipelago-layout\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport MarkdownIntroduction from \"../../markdown/MarkdownIntroduction\";\n\nimport isSameDay from \"date-fns/isSameDay\";\nimport isBefore from \"date-fns/isBefore\";\nimport format from \"date-fns/format\";\n\nimport { eventType } from \"../../constants.js\";\n\nconst postRowStyle = (record, index) => {\n  const pastEvent = isBefore(new Date(record[\"pair:endDate\"]), new Date());\n  return {\n    backgroundColor: pastEvent ? \"lightgray\" : \"white\",\n  };\n};\n\nconst EventList = (props) => (\n  <>\n    <MarkdownIntroduction pageId=\"agenda-introduction\" />\n    <List\n      {...props}\n      title=\"Calendrier\"\n      sort={{ field: \"pair:startDate\", order: \"ASC\" }}\n      actions={<ListActions exporter={false} />}\n    >\n      <SimpleList\n        primaryText={(record) => record[\"pair:label\"]}\n        secondaryText={(record) => {\n          const pastEvent =\n            (record[\"pair:endDate\"] &&\n              isBefore(new Date(record[\"pair:endDate\"]), new Date())) ||\n            (!record[\"pair:endDate\"] &&\n              isBefore(new Date(record[\"pair:startDate\"]), new Date()));\n\n          if (pastEvent) {\n            return `Passé:\\xa0le\\xa0${format(\n              new Date(record[\"pair:startDate\"]),\n              \"dd/MM/yyyy\"\n            )}`;\n          }\n          if (record[\"pair:startDate\"] && record[\"pair:endDate\"]) {\n            if (\n              isSameDay(\n                new Date(record[\"pair:startDate\"]),\n                new Date(record[\"pair:endDate\"])\n              )\n            ) {\n              // Same day : Le xx/xx/xxxx de tt:tt à tt:tt\n              return `Le\\xa0${format(\n                new Date(record[\"pair:startDate\"]),\n                \"dd/MM/yyyy\"\n              )} de\\xa0${format(\n                new Date(record[\"pair:startDate\"]),\n                \"kk:mm\"\n              )}\\xa0à\\xa0${format(new Date(record[\"pair:endDate\"]), \"kk:mm\")}`;\n            } else {\n              // Different days : Du xx/xx/xxxx tt:tt au xx/xx/xxxx tt:tt\n              return `Du\\xa0${format(\n                new Date(record[\"pair:startDate\"]),\n                \"dd/MM/yyyy\\xa0kk:mm\"\n              )} au\\xa0${format(\n                new Date(record[\"pair:endDate\"]),\n                \"dd/MM/yyyy\\xa0kk:mm\"\n              )}`;\n            }\n          }\n          if (record[\"pair:startDate\"]) {\n            // Only start day indicated : La xx/xx/xxxx à tt:tt\n            return `Le\\xa0${format(\n              new Date(record[\"pair:startDate\"]),\n              \"dd/MM/yyyy\"\n            )}\\xa0à\\xa0${format(new Date(record[\"pair:startDate\"]), \"kk:mm\")}`;\n          }\n          return \"\";\n        }}\n        tertiaryText={(record) => {\n          if (record[\"pair:operatedBy\"]) {\n            return (\n              <ReferenceField\n                record={record}\n                reference=\"Organization\"\n                basePath=\"Organization\" // Hack to get access to to Organization data\n                source=\"pair:operatedBy\"\n                linkType=\"show\"\n              >\n                <TextField source=\"pair:label\" />\n              </ReferenceField>\n            );\n          }\n          return record[\"pair:hasType\"]\n            ? eventType.find(({ id }) => id === record[\"pair:hasType\"])?.name\n            : \"\";\n        }}\n        leftAvatar={() => (\n          <Avatar width=\"100%\">\n            <EventIcon />\n          </Avatar>\n        )}\n        linkType=\"show\"\n        rowStyle={postRowStyle}\n      />\n    </List>\n  </>\n);\n\nexport default EventList;\n"]},"metadata":{},"sourceType":"module"}