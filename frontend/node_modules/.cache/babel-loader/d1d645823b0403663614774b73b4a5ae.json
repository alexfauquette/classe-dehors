{"ast":null,"code":"var _jsxFileName = \"/home/alexandre/dev/classe-dehors/frontend/src/markdown/MarkdownInput.js\";\nimport React, { useState } from 'react';\nimport ReactMde from 'react-mde';\nimport Markdown from 'markdown-to-jsx';\nimport { useInput } from 'react-admin';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst MarkdownInput = ({\n  helperText,\n  ...props\n}) => {\n  const [tab, setTab] = useState('write');\n  const {\n    input: {\n      value,\n      onChange,\n      onBlur,\n      onFocus\n    },\n    meta: {\n      error,\n      submitError,\n      touched\n    },\n    isRequired\n  } = useInput(props);\n  return /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    className: \"ra-input-mde\",\n    error: !!(touched && (error || submitError)),\n    required: isRequired,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactMde, Object.assign({\n    value: value,\n    onChange: value => onChange(value),\n    onTabChange: tab => setTab(tab),\n    generateMarkdownPreview: async (markdown) => /*#__PURE__*/React.createElement(Markdown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, markdown),\n    selectedTab: tab,\n    childProps: {\n      textArea: {\n        onBlur: onBlur,\n        onFocus: onFocus\n      }\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(FormHelperText, {\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, touched && error ? error : typeof helperText === \"string\" ? helperText : null));\n};\n\nMarkdownInput.defaultProps = {\n  addLabel: true\n};\nexport default MarkdownInput; // const MarkdownInput = ({\n//   source,\n//   helperText,\n//   label,\n//   defaultValue,\n//   fullWidth,\n// }) => {\n//   const {\n//     input: { value = \"\", onBlur, onFocus, onChange },\n//     meta: { error, submitError, touched },\n//     isRequired,\n//   } = useInput({ source, defaultValue: defaultValue || \"\" });\n//   const [tab, setTab] = useState(\"write\");\n//   const converter = new Showdown.Converter({\n//     tables: true,\n//     simplifiedAutoLink: true,\n//     strikethrough: true,\n//     tasklists: true,\n//   });\n//   return (\n//     <FormControl\n//       error={!!(touched && (error || submitError))}\n//       required={isRequired}\n//       fullWidth={fullWidth}\n//     >\n//       {label !== \"\" && label !== false && <FormLabel>{label}</FormLabel>}\n//       <ReactMde\n//         onTabChange={(tab) => setTab(tab)}\n//         generateMarkdownPreview={(markdown) =>\n//           Promise.resolve(converter.makeHtml(markdown))\n//         }\n//         selectedTab={tab}\n//         childProps={{\n//           textArea: {\n//             onBlur: onBlur,\n//             onFocus: onFocus,\n//           },\n//         }}\n//         value={value}\n//         onChange={onChange}\n//       />\n//     </FormControl>\n//   );\n// };","map":{"version":3,"sources":["/home/alexandre/dev/classe-dehors/frontend/src/markdown/MarkdownInput.js"],"names":["React","useState","ReactMde","Markdown","useInput","FormControl","FormHelperText","MarkdownInput","helperText","props","tab","setTab","input","value","onChange","onBlur","onFocus","meta","error","submitError","touched","isRequired","markdown","textArea","defaultProps","addLabel"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAc,KAAGC;AAAjB,CAAD,KAA8B;AAClD,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,OAAD,CAA9B;AACA,QAAM;AACJW,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA;AAA3B,KADH;AAEJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,KAFF;AAGJC,IAAAA;AAHI,MAIFjB,QAAQ,CAACK,KAAD,CAJZ;AAMA,sBACE,oBAAC,WAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,cAFZ;AAGE,IAAA,KAAK,EAAE,CAAC,EAAEW,OAAO,KAAKF,KAAK,IAAIC,WAAd,CAAT,CAHV;AAIE,IAAA,QAAQ,EAAEE,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,QAAD;AACE,IAAA,KAAK,EAAER,KADT;AAEE,IAAA,QAAQ,EAAGA,KAAD,IAAWC,QAAQ,CAACD,KAAD,CAF/B;AAGE,IAAA,WAAW,EAAGH,GAAD,IAASC,MAAM,CAACD,GAAD,CAH9B;AAIE,IAAA,uBAAuB,EAAE,OAAOY,QAAP,kBACvB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWA,QAAX,CALJ;AAOE,IAAA,WAAW,EAAEZ,GAPf;AAQE,IAAA,UAAU,EAAE;AACVa,MAAAA,QAAQ,EAAE;AACRR,QAAAA,MAAM,EAAEA,MADA;AAERC,QAAAA,OAAO,EAAEA;AAFD;AADA;AARd,KAcMP,KAdN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANF,eAsBE,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGW,OAAO,IAAIF,KAAX,GACGA,KADH,GAEG,OAAOV,UAAP,KAAsB,QAAtB,GACAA,UADA,GAEA,IALN,CAtBF,CADF;AAgCD,CAxCD;;AA0CAD,aAAa,CAACiB,YAAd,GAA6B;AAC3BC,EAAAA,QAAQ,EAAE;AADiB,CAA7B;AAIA,eAAelB,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport ReactMde from 'react-mde';\nimport Markdown from 'markdown-to-jsx';\nimport { useInput } from 'react-admin';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst MarkdownInput = ({ helperText, ...props }) => {\n  const [tab, setTab] = useState('write');\n  const {\n    input: { value, onChange, onBlur, onFocus },\n    meta: { error, submitError, touched },\n    isRequired,\n  } = useInput(props);\n\n  return (\n    <FormControl\n      fullWidth\n      className=\"ra-input-mde\"\n      error={!!(touched && (error || submitError))}\n      required={isRequired}\n    >\n      <ReactMde\n        value={value}\n        onChange={(value) => onChange(value)}\n        onTabChange={(tab) => setTab(tab)}\n        generateMarkdownPreview={async (markdown) => (\n          <Markdown>{markdown}</Markdown>\n        )}\n        selectedTab={tab}\n        childProps={{\n          textArea: {\n            onBlur: onBlur,\n            onFocus: onFocus,\n          },\n        }}\n        {...props}\n      />\n      <FormHelperText variant=\"outlined\">\n        {touched && error\n          ? error\n          : typeof helperText === \"string\"\n          ? helperText\n          : null}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nMarkdownInput.defaultProps = {\n  addLabel: true,\n};\n\nexport default MarkdownInput;\n\n// const MarkdownInput = ({\n//   source,\n//   helperText,\n//   label,\n//   defaultValue,\n//   fullWidth,\n// }) => {\n//   const {\n//     input: { value = \"\", onBlur, onFocus, onChange },\n//     meta: { error, submitError, touched },\n//     isRequired,\n//   } = useInput({ source, defaultValue: defaultValue || \"\" });\n\n//   const [tab, setTab] = useState(\"write\");\n\n//   const converter = new Showdown.Converter({\n//     tables: true,\n//     simplifiedAutoLink: true,\n//     strikethrough: true,\n//     tasklists: true,\n//   });\n\n//   return (\n//     <FormControl\n//       error={!!(touched && (error || submitError))}\n//       required={isRequired}\n//       fullWidth={fullWidth}\n//     >\n//       {label !== \"\" && label !== false && <FormLabel>{label}</FormLabel>}\n//       <ReactMde\n//         onTabChange={(tab) => setTab(tab)}\n//         generateMarkdownPreview={(markdown) =>\n//           Promise.resolve(converter.makeHtml(markdown))\n//         }\n//         selectedTab={tab}\n//         childProps={{\n//           textArea: {\n//             onBlur: onBlur,\n//             onFocus: onFocus,\n//           },\n//         }}\n//         value={value}\n//         onChange={onChange}\n//       />\n//     </FormControl>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}